/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Race :
        SkyrimMajorRecord,
        IEquatable<IRaceGetter>,
        ILoquiObjectSetter<Race>,
        IRaceInternal
    {
        #region Ctor
        protected Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IRaceGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter IRaceGetter.Description => this.Description;
        #endregion
        #region ActorEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? _ActorEffect;
        public ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect
        {
            get => this._ActorEffect;
            set => this._ActorEffect = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? IRaceGetter.ActorEffect => _ActorEffect;
        #endregion

        #endregion
        #region Skin
        private readonly IFormLinkNullable<IArmorGetter> _Skin = new FormLinkNullable<IArmorGetter>();
        public IFormLinkNullable<IArmorGetter> Skin
        {
            get => _Skin;
            set => _Skin.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> IRaceGetter.Skin => this.Skin;
        #endregion
        #region BodyTemplate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BodyTemplate? _BodyTemplate;
        public BodyTemplate? BodyTemplate
        {
            get => _BodyTemplate;
            set => _BodyTemplate = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyTemplateGetter? IRaceGetter.BodyTemplate => this.BodyTemplate;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IRaceGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region SkillBoost0
        public SkillBoost SkillBoost0 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost0 => SkillBoost0;
        #endregion
        #region SkillBoost1
        public SkillBoost SkillBoost1 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost1 => SkillBoost1;
        #endregion
        #region SkillBoost2
        public SkillBoost SkillBoost2 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost2 => SkillBoost2;
        #endregion
        #region SkillBoost3
        public SkillBoost SkillBoost3 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost3 => SkillBoost3;
        #endregion
        #region SkillBoost4
        public SkillBoost SkillBoost4 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost4 => SkillBoost4;
        #endregion
        #region SkillBoost5
        public SkillBoost SkillBoost5 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost5 => SkillBoost5;
        #endregion
        #region SkillBoost6
        public SkillBoost SkillBoost6 { get; set; } = new SkillBoost();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillBoostGetter IRaceGetter.SkillBoost6 => SkillBoost6;
        #endregion
        #region Unknown
        public Int16 Unknown { get; set; } = default(Int16);
        #endregion
        #region Height
        public IGenderedItem<Single> Height { get; set; } = new GenderedItem<Single>(default(Single), default(Single));
        IGenderedItemGetter<Single> IRaceGetter.Height => this.Height;
        #endregion
        #region Weight
        public IGenderedItem<Single> Weight { get; set; } = new GenderedItem<Single>(default(Single), default(Single));
        IGenderedItemGetter<Single> IRaceGetter.Weight => this.Weight;
        #endregion
        #region Flags
        public Race.Flag Flags { get; set; } = default(Race.Flag);
        #endregion
        #region Starting
        private readonly Dictionary<BasicStat, Single> _Starting = new Dictionary<BasicStat, Single>();
        public IDictionary<BasicStat, Single> Starting => _Starting;
        #region Interface Members
        IDictionary<BasicStat, Single> IRace.Starting => _Starting;
        IReadOnlyDictionary<BasicStat, Single> IRaceGetter.Starting => _Starting;
        #endregion

        #endregion
        #region BaseCarryWeight
        public Single BaseCarryWeight { get; set; } = default(Single);
        #endregion
        #region BaseMass
        public Single BaseMass { get; set; } = default(Single);
        #endregion
        #region AccelerationRate
        public Single AccelerationRate { get; set; } = default(Single);
        #endregion
        #region DecelerationRate
        public Single DecelerationRate { get; set; } = default(Single);
        #endregion
        #region Size
        public Size Size { get; set; } = default(Size);
        #endregion
        #region HeadBipedObject
        public static readonly BipedObject HeadBipedObjectDefault = BipedObject.None;
        public BipedObject HeadBipedObject { get; set; } = HeadBipedObjectDefault;
        #endregion
        #region HairBipedObject
        public static readonly BipedObject HairBipedObjectDefault = BipedObject.None;
        public BipedObject HairBipedObject { get; set; } = HairBipedObjectDefault;
        #endregion
        #region InjuredHealthPercent
        public Single InjuredHealthPercent { get; set; } = default(Single);
        #endregion
        #region ShieldBipedObject
        public static readonly BipedObject ShieldBipedObjectDefault = BipedObject.None;
        public BipedObject ShieldBipedObject { get; set; } = ShieldBipedObjectDefault;
        #endregion
        #region Regen
        private readonly Dictionary<BasicStat, Single> _Regen = new Dictionary<BasicStat, Single>();
        public IDictionary<BasicStat, Single> Regen => _Regen;
        #region Interface Members
        IDictionary<BasicStat, Single> IRace.Regen => _Regen;
        IReadOnlyDictionary<BasicStat, Single> IRaceGetter.Regen => _Regen;
        #endregion

        #endregion
        #region UnarmedDamage
        public Single UnarmedDamage { get; set; } = default(Single);
        #endregion
        #region UnarmedReach
        public Single UnarmedReach { get; set; } = default(Single);
        #endregion
        #region BodyBipedObject
        public static readonly BipedObject BodyBipedObjectDefault = BipedObject.None;
        public BipedObject BodyBipedObject { get; set; } = BodyBipedObjectDefault;
        #endregion
        #region AimAngleTolerance
        public Single AimAngleTolerance { get; set; } = default(Single);
        #endregion
        #region FlightRadius
        public Single FlightRadius { get; set; } = default(Single);
        #endregion
        #region AngularAccelerationRate
        public Single AngularAccelerationRate { get; set; } = default(Single);
        #endregion
        #region AngularTolerance
        public Single AngularTolerance { get; set; } = default(Single);
        #endregion
        #region MountData
        public MountData MountData { get; set; } = new MountData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMountDataGetter IRaceGetter.MountData => MountData;
        #endregion
        #region SkeletalModel
        public IGenderedItem<SimpleModel?>? SkeletalModel { get; set; }
        IGenderedItemGetter<ISimpleModelGetter?>? IRaceGetter.SkeletalModel => this.SkeletalModel;
        #endregion
        #region MovementTypeNames
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String> _MovementTypeNames = new ExtendedList<String>();
        public ExtendedList<String> MovementTypeNames
        {
            get => this._MovementTypeNames;
            init => this._MovementTypeNames = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String> IRaceGetter.MovementTypeNames => _MovementTypeNames;
        #endregion

        #endregion
        #region Voices
        public IGenderedItem<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; set; } = new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(FormLink<IVoiceTypeGetter>.Null, FormLink<IVoiceTypeGetter>.Null);
        IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> IRaceGetter.Voices => this.Voices;
        #endregion
        #region DecapitateArmors
        public IGenderedItem<IFormLinkGetter<IArmorGetter>>? DecapitateArmors { get; set; }
        IGenderedItemGetter<IFormLinkGetter<IArmorGetter>>? IRaceGetter.DecapitateArmors => this.DecapitateArmors;
        #endregion
        #region DefaultHairColors
        public IGenderedItem<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors { get; set; }
        IGenderedItemGetter<IFormLinkGetter<IColorRecordGetter>>? IRaceGetter.DefaultHairColors => this.DefaultHairColors;
        #endregion
        #region NumberOfTintsInList
        public UInt16? NumberOfTintsInList { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IRaceGetter.NumberOfTintsInList => this.NumberOfTintsInList;
        #endregion
        #region FacegenMainClamp
        public Single FacegenMainClamp { get; set; } = default(Single);
        #endregion
        #region FacegenFaceClamp
        public Single FacegenFaceClamp { get; set; } = default(Single);
        #endregion
        #region AttackRace
        private readonly IFormLinkNullable<IRaceGetter> _AttackRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> AttackRace
        {
            get => _AttackRace;
            set => _AttackRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.AttackRace => this.AttackRace;
        #endregion
        #region Attacks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Attack> _Attacks = new ExtendedList<Attack>();
        public ExtendedList<Attack> Attacks
        {
            get => this._Attacks;
            init => this._Attacks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAttackGetter> IRaceGetter.Attacks => _Attacks;
        #endregion

        #endregion
        #region BodyData
        public IGenderedItem<BodyData?> BodyData { get; set; } = new GenderedItem<BodyData?>(default, default);
        IGenderedItemGetter<IBodyDataGetter?> IRaceGetter.BodyData => this.BodyData;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IHairGetter>>? _Hairs;
        public ExtendedList<IFormLinkGetter<IHairGetter>>? Hairs
        {
            get => this._Hairs;
            set => this._Hairs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IHairGetter>>? IRaceGetter.Hairs => _Hairs;
        #endregion

        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IEyesGetter>>? _Eyes;
        public ExtendedList<IFormLinkGetter<IEyesGetter>>? Eyes
        {
            get => this._Eyes;
            set => this._Eyes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IEyesGetter>>? IRaceGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region BodyPartData
        private readonly IFormLinkNullable<IBodyPartDataGetter> _BodyPartData = new FormLinkNullable<IBodyPartDataGetter>();
        public IFormLinkNullable<IBodyPartDataGetter> BodyPartData
        {
            get => _BodyPartData;
            set => _BodyPartData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IBodyPartDataGetter> IRaceGetter.BodyPartData => this.BodyPartData;
        #endregion
        #region BehaviorGraph
        public IGenderedItem<Model?> BehaviorGraph { get; set; } = new GenderedItem<Model?>(default, default);
        IGenderedItemGetter<IModelGetter?> IRaceGetter.BehaviorGraph => this.BehaviorGraph;
        #endregion
        #region MaterialType
        private readonly IFormLinkNullable<IMaterialTypeGetter> _MaterialType = new FormLinkNullable<IMaterialTypeGetter>();
        public IFormLinkNullable<IMaterialTypeGetter> MaterialType
        {
            get => _MaterialType;
            set => _MaterialType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialTypeGetter> IRaceGetter.MaterialType => this.MaterialType;
        #endregion
        #region ImpactDataSet
        private readonly IFormLinkNullable<IImpactDataSetGetter> _ImpactDataSet = new FormLinkNullable<IImpactDataSetGetter>();
        public IFormLinkNullable<IImpactDataSetGetter> ImpactDataSet
        {
            get => _ImpactDataSet;
            set => _ImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IImpactDataSetGetter> IRaceGetter.ImpactDataSet => this.ImpactDataSet;
        #endregion
        #region DecapitationFX
        private readonly IFormLinkNullable<IArtObjectGetter> _DecapitationFX = new FormLinkNullable<IArtObjectGetter>();
        public IFormLinkNullable<IArtObjectGetter> DecapitationFX
        {
            get => _DecapitationFX;
            set => _DecapitationFX.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArtObjectGetter> IRaceGetter.DecapitationFX => this.DecapitationFX;
        #endregion
        #region OpenLootSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _OpenLootSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> OpenLootSound
        {
            get => _OpenLootSound;
            set => _OpenLootSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IRaceGetter.OpenLootSound => this.OpenLootSound;
        #endregion
        #region CloseLootSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _CloseLootSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> CloseLootSound
        {
            get => _CloseLootSound;
            set => _CloseLootSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IRaceGetter.CloseLootSound => this.CloseLootSound;
        #endregion
        #region BipedObjectNames
        private readonly Dictionary<BipedObject, String> _BipedObjectNames = new Dictionary<BipedObject, String>();
        public IDictionary<BipedObject, String> BipedObjectNames => _BipedObjectNames;
        #region Interface Members
        IDictionary<BipedObject, String> IRace.BipedObjectNames => _BipedObjectNames;
        IReadOnlyDictionary<BipedObject, String> IRaceGetter.BipedObjectNames => _BipedObjectNames;
        #endregion

        #endregion
        #region MovementTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RaceMovementType> _MovementTypes = new ExtendedList<RaceMovementType>();
        public ExtendedList<RaceMovementType> MovementTypes
        {
            get => this._MovementTypes;
            init => this._MovementTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRaceMovementTypeGetter> IRaceGetter.MovementTypes => _MovementTypes;
        #endregion

        #endregion
        #region EquipmentFlags
        public EquipTypeFlag? EquipmentFlags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        EquipTypeFlag? IRaceGetter.EquipmentFlags => this.EquipmentFlags;
        #endregion
        #region EquipmentSlots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IEquipTypeGetter>> _EquipmentSlots = new ExtendedList<IFormLinkGetter<IEquipTypeGetter>>();
        public ExtendedList<IFormLinkGetter<IEquipTypeGetter>> EquipmentSlots
        {
            get => this._EquipmentSlots;
            init => this._EquipmentSlots = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IEquipTypeGetter>> IRaceGetter.EquipmentSlots => _EquipmentSlots;
        #endregion

        #endregion
        #region UnarmedEquipSlot
        private readonly IFormLinkNullable<IEquipTypeGetter> _UnarmedEquipSlot = new FormLinkNullable<IEquipTypeGetter>();
        public IFormLinkNullable<IEquipTypeGetter> UnarmedEquipSlot
        {
            get => _UnarmedEquipSlot;
            set => _UnarmedEquipSlot.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEquipTypeGetter> IRaceGetter.UnarmedEquipSlot => this.UnarmedEquipSlot;
        #endregion
        #region FaceFxPhonemes
        public FaceFxPhonemes FaceFxPhonemes { get; set; } = new FaceFxPhonemes();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFaceFxPhonemesGetter IRaceGetter.FaceFxPhonemes => FaceFxPhonemes;
        #endregion
        #region BaseMovementDefaultWalk
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefaultWalk = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultWalk
        {
            get => _BaseMovementDefaultWalk;
            set => _BaseMovementDefaultWalk.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultWalk => this.BaseMovementDefaultWalk;
        #endregion
        #region BaseMovementDefaultRun
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefaultRun = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultRun
        {
            get => _BaseMovementDefaultRun;
            set => _BaseMovementDefaultRun.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultRun => this.BaseMovementDefaultRun;
        #endregion
        #region BaseMovementDefaultSwim
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefaultSwim = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultSwim
        {
            get => _BaseMovementDefaultSwim;
            set => _BaseMovementDefaultSwim.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultSwim => this.BaseMovementDefaultSwim;
        #endregion
        #region BaseMovementDefaultFly
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefaultFly = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultFly
        {
            get => _BaseMovementDefaultFly;
            set => _BaseMovementDefaultFly.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultFly => this.BaseMovementDefaultFly;
        #endregion
        #region BaseMovementDefaultSneak
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefaultSneak = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultSneak
        {
            get => _BaseMovementDefaultSneak;
            set => _BaseMovementDefaultSneak.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultSneak => this.BaseMovementDefaultSneak;
        #endregion
        #region BaseMovementDefaultSprint
        private readonly IFormLinkNullable<IMovementTypeGetter> _BaseMovementDefaultSprint = new FormLinkNullable<IMovementTypeGetter>();
        public IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultSprint
        {
            get => _BaseMovementDefaultSprint;
            set => _BaseMovementDefaultSprint.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMovementTypeGetter> IRaceGetter.BaseMovementDefaultSprint => this.BaseMovementDefaultSprint;
        #endregion
        #region HeadData
        public IGenderedItem<HeadData?>? HeadData { get; set; }
        IGenderedItemGetter<IHeadDataGetter?>? IRaceGetter.HeadData => this.HeadData;
        #endregion
        #region MorphRace
        private readonly IFormLinkNullable<IRaceGetter> _MorphRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> MorphRace
        {
            get => _MorphRace;
            set => _MorphRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.MorphRace => this.MorphRace;
        #endregion
        #region ArmorRace
        private readonly IFormLinkNullable<IRaceGetter> _ArmorRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> ArmorRace
        {
            get => _ArmorRace;
            set => _ArmorRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IRaceGetter.ArmorRace => this.ArmorRace;
        #endregion
        #region DATADataTypeState
        public Race.DATADataType DATADataTypeState { get; set; } = default(Race.DATADataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Skin = initialValue;
                this.BodyTemplate = new MaskItem<TItem, BodyTemplate.Mask<TItem>?>(initialValue, new BodyTemplate.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.SkillBoost0 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost1 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost2 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost3 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost4 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost5 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.SkillBoost6 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(initialValue, new SkillBoost.Mask<TItem>(initialValue));
                this.Unknown = initialValue;
                this.Height = new GenderedItem<TItem>(initialValue, initialValue);
                this.Weight = new GenderedItem<TItem>(initialValue, initialValue);
                this.Flags = initialValue;
                this.Starting = new MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>(initialValue, null);
                this.BaseCarryWeight = initialValue;
                this.BaseMass = initialValue;
                this.AccelerationRate = initialValue;
                this.DecelerationRate = initialValue;
                this.Size = initialValue;
                this.HeadBipedObject = initialValue;
                this.HairBipedObject = initialValue;
                this.InjuredHealthPercent = initialValue;
                this.ShieldBipedObject = initialValue;
                this.Regen = new MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>(initialValue, null);
                this.UnarmedDamage = initialValue;
                this.UnarmedReach = initialValue;
                this.BodyBipedObject = initialValue;
                this.AimAngleTolerance = initialValue;
                this.FlightRadius = initialValue;
                this.AngularAccelerationRate = initialValue;
                this.AngularTolerance = initialValue;
                this.MountData = new MaskItem<TItem, MountData.Mask<TItem>?>(initialValue, new MountData.Mask<TItem>(initialValue));
                this.SkeletalModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, SimpleModel.Mask<TItem>?>?>?>(initialValue, default);
                this.MovementTypeNames = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Voices = new GenderedItem<TItem>(initialValue, initialValue);
                this.DecapitateArmors = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.DefaultHairColors = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.NumberOfTintsInList = initialValue;
                this.FacegenMainClamp = initialValue;
                this.FacegenFaceClamp = initialValue;
                this.AttackRace = initialValue;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(initialValue, default);
                this.Hairs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.BodyPartData = initialValue;
                this.BehaviorGraph = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(initialValue, default);
                this.MaterialType = initialValue;
                this.ImpactDataSet = initialValue;
                this.DecapitationFX = initialValue;
                this.OpenLootSound = initialValue;
                this.CloseLootSound = initialValue;
                this.BipedObjectNames = new MaskItem<TItem, IEnumerable<KeyValuePair<BipedObject, TItem>>?>(initialValue, null);
                this.MovementTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceMovementType.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RaceMovementType.Mask<TItem>?>>());
                this.EquipmentFlags = initialValue;
                this.EquipmentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.UnarmedEquipSlot = initialValue;
                this.FaceFxPhonemes = new MaskItem<TItem, FaceFxPhonemes.Mask<TItem>?>(initialValue, new FaceFxPhonemes.Mask<TItem>(initialValue));
                this.BaseMovementDefaultWalk = initialValue;
                this.BaseMovementDefaultRun = initialValue;
                this.BaseMovementDefaultSwim = initialValue;
                this.BaseMovementDefaultFly = initialValue;
                this.BaseMovementDefaultSneak = initialValue;
                this.BaseMovementDefaultSprint = initialValue;
                this.HeadData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadData.Mask<TItem>?>?>?>(initialValue, default);
                this.MorphRace = initialValue;
                this.ArmorRace = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem Name,
                TItem Description,
                TItem ActorEffect,
                TItem Skin,
                TItem BodyTemplate,
                TItem Keywords,
                TItem SkillBoost0,
                TItem SkillBoost1,
                TItem SkillBoost2,
                TItem SkillBoost3,
                TItem SkillBoost4,
                TItem SkillBoost5,
                TItem SkillBoost6,
                TItem Unknown,
                TItem Height,
                TItem Weight,
                TItem Flags,
                TItem Starting,
                TItem BaseCarryWeight,
                TItem BaseMass,
                TItem AccelerationRate,
                TItem DecelerationRate,
                TItem Size,
                TItem HeadBipedObject,
                TItem HairBipedObject,
                TItem InjuredHealthPercent,
                TItem ShieldBipedObject,
                TItem Regen,
                TItem UnarmedDamage,
                TItem UnarmedReach,
                TItem BodyBipedObject,
                TItem AimAngleTolerance,
                TItem FlightRadius,
                TItem AngularAccelerationRate,
                TItem AngularTolerance,
                TItem MountData,
                TItem SkeletalModel,
                TItem MovementTypeNames,
                TItem Voices,
                TItem DecapitateArmors,
                TItem DefaultHairColors,
                TItem NumberOfTintsInList,
                TItem FacegenMainClamp,
                TItem FacegenFaceClamp,
                TItem AttackRace,
                TItem Attacks,
                TItem BodyData,
                TItem Hairs,
                TItem Eyes,
                TItem BodyPartData,
                TItem BehaviorGraph,
                TItem MaterialType,
                TItem ImpactDataSet,
                TItem DecapitationFX,
                TItem OpenLootSound,
                TItem CloseLootSound,
                TItem BipedObjectNames,
                TItem MovementTypes,
                TItem EquipmentFlags,
                TItem EquipmentSlots,
                TItem UnarmedEquipSlot,
                TItem FaceFxPhonemes,
                TItem BaseMovementDefaultWalk,
                TItem BaseMovementDefaultRun,
                TItem BaseMovementDefaultSwim,
                TItem BaseMovementDefaultFly,
                TItem BaseMovementDefaultSneak,
                TItem BaseMovementDefaultSprint,
                TItem HeadData,
                TItem MorphRace,
                TItem ArmorRace,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.Name = Name;
                this.Description = Description;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ActorEffect, Enumerable.Empty<(int Index, TItem Value)>());
                this.Skin = Skin;
                this.BodyTemplate = new MaskItem<TItem, BodyTemplate.Mask<TItem>?>(BodyTemplate, new BodyTemplate.Mask<TItem>(BodyTemplate));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.SkillBoost0 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost0, new SkillBoost.Mask<TItem>(SkillBoost0));
                this.SkillBoost1 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost1, new SkillBoost.Mask<TItem>(SkillBoost1));
                this.SkillBoost2 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost2, new SkillBoost.Mask<TItem>(SkillBoost2));
                this.SkillBoost3 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost3, new SkillBoost.Mask<TItem>(SkillBoost3));
                this.SkillBoost4 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost4, new SkillBoost.Mask<TItem>(SkillBoost4));
                this.SkillBoost5 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost5, new SkillBoost.Mask<TItem>(SkillBoost5));
                this.SkillBoost6 = new MaskItem<TItem, SkillBoost.Mask<TItem>?>(SkillBoost6, new SkillBoost.Mask<TItem>(SkillBoost6));
                this.Unknown = Unknown;
                this.Height = new GenderedItem<TItem>(Height, Height);
                this.Weight = new GenderedItem<TItem>(Weight, Weight);
                this.Flags = Flags;
                this.Starting = new MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>(Starting, null);
                this.BaseCarryWeight = BaseCarryWeight;
                this.BaseMass = BaseMass;
                this.AccelerationRate = AccelerationRate;
                this.DecelerationRate = DecelerationRate;
                this.Size = Size;
                this.HeadBipedObject = HeadBipedObject;
                this.HairBipedObject = HairBipedObject;
                this.InjuredHealthPercent = InjuredHealthPercent;
                this.ShieldBipedObject = ShieldBipedObject;
                this.Regen = new MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>(Regen, null);
                this.UnarmedDamage = UnarmedDamage;
                this.UnarmedReach = UnarmedReach;
                this.BodyBipedObject = BodyBipedObject;
                this.AimAngleTolerance = AimAngleTolerance;
                this.FlightRadius = FlightRadius;
                this.AngularAccelerationRate = AngularAccelerationRate;
                this.AngularTolerance = AngularTolerance;
                this.MountData = new MaskItem<TItem, MountData.Mask<TItem>?>(MountData, new MountData.Mask<TItem>(MountData));
                this.SkeletalModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, SimpleModel.Mask<TItem>?>?>?>(SkeletalModel, default);
                this.MovementTypeNames = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(MovementTypeNames, Enumerable.Empty<(int Index, TItem Value)>());
                this.Voices = new GenderedItem<TItem>(Voices, Voices);
                this.DecapitateArmors = new MaskItem<TItem, GenderedItem<TItem>?>(DecapitateArmors, default);
                this.DefaultHairColors = new MaskItem<TItem, GenderedItem<TItem>?>(DefaultHairColors, default);
                this.NumberOfTintsInList = NumberOfTintsInList;
                this.FacegenMainClamp = FacegenMainClamp;
                this.FacegenFaceClamp = FacegenFaceClamp;
                this.AttackRace = AttackRace;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(Attacks, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(BodyData, default);
                this.Hairs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Hairs, Enumerable.Empty<(int Index, TItem Value)>());
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Eyes, Enumerable.Empty<(int Index, TItem Value)>());
                this.BodyPartData = BodyPartData;
                this.BehaviorGraph = new MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>(BehaviorGraph, default);
                this.MaterialType = MaterialType;
                this.ImpactDataSet = ImpactDataSet;
                this.DecapitationFX = DecapitationFX;
                this.OpenLootSound = OpenLootSound;
                this.CloseLootSound = CloseLootSound;
                this.BipedObjectNames = new MaskItem<TItem, IEnumerable<KeyValuePair<BipedObject, TItem>>?>(BipedObjectNames, null);
                this.MovementTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceMovementType.Mask<TItem>?>>?>(MovementTypes, Enumerable.Empty<MaskItemIndexed<TItem, RaceMovementType.Mask<TItem>?>>());
                this.EquipmentFlags = EquipmentFlags;
                this.EquipmentSlots = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(EquipmentSlots, Enumerable.Empty<(int Index, TItem Value)>());
                this.UnarmedEquipSlot = UnarmedEquipSlot;
                this.FaceFxPhonemes = new MaskItem<TItem, FaceFxPhonemes.Mask<TItem>?>(FaceFxPhonemes, new FaceFxPhonemes.Mask<TItem>(FaceFxPhonemes));
                this.BaseMovementDefaultWalk = BaseMovementDefaultWalk;
                this.BaseMovementDefaultRun = BaseMovementDefaultRun;
                this.BaseMovementDefaultSwim = BaseMovementDefaultSwim;
                this.BaseMovementDefaultFly = BaseMovementDefaultFly;
                this.BaseMovementDefaultSneak = BaseMovementDefaultSneak;
                this.BaseMovementDefaultSprint = BaseMovementDefaultSprint;
                this.HeadData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadData.Mask<TItem>?>?>?>(HeadData, default);
                this.MorphRace = MorphRace;
                this.ArmorRace = ArmorRace;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ActorEffect;
            public TItem Skin;
            public MaskItem<TItem, BodyTemplate.Mask<TItem>?>? BodyTemplate { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost0 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost1 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost2 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost3 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost4 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost5 { get; set; }
            public MaskItem<TItem, SkillBoost.Mask<TItem>?>? SkillBoost6 { get; set; }
            public TItem Unknown;
            public GenderedItem<TItem> Height;
            public GenderedItem<TItem> Weight;
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>? Starting;
            public TItem BaseCarryWeight;
            public TItem BaseMass;
            public TItem AccelerationRate;
            public TItem DecelerationRate;
            public TItem Size;
            public TItem HeadBipedObject;
            public TItem HairBipedObject;
            public TItem InjuredHealthPercent;
            public TItem ShieldBipedObject;
            public MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>? Regen;
            public TItem UnarmedDamage;
            public TItem UnarmedReach;
            public TItem BodyBipedObject;
            public TItem AimAngleTolerance;
            public TItem FlightRadius;
            public TItem AngularAccelerationRate;
            public TItem AngularTolerance;
            public MaskItem<TItem, MountData.Mask<TItem>?>? MountData { get; set; }
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, SimpleModel.Mask<TItem>?>?>?>? SkeletalModel;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? MovementTypeNames;
            public GenderedItem<TItem> Voices;
            public MaskItem<TItem, GenderedItem<TItem>?>? DecapitateArmors;
            public MaskItem<TItem, GenderedItem<TItem>?>? DefaultHairColors;
            public TItem NumberOfTintsInList;
            public TItem FacegenMainClamp;
            public TItem FacegenFaceClamp;
            public TItem AttackRace;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>? Attacks;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>? BodyData;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Hairs;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Eyes;
            public TItem BodyPartData;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, Model.Mask<TItem>?>?>?>? BehaviorGraph;
            public TItem MaterialType;
            public TItem ImpactDataSet;
            public TItem DecapitationFX;
            public TItem OpenLootSound;
            public TItem CloseLootSound;
            public MaskItem<TItem, IEnumerable<KeyValuePair<BipedObject, TItem>>?>? BipedObjectNames;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceMovementType.Mask<TItem>?>>?>? MovementTypes;
            public TItem EquipmentFlags;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? EquipmentSlots;
            public TItem UnarmedEquipSlot;
            public MaskItem<TItem, FaceFxPhonemes.Mask<TItem>?>? FaceFxPhonemes { get; set; }
            public TItem BaseMovementDefaultWalk;
            public TItem BaseMovementDefaultRun;
            public TItem BaseMovementDefaultSwim;
            public TItem BaseMovementDefaultFly;
            public TItem BaseMovementDefaultSneak;
            public TItem BaseMovementDefaultSprint;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, HeadData.Mask<TItem>?>?>?>? HeadData;
            public TItem MorphRace;
            public TItem ArmorRace;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.ActorEffect, rhs.ActorEffect)) return false;
                if (!object.Equals(this.Skin, rhs.Skin)) return false;
                if (!object.Equals(this.BodyTemplate, rhs.BodyTemplate)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.SkillBoost0, rhs.SkillBoost0)) return false;
                if (!object.Equals(this.SkillBoost1, rhs.SkillBoost1)) return false;
                if (!object.Equals(this.SkillBoost2, rhs.SkillBoost2)) return false;
                if (!object.Equals(this.SkillBoost3, rhs.SkillBoost3)) return false;
                if (!object.Equals(this.SkillBoost4, rhs.SkillBoost4)) return false;
                if (!object.Equals(this.SkillBoost5, rhs.SkillBoost5)) return false;
                if (!object.Equals(this.SkillBoost6, rhs.SkillBoost6)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Starting, rhs.Starting)) return false;
                if (!object.Equals(this.BaseCarryWeight, rhs.BaseCarryWeight)) return false;
                if (!object.Equals(this.BaseMass, rhs.BaseMass)) return false;
                if (!object.Equals(this.AccelerationRate, rhs.AccelerationRate)) return false;
                if (!object.Equals(this.DecelerationRate, rhs.DecelerationRate)) return false;
                if (!object.Equals(this.Size, rhs.Size)) return false;
                if (!object.Equals(this.HeadBipedObject, rhs.HeadBipedObject)) return false;
                if (!object.Equals(this.HairBipedObject, rhs.HairBipedObject)) return false;
                if (!object.Equals(this.InjuredHealthPercent, rhs.InjuredHealthPercent)) return false;
                if (!object.Equals(this.ShieldBipedObject, rhs.ShieldBipedObject)) return false;
                if (!object.Equals(this.Regen, rhs.Regen)) return false;
                if (!object.Equals(this.UnarmedDamage, rhs.UnarmedDamage)) return false;
                if (!object.Equals(this.UnarmedReach, rhs.UnarmedReach)) return false;
                if (!object.Equals(this.BodyBipedObject, rhs.BodyBipedObject)) return false;
                if (!object.Equals(this.AimAngleTolerance, rhs.AimAngleTolerance)) return false;
                if (!object.Equals(this.FlightRadius, rhs.FlightRadius)) return false;
                if (!object.Equals(this.AngularAccelerationRate, rhs.AngularAccelerationRate)) return false;
                if (!object.Equals(this.AngularTolerance, rhs.AngularTolerance)) return false;
                if (!object.Equals(this.MountData, rhs.MountData)) return false;
                if (!object.Equals(this.SkeletalModel, rhs.SkeletalModel)) return false;
                if (!object.Equals(this.MovementTypeNames, rhs.MovementTypeNames)) return false;
                if (!object.Equals(this.Voices, rhs.Voices)) return false;
                if (!object.Equals(this.DecapitateArmors, rhs.DecapitateArmors)) return false;
                if (!object.Equals(this.DefaultHairColors, rhs.DefaultHairColors)) return false;
                if (!object.Equals(this.NumberOfTintsInList, rhs.NumberOfTintsInList)) return false;
                if (!object.Equals(this.FacegenMainClamp, rhs.FacegenMainClamp)) return false;
                if (!object.Equals(this.FacegenFaceClamp, rhs.FacegenFaceClamp)) return false;
                if (!object.Equals(this.AttackRace, rhs.AttackRace)) return false;
                if (!object.Equals(this.Attacks, rhs.Attacks)) return false;
                if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.BodyPartData, rhs.BodyPartData)) return false;
                if (!object.Equals(this.BehaviorGraph, rhs.BehaviorGraph)) return false;
                if (!object.Equals(this.MaterialType, rhs.MaterialType)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.DecapitationFX, rhs.DecapitationFX)) return false;
                if (!object.Equals(this.OpenLootSound, rhs.OpenLootSound)) return false;
                if (!object.Equals(this.CloseLootSound, rhs.CloseLootSound)) return false;
                if (!object.Equals(this.BipedObjectNames, rhs.BipedObjectNames)) return false;
                if (!object.Equals(this.MovementTypes, rhs.MovementTypes)) return false;
                if (!object.Equals(this.EquipmentFlags, rhs.EquipmentFlags)) return false;
                if (!object.Equals(this.EquipmentSlots, rhs.EquipmentSlots)) return false;
                if (!object.Equals(this.UnarmedEquipSlot, rhs.UnarmedEquipSlot)) return false;
                if (!object.Equals(this.FaceFxPhonemes, rhs.FaceFxPhonemes)) return false;
                if (!object.Equals(this.BaseMovementDefaultWalk, rhs.BaseMovementDefaultWalk)) return false;
                if (!object.Equals(this.BaseMovementDefaultRun, rhs.BaseMovementDefaultRun)) return false;
                if (!object.Equals(this.BaseMovementDefaultSwim, rhs.BaseMovementDefaultSwim)) return false;
                if (!object.Equals(this.BaseMovementDefaultFly, rhs.BaseMovementDefaultFly)) return false;
                if (!object.Equals(this.BaseMovementDefaultSneak, rhs.BaseMovementDefaultSneak)) return false;
                if (!object.Equals(this.BaseMovementDefaultSprint, rhs.BaseMovementDefaultSprint)) return false;
                if (!object.Equals(this.HeadData, rhs.HeadData)) return false;
                if (!object.Equals(this.MorphRace, rhs.MorphRace)) return false;
                if (!object.Equals(this.ArmorRace, rhs.ArmorRace)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.ActorEffect);
                hash.Add(this.Skin);
                hash.Add(this.BodyTemplate);
                hash.Add(this.Keywords);
                hash.Add(this.SkillBoost0);
                hash.Add(this.SkillBoost1);
                hash.Add(this.SkillBoost2);
                hash.Add(this.SkillBoost3);
                hash.Add(this.SkillBoost4);
                hash.Add(this.SkillBoost5);
                hash.Add(this.SkillBoost6);
                hash.Add(this.Unknown);
                hash.Add(this.Height);
                hash.Add(this.Weight);
                hash.Add(this.Flags);
                hash.Add(this.Starting);
                hash.Add(this.BaseCarryWeight);
                hash.Add(this.BaseMass);
                hash.Add(this.AccelerationRate);
                hash.Add(this.DecelerationRate);
                hash.Add(this.Size);
                hash.Add(this.HeadBipedObject);
                hash.Add(this.HairBipedObject);
                hash.Add(this.InjuredHealthPercent);
                hash.Add(this.ShieldBipedObject);
                hash.Add(this.Regen);
                hash.Add(this.UnarmedDamage);
                hash.Add(this.UnarmedReach);
                hash.Add(this.BodyBipedObject);
                hash.Add(this.AimAngleTolerance);
                hash.Add(this.FlightRadius);
                hash.Add(this.AngularAccelerationRate);
                hash.Add(this.AngularTolerance);
                hash.Add(this.MountData);
                hash.Add(this.SkeletalModel);
                hash.Add(this.MovementTypeNames);
                hash.Add(this.Voices);
                hash.Add(this.DecapitateArmors);
                hash.Add(this.DefaultHairColors);
                hash.Add(this.NumberOfTintsInList);
                hash.Add(this.FacegenMainClamp);
                hash.Add(this.FacegenFaceClamp);
                hash.Add(this.AttackRace);
                hash.Add(this.Attacks);
                hash.Add(this.BodyData);
                hash.Add(this.Hairs);
                hash.Add(this.Eyes);
                hash.Add(this.BodyPartData);
                hash.Add(this.BehaviorGraph);
                hash.Add(this.MaterialType);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.DecapitationFX);
                hash.Add(this.OpenLootSound);
                hash.Add(this.CloseLootSound);
                hash.Add(this.BipedObjectNames);
                hash.Add(this.MovementTypes);
                hash.Add(this.EquipmentFlags);
                hash.Add(this.EquipmentSlots);
                hash.Add(this.UnarmedEquipSlot);
                hash.Add(this.FaceFxPhonemes);
                hash.Add(this.BaseMovementDefaultWalk);
                hash.Add(this.BaseMovementDefaultRun);
                hash.Add(this.BaseMovementDefaultSwim);
                hash.Add(this.BaseMovementDefaultFly);
                hash.Add(this.BaseMovementDefaultSneak);
                hash.Add(this.BaseMovementDefaultSprint);
                hash.Add(this.HeadData);
                hash.Add(this.MorphRace);
                hash.Add(this.ArmorRace);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (this.ActorEffect != null)
                {
                    if (!eval(this.ActorEffect.Overall)) return false;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Skin)) return false;
                if (BodyTemplate != null)
                {
                    if (!eval(this.BodyTemplate.Overall)) return false;
                    if (this.BodyTemplate.Specific != null && !this.BodyTemplate.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (SkillBoost0 != null)
                {
                    if (!eval(this.SkillBoost0.Overall)) return false;
                    if (this.SkillBoost0.Specific != null && !this.SkillBoost0.Specific.All(eval)) return false;
                }
                if (SkillBoost1 != null)
                {
                    if (!eval(this.SkillBoost1.Overall)) return false;
                    if (this.SkillBoost1.Specific != null && !this.SkillBoost1.Specific.All(eval)) return false;
                }
                if (SkillBoost2 != null)
                {
                    if (!eval(this.SkillBoost2.Overall)) return false;
                    if (this.SkillBoost2.Specific != null && !this.SkillBoost2.Specific.All(eval)) return false;
                }
                if (SkillBoost3 != null)
                {
                    if (!eval(this.SkillBoost3.Overall)) return false;
                    if (this.SkillBoost3.Specific != null && !this.SkillBoost3.Specific.All(eval)) return false;
                }
                if (SkillBoost4 != null)
                {
                    if (!eval(this.SkillBoost4.Overall)) return false;
                    if (this.SkillBoost4.Specific != null && !this.SkillBoost4.Specific.All(eval)) return false;
                }
                if (SkillBoost5 != null)
                {
                    if (!eval(this.SkillBoost5.Overall)) return false;
                    if (this.SkillBoost5.Specific != null && !this.SkillBoost5.Specific.All(eval)) return false;
                }
                if (SkillBoost6 != null)
                {
                    if (!eval(this.SkillBoost6.Overall)) return false;
                    if (this.SkillBoost6.Specific != null && !this.SkillBoost6.Specific.All(eval)) return false;
                }
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Height.Male) || !eval(this.Height.Female)) return false;
                if (!eval(this.Weight.Male) || !eval(this.Weight.Female)) return false;
                if (!eval(this.Flags)) return false;
                if (this.Starting != null)
                {
                    if (!eval(this.Starting.Overall)) return false;
                    if (this.Starting.Specific != null)
                    {
                        foreach (var item in this.Starting.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.BaseCarryWeight)) return false;
                if (!eval(this.BaseMass)) return false;
                if (!eval(this.AccelerationRate)) return false;
                if (!eval(this.DecelerationRate)) return false;
                if (!eval(this.Size)) return false;
                if (!eval(this.HeadBipedObject)) return false;
                if (!eval(this.HairBipedObject)) return false;
                if (!eval(this.InjuredHealthPercent)) return false;
                if (!eval(this.ShieldBipedObject)) return false;
                if (this.Regen != null)
                {
                    if (!eval(this.Regen.Overall)) return false;
                    if (this.Regen.Specific != null)
                    {
                        foreach (var item in this.Regen.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.UnarmedDamage)) return false;
                if (!eval(this.UnarmedReach)) return false;
                if (!eval(this.BodyBipedObject)) return false;
                if (!eval(this.AimAngleTolerance)) return false;
                if (!eval(this.FlightRadius)) return false;
                if (!eval(this.AngularAccelerationRate)) return false;
                if (!eval(this.AngularTolerance)) return false;
                if (MountData != null)
                {
                    if (!eval(this.MountData.Overall)) return false;
                    if (this.MountData.Specific != null && !this.MountData.Specific.All(eval)) return false;
                }
                if (!GenderedItem.AllMask(
                    this.SkeletalModel,
                    eval: eval)) return false;
                if (this.MovementTypeNames != null)
                {
                    if (!eval(this.MovementTypeNames.Overall)) return false;
                    if (this.MovementTypeNames.Specific != null)
                    {
                        foreach (var item in this.MovementTypeNames.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Voices.Male) || !eval(this.Voices.Female)) return false;
                if (!GenderedItem.All(
                    this.DecapitateArmors,
                    eval: eval)) return false;
                if (!GenderedItem.All(
                    this.DefaultHairColors,
                    eval: eval)) return false;
                if (!eval(this.NumberOfTintsInList)) return false;
                if (!eval(this.FacegenMainClamp)) return false;
                if (!eval(this.FacegenFaceClamp)) return false;
                if (!eval(this.AttackRace)) return false;
                if (this.Attacks != null)
                {
                    if (!eval(this.Attacks.Overall)) return false;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!GenderedItem.AllMask(
                    this.BodyData,
                    eval: eval)) return false;
                if (this.Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null)
                    {
                        foreach (var item in this.Hairs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.BodyPartData)) return false;
                if (!GenderedItem.AllMask(
                    this.BehaviorGraph,
                    eval: eval)) return false;
                if (!eval(this.MaterialType)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.DecapitationFX)) return false;
                if (!eval(this.OpenLootSound)) return false;
                if (!eval(this.CloseLootSound)) return false;
                if (this.BipedObjectNames != null)
                {
                    if (!eval(this.BipedObjectNames.Overall)) return false;
                    if (this.BipedObjectNames.Specific != null)
                    {
                        foreach (var item in this.BipedObjectNames.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.MovementTypes != null)
                {
                    if (!eval(this.MovementTypes.Overall)) return false;
                    if (this.MovementTypes.Specific != null)
                    {
                        foreach (var item in this.MovementTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.EquipmentFlags)) return false;
                if (this.EquipmentSlots != null)
                {
                    if (!eval(this.EquipmentSlots.Overall)) return false;
                    if (this.EquipmentSlots.Specific != null)
                    {
                        foreach (var item in this.EquipmentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.UnarmedEquipSlot)) return false;
                if (FaceFxPhonemes != null)
                {
                    if (!eval(this.FaceFxPhonemes.Overall)) return false;
                    if (this.FaceFxPhonemes.Specific != null && !this.FaceFxPhonemes.Specific.All(eval)) return false;
                }
                if (!eval(this.BaseMovementDefaultWalk)) return false;
                if (!eval(this.BaseMovementDefaultRun)) return false;
                if (!eval(this.BaseMovementDefaultSwim)) return false;
                if (!eval(this.BaseMovementDefaultFly)) return false;
                if (!eval(this.BaseMovementDefaultSneak)) return false;
                if (!eval(this.BaseMovementDefaultSprint)) return false;
                if (!GenderedItem.AllMask(
                    this.HeadData,
                    eval: eval)) return false;
                if (!eval(this.MorphRace)) return false;
                if (!eval(this.ArmorRace)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (this.ActorEffect != null)
                {
                    if (eval(this.ActorEffect.Overall)) return true;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Skin)) return true;
                if (BodyTemplate != null)
                {
                    if (eval(this.BodyTemplate.Overall)) return true;
                    if (this.BodyTemplate.Specific != null && this.BodyTemplate.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (SkillBoost0 != null)
                {
                    if (eval(this.SkillBoost0.Overall)) return true;
                    if (this.SkillBoost0.Specific != null && this.SkillBoost0.Specific.Any(eval)) return true;
                }
                if (SkillBoost1 != null)
                {
                    if (eval(this.SkillBoost1.Overall)) return true;
                    if (this.SkillBoost1.Specific != null && this.SkillBoost1.Specific.Any(eval)) return true;
                }
                if (SkillBoost2 != null)
                {
                    if (eval(this.SkillBoost2.Overall)) return true;
                    if (this.SkillBoost2.Specific != null && this.SkillBoost2.Specific.Any(eval)) return true;
                }
                if (SkillBoost3 != null)
                {
                    if (eval(this.SkillBoost3.Overall)) return true;
                    if (this.SkillBoost3.Specific != null && this.SkillBoost3.Specific.Any(eval)) return true;
                }
                if (SkillBoost4 != null)
                {
                    if (eval(this.SkillBoost4.Overall)) return true;
                    if (this.SkillBoost4.Specific != null && this.SkillBoost4.Specific.Any(eval)) return true;
                }
                if (SkillBoost5 != null)
                {
                    if (eval(this.SkillBoost5.Overall)) return true;
                    if (this.SkillBoost5.Specific != null && this.SkillBoost5.Specific.Any(eval)) return true;
                }
                if (SkillBoost6 != null)
                {
                    if (eval(this.SkillBoost6.Overall)) return true;
                    if (this.SkillBoost6.Specific != null && this.SkillBoost6.Specific.Any(eval)) return true;
                }
                if (eval(this.Unknown)) return true;
                if (eval(this.Height.Male) || eval(this.Height.Female)) return true;
                if (eval(this.Weight.Male) || eval(this.Weight.Female)) return true;
                if (eval(this.Flags)) return true;
                if (this.Starting != null)
                {
                    if (eval(this.Starting.Overall)) return true;
                    if (this.Starting.Specific != null)
                    {
                        foreach (var item in this.Starting.Specific)
                        {
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (eval(this.BaseCarryWeight)) return true;
                if (eval(this.BaseMass)) return true;
                if (eval(this.AccelerationRate)) return true;
                if (eval(this.DecelerationRate)) return true;
                if (eval(this.Size)) return true;
                if (eval(this.HeadBipedObject)) return true;
                if (eval(this.HairBipedObject)) return true;
                if (eval(this.InjuredHealthPercent)) return true;
                if (eval(this.ShieldBipedObject)) return true;
                if (this.Regen != null)
                {
                    if (eval(this.Regen.Overall)) return true;
                    if (this.Regen.Specific != null)
                    {
                        foreach (var item in this.Regen.Specific)
                        {
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (eval(this.UnarmedDamage)) return true;
                if (eval(this.UnarmedReach)) return true;
                if (eval(this.BodyBipedObject)) return true;
                if (eval(this.AimAngleTolerance)) return true;
                if (eval(this.FlightRadius)) return true;
                if (eval(this.AngularAccelerationRate)) return true;
                if (eval(this.AngularTolerance)) return true;
                if (MountData != null)
                {
                    if (eval(this.MountData.Overall)) return true;
                    if (this.MountData.Specific != null && this.MountData.Specific.Any(eval)) return true;
                }
                if (GenderedItem.AnyMask(
                    this.SkeletalModel,
                    eval: eval)) return true;
                if (this.MovementTypeNames != null)
                {
                    if (eval(this.MovementTypeNames.Overall)) return true;
                    if (this.MovementTypeNames.Specific != null)
                    {
                        foreach (var item in this.MovementTypeNames.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Voices.Male) || eval(this.Voices.Female)) return true;
                if (GenderedItem.Any(
                    this.DecapitateArmors,
                    eval: eval)) return true;
                if (GenderedItem.Any(
                    this.DefaultHairColors,
                    eval: eval)) return true;
                if (eval(this.NumberOfTintsInList)) return true;
                if (eval(this.FacegenMainClamp)) return true;
                if (eval(this.FacegenFaceClamp)) return true;
                if (eval(this.AttackRace)) return true;
                if (this.Attacks != null)
                {
                    if (eval(this.Attacks.Overall)) return true;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (GenderedItem.AnyMask(
                    this.BodyData,
                    eval: eval)) return true;
                if (this.Hairs != null)
                {
                    if (eval(this.Hairs.Overall)) return true;
                    if (this.Hairs.Specific != null)
                    {
                        foreach (var item in this.Hairs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.BodyPartData)) return true;
                if (GenderedItem.AnyMask(
                    this.BehaviorGraph,
                    eval: eval)) return true;
                if (eval(this.MaterialType)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.DecapitationFX)) return true;
                if (eval(this.OpenLootSound)) return true;
                if (eval(this.CloseLootSound)) return true;
                if (this.BipedObjectNames != null)
                {
                    if (eval(this.BipedObjectNames.Overall)) return true;
                    if (this.BipedObjectNames.Specific != null)
                    {
                        foreach (var item in this.BipedObjectNames.Specific)
                        {
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (this.MovementTypes != null)
                {
                    if (eval(this.MovementTypes.Overall)) return true;
                    if (this.MovementTypes.Specific != null)
                    {
                        foreach (var item in this.MovementTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.EquipmentFlags)) return true;
                if (this.EquipmentSlots != null)
                {
                    if (eval(this.EquipmentSlots.Overall)) return true;
                    if (this.EquipmentSlots.Specific != null)
                    {
                        foreach (var item in this.EquipmentSlots.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.UnarmedEquipSlot)) return true;
                if (FaceFxPhonemes != null)
                {
                    if (eval(this.FaceFxPhonemes.Overall)) return true;
                    if (this.FaceFxPhonemes.Specific != null && this.FaceFxPhonemes.Specific.Any(eval)) return true;
                }
                if (eval(this.BaseMovementDefaultWalk)) return true;
                if (eval(this.BaseMovementDefaultRun)) return true;
                if (eval(this.BaseMovementDefaultSwim)) return true;
                if (eval(this.BaseMovementDefaultFly)) return true;
                if (eval(this.BaseMovementDefaultSneak)) return true;
                if (eval(this.BaseMovementDefaultSprint)) return true;
                if (GenderedItem.AnyMask(
                    this.HeadData,
                    eval: eval)) return true;
                if (eval(this.MorphRace)) return true;
                if (eval(this.ArmorRace)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Race.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                if (ActorEffect != null)
                {
                    obj.ActorEffect = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ActorEffect.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorEffect.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorEffect.Specific = l;
                        foreach (var item in ActorEffect.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Skin = eval(this.Skin);
                obj.BodyTemplate = this.BodyTemplate == null ? null : new MaskItem<R, BodyTemplate.Mask<R>?>(eval(this.BodyTemplate.Overall), this.BodyTemplate.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.SkillBoost0 = this.SkillBoost0 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost0.Overall), this.SkillBoost0.Specific?.Translate(eval));
                obj.SkillBoost1 = this.SkillBoost1 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost1.Overall), this.SkillBoost1.Specific?.Translate(eval));
                obj.SkillBoost2 = this.SkillBoost2 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost2.Overall), this.SkillBoost2.Specific?.Translate(eval));
                obj.SkillBoost3 = this.SkillBoost3 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost3.Overall), this.SkillBoost3.Specific?.Translate(eval));
                obj.SkillBoost4 = this.SkillBoost4 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost4.Overall), this.SkillBoost4.Specific?.Translate(eval));
                obj.SkillBoost5 = this.SkillBoost5 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost5.Overall), this.SkillBoost5.Specific?.Translate(eval));
                obj.SkillBoost6 = this.SkillBoost6 == null ? null : new MaskItem<R, SkillBoost.Mask<R>?>(eval(this.SkillBoost6.Overall), this.SkillBoost6.Specific?.Translate(eval));
                obj.Unknown = eval(this.Unknown);
                obj.Height = new GenderedItem<R>(
                    eval(this.Height.Male),
                    eval(this.Height.Female));
                obj.Weight = new GenderedItem<R>(
                    eval(this.Weight.Male),
                    eval(this.Weight.Female));
                obj.Flags = eval(this.Flags);
                if (Starting != null)
                {
                    obj.Starting = new MaskItem<R, IEnumerable<KeyValuePair<BasicStat, R>>?>(eval(this.Starting.Overall), default);
                    if (Starting.Specific != null)
                    {
                        List<KeyValuePair<BasicStat, R>> l = new List<KeyValuePair<BasicStat, R>>();
                        obj.Starting.Specific = l;
                        foreach (var item in Starting.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                obj.BaseCarryWeight = eval(this.BaseCarryWeight);
                obj.BaseMass = eval(this.BaseMass);
                obj.AccelerationRate = eval(this.AccelerationRate);
                obj.DecelerationRate = eval(this.DecelerationRate);
                obj.Size = eval(this.Size);
                obj.HeadBipedObject = eval(this.HeadBipedObject);
                obj.HairBipedObject = eval(this.HairBipedObject);
                obj.InjuredHealthPercent = eval(this.InjuredHealthPercent);
                obj.ShieldBipedObject = eval(this.ShieldBipedObject);
                if (Regen != null)
                {
                    obj.Regen = new MaskItem<R, IEnumerable<KeyValuePair<BasicStat, R>>?>(eval(this.Regen.Overall), default);
                    if (Regen.Specific != null)
                    {
                        List<KeyValuePair<BasicStat, R>> l = new List<KeyValuePair<BasicStat, R>>();
                        obj.Regen.Specific = l;
                        foreach (var item in Regen.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                obj.UnarmedDamage = eval(this.UnarmedDamage);
                obj.UnarmedReach = eval(this.UnarmedReach);
                obj.BodyBipedObject = eval(this.BodyBipedObject);
                obj.AimAngleTolerance = eval(this.AimAngleTolerance);
                obj.FlightRadius = eval(this.FlightRadius);
                obj.AngularAccelerationRate = eval(this.AngularAccelerationRate);
                obj.AngularTolerance = eval(this.AngularTolerance);
                obj.MountData = this.MountData == null ? null : new MaskItem<R, MountData.Mask<R>?>(eval(this.MountData.Overall), this.MountData.Specific?.Translate(eval));
                obj.SkeletalModel = GenderedItem.TranslateHelper(
                    this.SkeletalModel,
                    eval,
                    (m, e) => m?.Translate(e));
                if (MovementTypeNames != null)
                {
                    obj.MovementTypeNames = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.MovementTypeNames.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (MovementTypeNames.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.MovementTypeNames.Specific = l;
                        foreach (var item in MovementTypeNames.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Voices = new GenderedItem<R>(
                    eval(this.Voices.Male),
                    eval(this.Voices.Female));
                obj.DecapitateArmors = GenderedItem.TranslateHelper(
                    this.DecapitateArmors,
                    eval);
                obj.DefaultHairColors = GenderedItem.TranslateHelper(
                    this.DefaultHairColors,
                    eval);
                obj.NumberOfTintsInList = eval(this.NumberOfTintsInList);
                obj.FacegenMainClamp = eval(this.FacegenMainClamp);
                obj.FacegenFaceClamp = eval(this.FacegenFaceClamp);
                obj.AttackRace = eval(this.AttackRace);
                if (Attacks != null)
                {
                    obj.Attacks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Attack.Mask<R>?>>?>(eval(this.Attacks.Overall), Enumerable.Empty<MaskItemIndexed<R, Attack.Mask<R>?>>());
                    if (Attacks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Attack.Mask<R>?>>();
                        obj.Attacks.Specific = l;
                        foreach (var item in Attacks.Specific)
                        {
                            MaskItemIndexed<R, Attack.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Attack.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BodyData = GenderedItem.TranslateHelper(
                    this.BodyData,
                    eval,
                    (m, e) => m?.Translate(e));
                if (Hairs != null)
                {
                    obj.Hairs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Hairs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Hairs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Hairs.Specific = l;
                        foreach (var item in Hairs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Eyes != null)
                {
                    obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Eyes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Eyes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Eyes.Specific = l;
                        foreach (var item in Eyes.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.BodyPartData = eval(this.BodyPartData);
                obj.BehaviorGraph = GenderedItem.TranslateHelper(
                    this.BehaviorGraph,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.MaterialType = eval(this.MaterialType);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.DecapitationFX = eval(this.DecapitationFX);
                obj.OpenLootSound = eval(this.OpenLootSound);
                obj.CloseLootSound = eval(this.CloseLootSound);
                if (BipedObjectNames != null)
                {
                    obj.BipedObjectNames = new MaskItem<R, IEnumerable<KeyValuePair<BipedObject, R>>?>(eval(this.BipedObjectNames.Overall), default);
                    if (BipedObjectNames.Specific != null)
                    {
                        List<KeyValuePair<BipedObject, R>> l = new List<KeyValuePair<BipedObject, R>>();
                        obj.BipedObjectNames.Specific = l;
                        foreach (var item in BipedObjectNames.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                if (MovementTypes != null)
                {
                    obj.MovementTypes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RaceMovementType.Mask<R>?>>?>(eval(this.MovementTypes.Overall), Enumerable.Empty<MaskItemIndexed<R, RaceMovementType.Mask<R>?>>());
                    if (MovementTypes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RaceMovementType.Mask<R>?>>();
                        obj.MovementTypes.Specific = l;
                        foreach (var item in MovementTypes.Specific)
                        {
                            MaskItemIndexed<R, RaceMovementType.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, RaceMovementType.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.EquipmentFlags = eval(this.EquipmentFlags);
                if (EquipmentSlots != null)
                {
                    obj.EquipmentSlots = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.EquipmentSlots.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (EquipmentSlots.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.EquipmentSlots.Specific = l;
                        foreach (var item in EquipmentSlots.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.UnarmedEquipSlot = eval(this.UnarmedEquipSlot);
                obj.FaceFxPhonemes = this.FaceFxPhonemes == null ? null : new MaskItem<R, FaceFxPhonemes.Mask<R>?>(eval(this.FaceFxPhonemes.Overall), this.FaceFxPhonemes.Specific?.Translate(eval));
                obj.BaseMovementDefaultWalk = eval(this.BaseMovementDefaultWalk);
                obj.BaseMovementDefaultRun = eval(this.BaseMovementDefaultRun);
                obj.BaseMovementDefaultSwim = eval(this.BaseMovementDefaultSwim);
                obj.BaseMovementDefaultFly = eval(this.BaseMovementDefaultFly);
                obj.BaseMovementDefaultSneak = eval(this.BaseMovementDefaultSneak);
                obj.BaseMovementDefaultSprint = eval(this.BaseMovementDefaultSprint);
                obj.HeadData = GenderedItem.TranslateHelper(
                    this.HeadData,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.MorphRace = eval(this.MorphRace);
                obj.ArmorRace = eval(this.ArmorRace);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Race.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Race.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Race.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.ActorEffect?.Overall ?? true)
                        && ActorEffect is {} ActorEffectItem)
                    {
                        sb.AppendLine("ActorEffect =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorEffectItem.Overall);
                            if (ActorEffectItem.Specific != null)
                            {
                                foreach (var subItem in ActorEffectItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Skin ?? true)
                    {
                        sb.AppendItem(Skin, "Skin");
                    }
                    if (printMask?.BodyTemplate?.Overall ?? true)
                    {
                        BodyTemplate?.Print(sb);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SkillBoost0?.Overall ?? true)
                    {
                        SkillBoost0?.Print(sb);
                    }
                    if (printMask?.SkillBoost1?.Overall ?? true)
                    {
                        SkillBoost1?.Print(sb);
                    }
                    if (printMask?.SkillBoost2?.Overall ?? true)
                    {
                        SkillBoost2?.Print(sb);
                    }
                    if (printMask?.SkillBoost3?.Overall ?? true)
                    {
                        SkillBoost3?.Print(sb);
                    }
                    if (printMask?.SkillBoost4?.Overall ?? true)
                    {
                        SkillBoost4?.Print(sb);
                    }
                    if (printMask?.SkillBoost5?.Overall ?? true)
                    {
                        SkillBoost5?.Print(sb);
                    }
                    if (printMask?.SkillBoost6?.Overall ?? true)
                    {
                        SkillBoost6?.Print(sb);
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if ((true))
                    {
                        sb.AppendLine($"Height => {Height}");
                    }
                    if ((true))
                    {
                        sb.AppendLine($"Weight => {Weight}");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Starting?.Overall ?? true)
                    {
                        sb.AppendLine("Starting =>");
                        using (sb.Brace())
                        {
                            if (Starting != null)
                            {
                                if (Starting.Overall != null)
                                {
                                    sb.AppendLine(Starting.Overall.ToString());
                                }
                                if (Starting.Specific != null)
                                {
                                    foreach (var subItem in Starting.Specific)
                                    {
                                        using (sb.Brace())
                                        {
                                            sb.AppendLine("Key => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Key);
                                                }
                                            }
                                            sb.AppendLine("]");
                                            sb.AppendLine("Value => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Value);
                                                }
                                            }
                                            sb.AppendLine("]");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.BaseCarryWeight ?? true)
                    {
                        sb.AppendItem(BaseCarryWeight, "BaseCarryWeight");
                    }
                    if (printMask?.BaseMass ?? true)
                    {
                        sb.AppendItem(BaseMass, "BaseMass");
                    }
                    if (printMask?.AccelerationRate ?? true)
                    {
                        sb.AppendItem(AccelerationRate, "AccelerationRate");
                    }
                    if (printMask?.DecelerationRate ?? true)
                    {
                        sb.AppendItem(DecelerationRate, "DecelerationRate");
                    }
                    if (printMask?.Size ?? true)
                    {
                        sb.AppendItem(Size, "Size");
                    }
                    if (printMask?.HeadBipedObject ?? true)
                    {
                        sb.AppendItem(HeadBipedObject, "HeadBipedObject");
                    }
                    if (printMask?.HairBipedObject ?? true)
                    {
                        sb.AppendItem(HairBipedObject, "HairBipedObject");
                    }
                    if (printMask?.InjuredHealthPercent ?? true)
                    {
                        sb.AppendItem(InjuredHealthPercent, "InjuredHealthPercent");
                    }
                    if (printMask?.ShieldBipedObject ?? true)
                    {
                        sb.AppendItem(ShieldBipedObject, "ShieldBipedObject");
                    }
                    if (printMask?.Regen?.Overall ?? true)
                    {
                        sb.AppendLine("Regen =>");
                        using (sb.Brace())
                        {
                            if (Regen != null)
                            {
                                if (Regen.Overall != null)
                                {
                                    sb.AppendLine(Regen.Overall.ToString());
                                }
                                if (Regen.Specific != null)
                                {
                                    foreach (var subItem in Regen.Specific)
                                    {
                                        using (sb.Brace())
                                        {
                                            sb.AppendLine("Key => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Key);
                                                }
                                            }
                                            sb.AppendLine("]");
                                            sb.AppendLine("Value => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Value);
                                                }
                                            }
                                            sb.AppendLine("]");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.UnarmedDamage ?? true)
                    {
                        sb.AppendItem(UnarmedDamage, "UnarmedDamage");
                    }
                    if (printMask?.UnarmedReach ?? true)
                    {
                        sb.AppendItem(UnarmedReach, "UnarmedReach");
                    }
                    if (printMask?.BodyBipedObject ?? true)
                    {
                        sb.AppendItem(BodyBipedObject, "BodyBipedObject");
                    }
                    if (printMask?.AimAngleTolerance ?? true)
                    {
                        sb.AppendItem(AimAngleTolerance, "AimAngleTolerance");
                    }
                    if (printMask?.FlightRadius ?? true)
                    {
                        sb.AppendItem(FlightRadius, "FlightRadius");
                    }
                    if (printMask?.AngularAccelerationRate ?? true)
                    {
                        sb.AppendItem(AngularAccelerationRate, "AngularAccelerationRate");
                    }
                    if (printMask?.AngularTolerance ?? true)
                    {
                        sb.AppendItem(AngularTolerance, "AngularTolerance");
                    }
                    if (printMask?.MountData?.Overall ?? true)
                    {
                        MountData?.Print(sb);
                    }
                    if (SkeletalModel != null
                        && (printMask?.SkeletalModel?.Overall ?? true))
                    {
                        sb.AppendLine($"SkeletalModel => {SkeletalModel}");
                    }
                    if ((printMask?.MovementTypeNames?.Overall ?? true)
                        && MovementTypeNames is {} MovementTypeNamesItem)
                    {
                        sb.AppendLine("MovementTypeNames =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MovementTypeNamesItem.Overall);
                            if (MovementTypeNamesItem.Specific != null)
                            {
                                foreach (var subItem in MovementTypeNamesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((true))
                    {
                        sb.AppendLine($"Voices => {Voices}");
                    }
                    if (DecapitateArmors != null
                        && (printMask?.DecapitateArmors?.Overall ?? true))
                    {
                        sb.AppendLine($"DecapitateArmors => {DecapitateArmors}");
                    }
                    if (DefaultHairColors != null
                        && (printMask?.DefaultHairColors?.Overall ?? true))
                    {
                        sb.AppendLine($"DefaultHairColors => {DefaultHairColors}");
                    }
                    if (printMask?.NumberOfTintsInList ?? true)
                    {
                        sb.AppendItem(NumberOfTintsInList, "NumberOfTintsInList");
                    }
                    if (printMask?.FacegenMainClamp ?? true)
                    {
                        sb.AppendItem(FacegenMainClamp, "FacegenMainClamp");
                    }
                    if (printMask?.FacegenFaceClamp ?? true)
                    {
                        sb.AppendItem(FacegenFaceClamp, "FacegenFaceClamp");
                    }
                    if (printMask?.AttackRace ?? true)
                    {
                        sb.AppendItem(AttackRace, "AttackRace");
                    }
                    if ((printMask?.Attacks?.Overall ?? true)
                        && Attacks is {} AttacksItem)
                    {
                        sb.AppendLine("Attacks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AttacksItem.Overall);
                            if (AttacksItem.Specific != null)
                            {
                                foreach (var subItem in AttacksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((true))
                    {
                        sb.AppendLine($"BodyData => {BodyData}");
                    }
                    if ((printMask?.Hairs?.Overall ?? true)
                        && Hairs is {} HairsItem)
                    {
                        sb.AppendLine("Hairs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(HairsItem.Overall);
                            if (HairsItem.Specific != null)
                            {
                                foreach (var subItem in HairsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Eyes?.Overall ?? true)
                        && Eyes is {} EyesItem)
                    {
                        sb.AppendLine("Eyes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EyesItem.Overall);
                            if (EyesItem.Specific != null)
                            {
                                foreach (var subItem in EyesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.BodyPartData ?? true)
                    {
                        sb.AppendItem(BodyPartData, "BodyPartData");
                    }
                    if ((true))
                    {
                        sb.AppendLine($"BehaviorGraph => {BehaviorGraph}");
                    }
                    if (printMask?.MaterialType ?? true)
                    {
                        sb.AppendItem(MaterialType, "MaterialType");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.DecapitationFX ?? true)
                    {
                        sb.AppendItem(DecapitationFX, "DecapitationFX");
                    }
                    if (printMask?.OpenLootSound ?? true)
                    {
                        sb.AppendItem(OpenLootSound, "OpenLootSound");
                    }
                    if (printMask?.CloseLootSound ?? true)
                    {
                        sb.AppendItem(CloseLootSound, "CloseLootSound");
                    }
                    if (printMask?.BipedObjectNames?.Overall ?? true)
                    {
                        sb.AppendLine("BipedObjectNames =>");
                        using (sb.Brace())
                        {
                            if (BipedObjectNames != null)
                            {
                                if (BipedObjectNames.Overall != null)
                                {
                                    sb.AppendLine(BipedObjectNames.Overall.ToString());
                                }
                                if (BipedObjectNames.Specific != null)
                                {
                                    foreach (var subItem in BipedObjectNames.Specific)
                                    {
                                        using (sb.Brace())
                                        {
                                            sb.AppendLine("Key => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Key);
                                                }
                                            }
                                            sb.AppendLine("]");
                                            sb.AppendLine("Value => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Value);
                                                }
                                            }
                                            sb.AppendLine("]");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.MovementTypes?.Overall ?? true)
                        && MovementTypes is {} MovementTypesItem)
                    {
                        sb.AppendLine("MovementTypes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MovementTypesItem.Overall);
                            if (MovementTypesItem.Specific != null)
                            {
                                foreach (var subItem in MovementTypesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.EquipmentFlags ?? true)
                    {
                        sb.AppendItem(EquipmentFlags, "EquipmentFlags");
                    }
                    if ((printMask?.EquipmentSlots?.Overall ?? true)
                        && EquipmentSlots is {} EquipmentSlotsItem)
                    {
                        sb.AppendLine("EquipmentSlots =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EquipmentSlotsItem.Overall);
                            if (EquipmentSlotsItem.Specific != null)
                            {
                                foreach (var subItem in EquipmentSlotsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.UnarmedEquipSlot ?? true)
                    {
                        sb.AppendItem(UnarmedEquipSlot, "UnarmedEquipSlot");
                    }
                    if (printMask?.FaceFxPhonemes?.Overall ?? true)
                    {
                        FaceFxPhonemes?.Print(sb);
                    }
                    if (printMask?.BaseMovementDefaultWalk ?? true)
                    {
                        sb.AppendItem(BaseMovementDefaultWalk, "BaseMovementDefaultWalk");
                    }
                    if (printMask?.BaseMovementDefaultRun ?? true)
                    {
                        sb.AppendItem(BaseMovementDefaultRun, "BaseMovementDefaultRun");
                    }
                    if (printMask?.BaseMovementDefaultSwim ?? true)
                    {
                        sb.AppendItem(BaseMovementDefaultSwim, "BaseMovementDefaultSwim");
                    }
                    if (printMask?.BaseMovementDefaultFly ?? true)
                    {
                        sb.AppendItem(BaseMovementDefaultFly, "BaseMovementDefaultFly");
                    }
                    if (printMask?.BaseMovementDefaultSneak ?? true)
                    {
                        sb.AppendItem(BaseMovementDefaultSneak, "BaseMovementDefaultSneak");
                    }
                    if (printMask?.BaseMovementDefaultSprint ?? true)
                    {
                        sb.AppendItem(BaseMovementDefaultSprint, "BaseMovementDefaultSprint");
                    }
                    if (HeadData != null
                        && (printMask?.HeadData?.Overall ?? true))
                    {
                        sb.AppendLine($"HeadData => {HeadData}");
                    }
                    if (printMask?.MorphRace ?? true)
                    {
                        sb.AppendItem(MorphRace, "MorphRace");
                    }
                    if (printMask?.ArmorRace ?? true)
                    {
                        sb.AppendItem(ArmorRace, "ArmorRace");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorEffect;
            public Exception? Skin;
            public MaskItem<Exception?, BodyTemplate.ErrorMask?>? BodyTemplate;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost0;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost1;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost2;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost3;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost4;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost5;
            public MaskItem<Exception?, SkillBoost.ErrorMask?>? SkillBoost6;
            public Exception? Unknown;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Height;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Weight;
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>? Starting;
            public Exception? BaseCarryWeight;
            public Exception? BaseMass;
            public Exception? AccelerationRate;
            public Exception? DecelerationRate;
            public Exception? Size;
            public Exception? HeadBipedObject;
            public Exception? HairBipedObject;
            public Exception? InjuredHealthPercent;
            public Exception? ShieldBipedObject;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>? Regen;
            public Exception? UnarmedDamage;
            public Exception? UnarmedReach;
            public Exception? BodyBipedObject;
            public Exception? AimAngleTolerance;
            public Exception? FlightRadius;
            public Exception? AngularAccelerationRate;
            public Exception? AngularTolerance;
            public MaskItem<Exception?, MountData.ErrorMask?>? MountData;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? SkeletalModel;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? MovementTypeNames;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Voices;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? DecapitateArmors;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? DefaultHairColors;
            public Exception? NumberOfTintsInList;
            public Exception? FacegenMainClamp;
            public Exception? FacegenFaceClamp;
            public Exception? AttackRace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>? Attacks;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BodyData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Hairs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Eyes;
            public Exception? BodyPartData;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BehaviorGraph;
            public Exception? MaterialType;
            public Exception? ImpactDataSet;
            public Exception? DecapitationFX;
            public Exception? OpenLootSound;
            public Exception? CloseLootSound;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<BipedObject, Exception?>>?>? BipedObjectNames;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceMovementType.ErrorMask?>>?>? MovementTypes;
            public Exception? EquipmentFlags;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? EquipmentSlots;
            public Exception? UnarmedEquipSlot;
            public MaskItem<Exception?, FaceFxPhonemes.ErrorMask?>? FaceFxPhonemes;
            public Exception? BaseMovementDefaultWalk;
            public Exception? BaseMovementDefaultRun;
            public Exception? BaseMovementDefaultSwim;
            public Exception? BaseMovementDefaultFly;
            public Exception? BaseMovementDefaultSneak;
            public Exception? BaseMovementDefaultSprint;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? HeadData;
            public Exception? MorphRace;
            public Exception? ArmorRace;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        return Name;
                    case Race_FieldIndex.Description:
                        return Description;
                    case Race_FieldIndex.ActorEffect:
                        return ActorEffect;
                    case Race_FieldIndex.Skin:
                        return Skin;
                    case Race_FieldIndex.BodyTemplate:
                        return BodyTemplate;
                    case Race_FieldIndex.Keywords:
                        return Keywords;
                    case Race_FieldIndex.SkillBoost0:
                        return SkillBoost0;
                    case Race_FieldIndex.SkillBoost1:
                        return SkillBoost1;
                    case Race_FieldIndex.SkillBoost2:
                        return SkillBoost2;
                    case Race_FieldIndex.SkillBoost3:
                        return SkillBoost3;
                    case Race_FieldIndex.SkillBoost4:
                        return SkillBoost4;
                    case Race_FieldIndex.SkillBoost5:
                        return SkillBoost5;
                    case Race_FieldIndex.SkillBoost6:
                        return SkillBoost6;
                    case Race_FieldIndex.Unknown:
                        return Unknown;
                    case Race_FieldIndex.Height:
                        return Height;
                    case Race_FieldIndex.Weight:
                        return Weight;
                    case Race_FieldIndex.Flags:
                        return Flags;
                    case Race_FieldIndex.Starting:
                        return Starting;
                    case Race_FieldIndex.BaseCarryWeight:
                        return BaseCarryWeight;
                    case Race_FieldIndex.BaseMass:
                        return BaseMass;
                    case Race_FieldIndex.AccelerationRate:
                        return AccelerationRate;
                    case Race_FieldIndex.DecelerationRate:
                        return DecelerationRate;
                    case Race_FieldIndex.Size:
                        return Size;
                    case Race_FieldIndex.HeadBipedObject:
                        return HeadBipedObject;
                    case Race_FieldIndex.HairBipedObject:
                        return HairBipedObject;
                    case Race_FieldIndex.InjuredHealthPercent:
                        return InjuredHealthPercent;
                    case Race_FieldIndex.ShieldBipedObject:
                        return ShieldBipedObject;
                    case Race_FieldIndex.Regen:
                        return Regen;
                    case Race_FieldIndex.UnarmedDamage:
                        return UnarmedDamage;
                    case Race_FieldIndex.UnarmedReach:
                        return UnarmedReach;
                    case Race_FieldIndex.BodyBipedObject:
                        return BodyBipedObject;
                    case Race_FieldIndex.AimAngleTolerance:
                        return AimAngleTolerance;
                    case Race_FieldIndex.FlightRadius:
                        return FlightRadius;
                    case Race_FieldIndex.AngularAccelerationRate:
                        return AngularAccelerationRate;
                    case Race_FieldIndex.AngularTolerance:
                        return AngularTolerance;
                    case Race_FieldIndex.MountData:
                        return MountData;
                    case Race_FieldIndex.SkeletalModel:
                        return SkeletalModel;
                    case Race_FieldIndex.MovementTypeNames:
                        return MovementTypeNames;
                    case Race_FieldIndex.Voices:
                        return Voices;
                    case Race_FieldIndex.DecapitateArmors:
                        return DecapitateArmors;
                    case Race_FieldIndex.DefaultHairColors:
                        return DefaultHairColors;
                    case Race_FieldIndex.NumberOfTintsInList:
                        return NumberOfTintsInList;
                    case Race_FieldIndex.FacegenMainClamp:
                        return FacegenMainClamp;
                    case Race_FieldIndex.FacegenFaceClamp:
                        return FacegenFaceClamp;
                    case Race_FieldIndex.AttackRace:
                        return AttackRace;
                    case Race_FieldIndex.Attacks:
                        return Attacks;
                    case Race_FieldIndex.BodyData:
                        return BodyData;
                    case Race_FieldIndex.Hairs:
                        return Hairs;
                    case Race_FieldIndex.Eyes:
                        return Eyes;
                    case Race_FieldIndex.BodyPartData:
                        return BodyPartData;
                    case Race_FieldIndex.BehaviorGraph:
                        return BehaviorGraph;
                    case Race_FieldIndex.MaterialType:
                        return MaterialType;
                    case Race_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case Race_FieldIndex.DecapitationFX:
                        return DecapitationFX;
                    case Race_FieldIndex.OpenLootSound:
                        return OpenLootSound;
                    case Race_FieldIndex.CloseLootSound:
                        return CloseLootSound;
                    case Race_FieldIndex.BipedObjectNames:
                        return BipedObjectNames;
                    case Race_FieldIndex.MovementTypes:
                        return MovementTypes;
                    case Race_FieldIndex.EquipmentFlags:
                        return EquipmentFlags;
                    case Race_FieldIndex.EquipmentSlots:
                        return EquipmentSlots;
                    case Race_FieldIndex.UnarmedEquipSlot:
                        return UnarmedEquipSlot;
                    case Race_FieldIndex.FaceFxPhonemes:
                        return FaceFxPhonemes;
                    case Race_FieldIndex.BaseMovementDefaultWalk:
                        return BaseMovementDefaultWalk;
                    case Race_FieldIndex.BaseMovementDefaultRun:
                        return BaseMovementDefaultRun;
                    case Race_FieldIndex.BaseMovementDefaultSwim:
                        return BaseMovementDefaultSwim;
                    case Race_FieldIndex.BaseMovementDefaultFly:
                        return BaseMovementDefaultFly;
                    case Race_FieldIndex.BaseMovementDefaultSneak:
                        return BaseMovementDefaultSneak;
                    case Race_FieldIndex.BaseMovementDefaultSprint:
                        return BaseMovementDefaultSprint;
                    case Race_FieldIndex.HeadData:
                        return HeadData;
                    case Race_FieldIndex.MorphRace:
                        return MorphRace;
                    case Race_FieldIndex.ArmorRace:
                        return ArmorRace;
                    case Race_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = ex;
                        break;
                    case Race_FieldIndex.BodyTemplate:
                        this.BodyTemplate = new MaskItem<Exception?, BodyTemplate.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost0:
                        this.SkillBoost0 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost1:
                        this.SkillBoost1 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost2:
                        this.SkillBoost2 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost3:
                        this.SkillBoost3 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost4:
                        this.SkillBoost4 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost5:
                        this.SkillBoost5 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkillBoost6:
                        this.SkillBoost6 = new MaskItem<Exception?, SkillBoost.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Race_FieldIndex.Height:
                        this.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.Weight:
                        this.Weight = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Race_FieldIndex.Starting:
                        this.Starting = new MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.BaseCarryWeight:
                        this.BaseCarryWeight = ex;
                        break;
                    case Race_FieldIndex.BaseMass:
                        this.BaseMass = ex;
                        break;
                    case Race_FieldIndex.AccelerationRate:
                        this.AccelerationRate = ex;
                        break;
                    case Race_FieldIndex.DecelerationRate:
                        this.DecelerationRate = ex;
                        break;
                    case Race_FieldIndex.Size:
                        this.Size = ex;
                        break;
                    case Race_FieldIndex.HeadBipedObject:
                        this.HeadBipedObject = ex;
                        break;
                    case Race_FieldIndex.HairBipedObject:
                        this.HairBipedObject = ex;
                        break;
                    case Race_FieldIndex.InjuredHealthPercent:
                        this.InjuredHealthPercent = ex;
                        break;
                    case Race_FieldIndex.ShieldBipedObject:
                        this.ShieldBipedObject = ex;
                        break;
                    case Race_FieldIndex.Regen:
                        this.Regen = new MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.UnarmedDamage:
                        this.UnarmedDamage = ex;
                        break;
                    case Race_FieldIndex.UnarmedReach:
                        this.UnarmedReach = ex;
                        break;
                    case Race_FieldIndex.BodyBipedObject:
                        this.BodyBipedObject = ex;
                        break;
                    case Race_FieldIndex.AimAngleTolerance:
                        this.AimAngleTolerance = ex;
                        break;
                    case Race_FieldIndex.FlightRadius:
                        this.FlightRadius = ex;
                        break;
                    case Race_FieldIndex.AngularAccelerationRate:
                        this.AngularAccelerationRate = ex;
                        break;
                    case Race_FieldIndex.AngularTolerance:
                        this.AngularTolerance = ex;
                        break;
                    case Race_FieldIndex.MountData:
                        this.MountData = new MaskItem<Exception?, MountData.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SkeletalModel:
                        this.SkeletalModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.MovementTypeNames:
                        this.MovementTypeNames = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DecapitateArmors:
                        this.DecapitateArmors = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultHairColors:
                        this.DefaultHairColors = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.NumberOfTintsInList:
                        this.NumberOfTintsInList = ex;
                        break;
                    case Race_FieldIndex.FacegenMainClamp:
                        this.FacegenMainClamp = ex;
                        break;
                    case Race_FieldIndex.FacegenFaceClamp:
                        this.FacegenFaceClamp = ex;
                        break;
                    case Race_FieldIndex.AttackRace:
                        this.AttackRace = ex;
                        break;
                    case Race_FieldIndex.Attacks:
                        this.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyPartData:
                        this.BodyPartData = ex;
                        break;
                    case Race_FieldIndex.BehaviorGraph:
                        this.BehaviorGraph = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.MaterialType:
                        this.MaterialType = ex;
                        break;
                    case Race_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case Race_FieldIndex.DecapitationFX:
                        this.DecapitationFX = ex;
                        break;
                    case Race_FieldIndex.OpenLootSound:
                        this.OpenLootSound = ex;
                        break;
                    case Race_FieldIndex.CloseLootSound:
                        this.CloseLootSound = ex;
                        break;
                    case Race_FieldIndex.BipedObjectNames:
                        this.BipedObjectNames = new MaskItem<Exception?, IEnumerable<KeyValuePair<BipedObject, Exception?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.MovementTypes:
                        this.MovementTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceMovementType.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.EquipmentFlags:
                        this.EquipmentFlags = ex;
                        break;
                    case Race_FieldIndex.EquipmentSlots:
                        this.EquipmentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.UnarmedEquipSlot:
                        this.UnarmedEquipSlot = ex;
                        break;
                    case Race_FieldIndex.FaceFxPhonemes:
                        this.FaceFxPhonemes = new MaskItem<Exception?, FaceFxPhonemes.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.BaseMovementDefaultWalk:
                        this.BaseMovementDefaultWalk = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultRun:
                        this.BaseMovementDefaultRun = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSwim:
                        this.BaseMovementDefaultSwim = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultFly:
                        this.BaseMovementDefaultFly = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSneak:
                        this.BaseMovementDefaultSneak = ex;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSprint:
                        this.BaseMovementDefaultSprint = ex;
                        break;
                    case Race_FieldIndex.HeadData:
                        this.HeadData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.MorphRace:
                        this.MorphRace = ex;
                        break;
                    case Race_FieldIndex.ArmorRace:
                        this.ArmorRace = ex;
                        break;
                    case Race_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ActorEffect:
                        this.ActorEffect = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Skin:
                        this.Skin = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BodyTemplate:
                        this.BodyTemplate = (MaskItem<Exception?, BodyTemplate.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.SkillBoost0:
                        this.SkillBoost0 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost1:
                        this.SkillBoost1 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost2:
                        this.SkillBoost2 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost3:
                        this.SkillBoost3 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost4:
                        this.SkillBoost4 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost5:
                        this.SkillBoost5 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkillBoost6:
                        this.SkillBoost6 = (MaskItem<Exception?, SkillBoost.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Height:
                        this.Height = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.Weight:
                        this.Weight = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Starting:
                        this.Starting = (MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>)obj;
                        break;
                    case Race_FieldIndex.BaseCarryWeight:
                        this.BaseCarryWeight = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMass:
                        this.BaseMass = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AccelerationRate:
                        this.AccelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DecelerationRate:
                        this.DecelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Size:
                        this.Size = (Exception?)obj;
                        break;
                    case Race_FieldIndex.HeadBipedObject:
                        this.HeadBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.HairBipedObject:
                        this.HairBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.InjuredHealthPercent:
                        this.InjuredHealthPercent = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ShieldBipedObject:
                        this.ShieldBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Regen:
                        this.Regen = (MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>)obj;
                        break;
                    case Race_FieldIndex.UnarmedDamage:
                        this.UnarmedDamage = (Exception?)obj;
                        break;
                    case Race_FieldIndex.UnarmedReach:
                        this.UnarmedReach = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BodyBipedObject:
                        this.BodyBipedObject = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AimAngleTolerance:
                        this.AimAngleTolerance = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FlightRadius:
                        this.FlightRadius = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AngularAccelerationRate:
                        this.AngularAccelerationRate = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AngularTolerance:
                        this.AngularTolerance = (Exception?)obj;
                        break;
                    case Race_FieldIndex.MountData:
                        this.MountData = (MaskItem<Exception?, MountData.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SkeletalModel:
                        this.SkeletalModel = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.MovementTypeNames:
                        this.MovementTypeNames = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DecapitateArmors:
                        this.DecapitateArmors = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultHairColors:
                        this.DefaultHairColors = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.NumberOfTintsInList:
                        this.NumberOfTintsInList = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FacegenMainClamp:
                        this.FacegenMainClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FacegenFaceClamp:
                        this.FacegenFaceClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.AttackRace:
                        this.AttackRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Attacks:
                        this.Attacks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.BodyPartData:
                        this.BodyPartData = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BehaviorGraph:
                        this.BehaviorGraph = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.MaterialType:
                        this.MaterialType = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DecapitationFX:
                        this.DecapitationFX = (Exception?)obj;
                        break;
                    case Race_FieldIndex.OpenLootSound:
                        this.OpenLootSound = (Exception?)obj;
                        break;
                    case Race_FieldIndex.CloseLootSound:
                        this.CloseLootSound = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BipedObjectNames:
                        this.BipedObjectNames = (MaskItem<Exception?, IEnumerable<KeyValuePair<BipedObject, Exception?>>?>)obj;
                        break;
                    case Race_FieldIndex.MovementTypes:
                        this.MovementTypes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceMovementType.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.EquipmentFlags:
                        this.EquipmentFlags = (Exception?)obj;
                        break;
                    case Race_FieldIndex.EquipmentSlots:
                        this.EquipmentSlots = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.UnarmedEquipSlot:
                        this.UnarmedEquipSlot = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FaceFxPhonemes:
                        this.FaceFxPhonemes = (MaskItem<Exception?, FaceFxPhonemes.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultWalk:
                        this.BaseMovementDefaultWalk = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultRun:
                        this.BaseMovementDefaultRun = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSwim:
                        this.BaseMovementDefaultSwim = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultFly:
                        this.BaseMovementDefaultFly = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSneak:
                        this.BaseMovementDefaultSneak = (Exception?)obj;
                        break;
                    case Race_FieldIndex.BaseMovementDefaultSprint:
                        this.BaseMovementDefaultSprint = (Exception?)obj;
                        break;
                    case Race_FieldIndex.HeadData:
                        this.HeadData = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.MorphRace:
                        this.MorphRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.ArmorRace:
                        this.ArmorRace = (Exception?)obj;
                        break;
                    case Race_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (ActorEffect != null) return true;
                if (Skin != null) return true;
                if (BodyTemplate != null) return true;
                if (Keywords != null) return true;
                if (SkillBoost0 != null) return true;
                if (SkillBoost1 != null) return true;
                if (SkillBoost2 != null) return true;
                if (SkillBoost3 != null) return true;
                if (SkillBoost4 != null) return true;
                if (SkillBoost5 != null) return true;
                if (SkillBoost6 != null) return true;
                if (Unknown != null) return true;
                if (Height != null) return true;
                if (Weight != null) return true;
                if (Flags != null) return true;
                if (Starting != null) return true;
                if (BaseCarryWeight != null) return true;
                if (BaseMass != null) return true;
                if (AccelerationRate != null) return true;
                if (DecelerationRate != null) return true;
                if (Size != null) return true;
                if (HeadBipedObject != null) return true;
                if (HairBipedObject != null) return true;
                if (InjuredHealthPercent != null) return true;
                if (ShieldBipedObject != null) return true;
                if (Regen != null) return true;
                if (UnarmedDamage != null) return true;
                if (UnarmedReach != null) return true;
                if (BodyBipedObject != null) return true;
                if (AimAngleTolerance != null) return true;
                if (FlightRadius != null) return true;
                if (AngularAccelerationRate != null) return true;
                if (AngularTolerance != null) return true;
                if (MountData != null) return true;
                if (SkeletalModel != null) return true;
                if (MovementTypeNames != null) return true;
                if (Voices != null) return true;
                if (DecapitateArmors != null) return true;
                if (DefaultHairColors != null) return true;
                if (NumberOfTintsInList != null) return true;
                if (FacegenMainClamp != null) return true;
                if (FacegenFaceClamp != null) return true;
                if (AttackRace != null) return true;
                if (Attacks != null) return true;
                if (BodyData != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (BodyPartData != null) return true;
                if (BehaviorGraph != null) return true;
                if (MaterialType != null) return true;
                if (ImpactDataSet != null) return true;
                if (DecapitationFX != null) return true;
                if (OpenLootSound != null) return true;
                if (CloseLootSound != null) return true;
                if (BipedObjectNames != null) return true;
                if (MovementTypes != null) return true;
                if (EquipmentFlags != null) return true;
                if (EquipmentSlots != null) return true;
                if (UnarmedEquipSlot != null) return true;
                if (FaceFxPhonemes != null) return true;
                if (BaseMovementDefaultWalk != null) return true;
                if (BaseMovementDefaultRun != null) return true;
                if (BaseMovementDefaultSwim != null) return true;
                if (BaseMovementDefaultFly != null) return true;
                if (BaseMovementDefaultSneak != null) return true;
                if (BaseMovementDefaultSprint != null) return true;
                if (HeadData != null) return true;
                if (MorphRace != null) return true;
                if (ArmorRace != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (ActorEffect is {} ActorEffectItem)
                {
                    sb.AppendLine("ActorEffect =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorEffectItem.Overall);
                        if (ActorEffectItem.Specific != null)
                        {
                            foreach (var subItem in ActorEffectItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Skin, "Skin");
                }
                BodyTemplate?.Print(sb);
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                SkillBoost0?.Print(sb);
                SkillBoost1?.Print(sb);
                SkillBoost2?.Print(sb);
                SkillBoost3?.Print(sb);
                SkillBoost4?.Print(sb);
                SkillBoost5?.Print(sb);
                SkillBoost6?.Print(sb);
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendLine($"Height => {Height}");
                }
                {
                    sb.AppendLine($"Weight => {Weight}");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendLine("Starting =>");
                    using (sb.Brace())
                    {
                        if (Starting != null)
                        {
                            if (Starting.Overall != null)
                            {
                                sb.AppendLine(Starting.Overall.ToString());
                            }
                            if (Starting.Specific != null)
                            {
                                foreach (var subItem in Starting.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        sb.AppendLine("Key => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Key);
                                            }
                                        }
                                        sb.AppendLine("]");
                                        sb.AppendLine("Value => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Value);
                                            }
                                        }
                                        sb.AppendLine("]");
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(BaseCarryWeight, "BaseCarryWeight");
                }
                {
                    sb.AppendItem(BaseMass, "BaseMass");
                }
                {
                    sb.AppendItem(AccelerationRate, "AccelerationRate");
                }
                {
                    sb.AppendItem(DecelerationRate, "DecelerationRate");
                }
                {
                    sb.AppendItem(Size, "Size");
                }
                {
                    sb.AppendItem(HeadBipedObject, "HeadBipedObject");
                }
                {
                    sb.AppendItem(HairBipedObject, "HairBipedObject");
                }
                {
                    sb.AppendItem(InjuredHealthPercent, "InjuredHealthPercent");
                }
                {
                    sb.AppendItem(ShieldBipedObject, "ShieldBipedObject");
                }
                {
                    sb.AppendLine("Regen =>");
                    using (sb.Brace())
                    {
                        if (Regen != null)
                        {
                            if (Regen.Overall != null)
                            {
                                sb.AppendLine(Regen.Overall.ToString());
                            }
                            if (Regen.Specific != null)
                            {
                                foreach (var subItem in Regen.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        sb.AppendLine("Key => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Key);
                                            }
                                        }
                                        sb.AppendLine("]");
                                        sb.AppendLine("Value => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Value);
                                            }
                                        }
                                        sb.AppendLine("]");
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(UnarmedDamage, "UnarmedDamage");
                }
                {
                    sb.AppendItem(UnarmedReach, "UnarmedReach");
                }
                {
                    sb.AppendItem(BodyBipedObject, "BodyBipedObject");
                }
                {
                    sb.AppendItem(AimAngleTolerance, "AimAngleTolerance");
                }
                {
                    sb.AppendItem(FlightRadius, "FlightRadius");
                }
                {
                    sb.AppendItem(AngularAccelerationRate, "AngularAccelerationRate");
                }
                {
                    sb.AppendItem(AngularTolerance, "AngularTolerance");
                }
                MountData?.Print(sb);
                if (SkeletalModel != null)
                {
                    sb.AppendLine($"SkeletalModel => {SkeletalModel}");
                }
                if (MovementTypeNames is {} MovementTypeNamesItem)
                {
                    sb.AppendLine("MovementTypeNames =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MovementTypeNamesItem.Overall);
                        if (MovementTypeNamesItem.Specific != null)
                        {
                            foreach (var subItem in MovementTypeNamesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendLine($"Voices => {Voices}");
                }
                if (DecapitateArmors != null)
                {
                    sb.AppendLine($"DecapitateArmors => {DecapitateArmors}");
                }
                if (DefaultHairColors != null)
                {
                    sb.AppendLine($"DefaultHairColors => {DefaultHairColors}");
                }
                {
                    sb.AppendItem(NumberOfTintsInList, "NumberOfTintsInList");
                }
                {
                    sb.AppendItem(FacegenMainClamp, "FacegenMainClamp");
                }
                {
                    sb.AppendItem(FacegenFaceClamp, "FacegenFaceClamp");
                }
                {
                    sb.AppendItem(AttackRace, "AttackRace");
                }
                if (Attacks is {} AttacksItem)
                {
                    sb.AppendLine("Attacks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AttacksItem.Overall);
                        if (AttacksItem.Specific != null)
                        {
                            foreach (var subItem in AttacksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendLine($"BodyData => {BodyData}");
                }
                if (Hairs is {} HairsItem)
                {
                    sb.AppendLine("Hairs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(HairsItem.Overall);
                        if (HairsItem.Specific != null)
                        {
                            foreach (var subItem in HairsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Eyes is {} EyesItem)
                {
                    sb.AppendLine("Eyes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EyesItem.Overall);
                        if (EyesItem.Specific != null)
                        {
                            foreach (var subItem in EyesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(BodyPartData, "BodyPartData");
                }
                {
                    sb.AppendLine($"BehaviorGraph => {BehaviorGraph}");
                }
                {
                    sb.AppendItem(MaterialType, "MaterialType");
                }
                {
                    sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                }
                {
                    sb.AppendItem(DecapitationFX, "DecapitationFX");
                }
                {
                    sb.AppendItem(OpenLootSound, "OpenLootSound");
                }
                {
                    sb.AppendItem(CloseLootSound, "CloseLootSound");
                }
                {
                    sb.AppendLine("BipedObjectNames =>");
                    using (sb.Brace())
                    {
                        if (BipedObjectNames != null)
                        {
                            if (BipedObjectNames.Overall != null)
                            {
                                sb.AppendLine(BipedObjectNames.Overall.ToString());
                            }
                            if (BipedObjectNames.Specific != null)
                            {
                                foreach (var subItem in BipedObjectNames.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        sb.AppendLine("Key => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Key);
                                            }
                                        }
                                        sb.AppendLine("]");
                                        sb.AppendLine("Value => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Value);
                                            }
                                        }
                                        sb.AppendLine("]");
                                    }
                                }
                            }
                        }
                    }
                }
                if (MovementTypes is {} MovementTypesItem)
                {
                    sb.AppendLine("MovementTypes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MovementTypesItem.Overall);
                        if (MovementTypesItem.Specific != null)
                        {
                            foreach (var subItem in MovementTypesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(EquipmentFlags, "EquipmentFlags");
                }
                if (EquipmentSlots is {} EquipmentSlotsItem)
                {
                    sb.AppendLine("EquipmentSlots =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EquipmentSlotsItem.Overall);
                        if (EquipmentSlotsItem.Specific != null)
                        {
                            foreach (var subItem in EquipmentSlotsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(UnarmedEquipSlot, "UnarmedEquipSlot");
                }
                FaceFxPhonemes?.Print(sb);
                {
                    sb.AppendItem(BaseMovementDefaultWalk, "BaseMovementDefaultWalk");
                }
                {
                    sb.AppendItem(BaseMovementDefaultRun, "BaseMovementDefaultRun");
                }
                {
                    sb.AppendItem(BaseMovementDefaultSwim, "BaseMovementDefaultSwim");
                }
                {
                    sb.AppendItem(BaseMovementDefaultFly, "BaseMovementDefaultFly");
                }
                {
                    sb.AppendItem(BaseMovementDefaultSneak, "BaseMovementDefaultSneak");
                }
                {
                    sb.AppendItem(BaseMovementDefaultSprint, "BaseMovementDefaultSprint");
                }
                if (HeadData != null)
                {
                    sb.AppendLine($"HeadData => {HeadData}");
                }
                {
                    sb.AppendItem(MorphRace, "MorphRace");
                }
                {
                    sb.AppendItem(ArmorRace, "ArmorRace");
                }
                {
                    sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ActorEffect?.Overall, rhs.ActorEffect?.Overall), Noggog.ExceptionExt.Combine(this.ActorEffect?.Specific, rhs.ActorEffect?.Specific));
                ret.Skin = this.Skin.Combine(rhs.Skin);
                ret.BodyTemplate = this.BodyTemplate.Combine(rhs.BodyTemplate, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.SkillBoost0 = this.SkillBoost0.Combine(rhs.SkillBoost0, (l, r) => l.Combine(r));
                ret.SkillBoost1 = this.SkillBoost1.Combine(rhs.SkillBoost1, (l, r) => l.Combine(r));
                ret.SkillBoost2 = this.SkillBoost2.Combine(rhs.SkillBoost2, (l, r) => l.Combine(r));
                ret.SkillBoost3 = this.SkillBoost3.Combine(rhs.SkillBoost3, (l, r) => l.Combine(r));
                ret.SkillBoost4 = this.SkillBoost4.Combine(rhs.SkillBoost4, (l, r) => l.Combine(r));
                ret.SkillBoost5 = this.SkillBoost5.Combine(rhs.SkillBoost5, (l, r) => l.Combine(r));
                ret.SkillBoost6 = this.SkillBoost6.Combine(rhs.SkillBoost6, (l, r) => l.Combine(r));
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Height = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.Height?.Overall, rhs.Height?.Overall), GenderedItem.Combine(this.Height?.Specific, rhs.Height?.Specific));
                ret.Weight = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.Weight?.Overall, rhs.Weight?.Overall), GenderedItem.Combine(this.Weight?.Specific, rhs.Weight?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Starting = new MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>(Noggog.ExceptionExt.Combine(this.Starting?.Overall, rhs.Starting?.Overall), Noggog.ExceptionExt.Combine(this.Starting?.Specific, rhs.Starting?.Specific));
                ret.BaseCarryWeight = this.BaseCarryWeight.Combine(rhs.BaseCarryWeight);
                ret.BaseMass = this.BaseMass.Combine(rhs.BaseMass);
                ret.AccelerationRate = this.AccelerationRate.Combine(rhs.AccelerationRate);
                ret.DecelerationRate = this.DecelerationRate.Combine(rhs.DecelerationRate);
                ret.Size = this.Size.Combine(rhs.Size);
                ret.HeadBipedObject = this.HeadBipedObject.Combine(rhs.HeadBipedObject);
                ret.HairBipedObject = this.HairBipedObject.Combine(rhs.HairBipedObject);
                ret.InjuredHealthPercent = this.InjuredHealthPercent.Combine(rhs.InjuredHealthPercent);
                ret.ShieldBipedObject = this.ShieldBipedObject.Combine(rhs.ShieldBipedObject);
                ret.Regen = new MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>(Noggog.ExceptionExt.Combine(this.Regen?.Overall, rhs.Regen?.Overall), Noggog.ExceptionExt.Combine(this.Regen?.Specific, rhs.Regen?.Specific));
                ret.UnarmedDamage = this.UnarmedDamage.Combine(rhs.UnarmedDamage);
                ret.UnarmedReach = this.UnarmedReach.Combine(rhs.UnarmedReach);
                ret.BodyBipedObject = this.BodyBipedObject.Combine(rhs.BodyBipedObject);
                ret.AimAngleTolerance = this.AimAngleTolerance.Combine(rhs.AimAngleTolerance);
                ret.FlightRadius = this.FlightRadius.Combine(rhs.FlightRadius);
                ret.AngularAccelerationRate = this.AngularAccelerationRate.Combine(rhs.AngularAccelerationRate);
                ret.AngularTolerance = this.AngularTolerance.Combine(rhs.AngularTolerance);
                ret.MountData = this.MountData.Combine(rhs.MountData, (l, r) => l.Combine(r));
                ret.SkeletalModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.SkeletalModel?.Overall, rhs.SkeletalModel?.Overall), GenderedItem.Combine(this.SkeletalModel?.Specific, rhs.SkeletalModel?.Specific));
                ret.MovementTypeNames = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.MovementTypeNames?.Overall, rhs.MovementTypeNames?.Overall), Noggog.ExceptionExt.Combine(this.MovementTypeNames?.Specific, rhs.MovementTypeNames?.Specific));
                ret.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.Voices?.Overall, rhs.Voices?.Overall), GenderedItem.Combine(this.Voices?.Specific, rhs.Voices?.Specific));
                ret.DecapitateArmors = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.DecapitateArmors?.Overall, rhs.DecapitateArmors?.Overall), GenderedItem.Combine(this.DecapitateArmors?.Specific, rhs.DecapitateArmors?.Specific));
                ret.DefaultHairColors = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.DefaultHairColors?.Overall, rhs.DefaultHairColors?.Overall), GenderedItem.Combine(this.DefaultHairColors?.Specific, rhs.DefaultHairColors?.Specific));
                ret.NumberOfTintsInList = this.NumberOfTintsInList.Combine(rhs.NumberOfTintsInList);
                ret.FacegenMainClamp = this.FacegenMainClamp.Combine(rhs.FacegenMainClamp);
                ret.FacegenFaceClamp = this.FacegenFaceClamp.Combine(rhs.FacegenFaceClamp);
                ret.AttackRace = this.AttackRace.Combine(rhs.AttackRace);
                ret.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Attacks?.Overall, rhs.Attacks?.Overall), Noggog.ExceptionExt.Combine(this.Attacks?.Specific, rhs.Attacks?.Specific));
                ret.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.BodyData?.Overall, rhs.BodyData?.Overall), GenderedItem.Combine(this.BodyData?.Specific, rhs.BodyData?.Specific));
                ret.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Hairs?.Overall, rhs.Hairs?.Overall), Noggog.ExceptionExt.Combine(this.Hairs?.Specific, rhs.Hairs?.Specific));
                ret.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Eyes?.Overall, rhs.Eyes?.Overall), Noggog.ExceptionExt.Combine(this.Eyes?.Specific, rhs.Eyes?.Specific));
                ret.BodyPartData = this.BodyPartData.Combine(rhs.BodyPartData);
                ret.BehaviorGraph = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.BehaviorGraph?.Overall, rhs.BehaviorGraph?.Overall), GenderedItem.Combine(this.BehaviorGraph?.Specific, rhs.BehaviorGraph?.Specific));
                ret.MaterialType = this.MaterialType.Combine(rhs.MaterialType);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.DecapitationFX = this.DecapitationFX.Combine(rhs.DecapitationFX);
                ret.OpenLootSound = this.OpenLootSound.Combine(rhs.OpenLootSound);
                ret.CloseLootSound = this.CloseLootSound.Combine(rhs.CloseLootSound);
                ret.BipedObjectNames = new MaskItem<Exception?, IEnumerable<KeyValuePair<BipedObject, Exception?>>?>(Noggog.ExceptionExt.Combine(this.BipedObjectNames?.Overall, rhs.BipedObjectNames?.Overall), Noggog.ExceptionExt.Combine(this.BipedObjectNames?.Specific, rhs.BipedObjectNames?.Specific));
                ret.MovementTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceMovementType.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MovementTypes?.Overall, rhs.MovementTypes?.Overall), Noggog.ExceptionExt.Combine(this.MovementTypes?.Specific, rhs.MovementTypes?.Specific));
                ret.EquipmentFlags = this.EquipmentFlags.Combine(rhs.EquipmentFlags);
                ret.EquipmentSlots = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.EquipmentSlots?.Overall, rhs.EquipmentSlots?.Overall), Noggog.ExceptionExt.Combine(this.EquipmentSlots?.Specific, rhs.EquipmentSlots?.Specific));
                ret.UnarmedEquipSlot = this.UnarmedEquipSlot.Combine(rhs.UnarmedEquipSlot);
                ret.FaceFxPhonemes = this.FaceFxPhonemes.Combine(rhs.FaceFxPhonemes, (l, r) => l.Combine(r));
                ret.BaseMovementDefaultWalk = this.BaseMovementDefaultWalk.Combine(rhs.BaseMovementDefaultWalk);
                ret.BaseMovementDefaultRun = this.BaseMovementDefaultRun.Combine(rhs.BaseMovementDefaultRun);
                ret.BaseMovementDefaultSwim = this.BaseMovementDefaultSwim.Combine(rhs.BaseMovementDefaultSwim);
                ret.BaseMovementDefaultFly = this.BaseMovementDefaultFly.Combine(rhs.BaseMovementDefaultFly);
                ret.BaseMovementDefaultSneak = this.BaseMovementDefaultSneak.Combine(rhs.BaseMovementDefaultSneak);
                ret.BaseMovementDefaultSprint = this.BaseMovementDefaultSprint.Combine(rhs.BaseMovementDefaultSprint);
                ret.HeadData = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.HeadData?.Overall, rhs.HeadData?.Overall), GenderedItem.Combine(this.HeadData?.Specific, rhs.HeadData?.Specific));
                ret.MorphRace = this.MorphRace.Combine(rhs.MorphRace);
                ret.ArmorRace = this.ArmorRace.Combine(rhs.ArmorRace);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool ActorEffect;
            public bool Skin;
            public BodyTemplate.TranslationMask? BodyTemplate;
            public bool Keywords;
            public SkillBoost.TranslationMask? SkillBoost0;
            public SkillBoost.TranslationMask? SkillBoost1;
            public SkillBoost.TranslationMask? SkillBoost2;
            public SkillBoost.TranslationMask? SkillBoost3;
            public SkillBoost.TranslationMask? SkillBoost4;
            public SkillBoost.TranslationMask? SkillBoost5;
            public SkillBoost.TranslationMask? SkillBoost6;
            public bool Unknown;
            public GenderedItem<bool>? Height;
            public GenderedItem<bool>? Weight;
            public bool Flags;
            public bool Starting;
            public bool BaseCarryWeight;
            public bool BaseMass;
            public bool AccelerationRate;
            public bool DecelerationRate;
            public bool Size;
            public bool HeadBipedObject;
            public bool HairBipedObject;
            public bool InjuredHealthPercent;
            public bool ShieldBipedObject;
            public bool Regen;
            public bool UnarmedDamage;
            public bool UnarmedReach;
            public bool BodyBipedObject;
            public bool AimAngleTolerance;
            public bool FlightRadius;
            public bool AngularAccelerationRate;
            public bool AngularTolerance;
            public MountData.TranslationMask? MountData;
            public GenderedItem<SimpleModel.TranslationMask>? SkeletalModel;
            public bool MovementTypeNames;
            public GenderedItem<bool>? Voices;
            public GenderedItem<bool>? DecapitateArmors;
            public GenderedItem<bool>? DefaultHairColors;
            public bool NumberOfTintsInList;
            public bool FacegenMainClamp;
            public bool FacegenFaceClamp;
            public bool AttackRace;
            public Attack.TranslationMask? Attacks;
            public GenderedItem<BodyData.TranslationMask>? BodyData;
            public bool Hairs;
            public bool Eyes;
            public bool BodyPartData;
            public GenderedItem<Model.TranslationMask>? BehaviorGraph;
            public bool MaterialType;
            public bool ImpactDataSet;
            public bool DecapitationFX;
            public bool OpenLootSound;
            public bool CloseLootSound;
            public bool BipedObjectNames;
            public RaceMovementType.TranslationMask? MovementTypes;
            public bool EquipmentFlags;
            public bool EquipmentSlots;
            public bool UnarmedEquipSlot;
            public FaceFxPhonemes.TranslationMask? FaceFxPhonemes;
            public bool BaseMovementDefaultWalk;
            public bool BaseMovementDefaultRun;
            public bool BaseMovementDefaultSwim;
            public bool BaseMovementDefaultFly;
            public bool BaseMovementDefaultSneak;
            public bool BaseMovementDefaultSprint;
            public GenderedItem<HeadData.TranslationMask>? HeadData;
            public bool MorphRace;
            public bool ArmorRace;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.ActorEffect = defaultOn;
                this.Skin = defaultOn;
                this.Keywords = defaultOn;
                this.Unknown = defaultOn;
                this.Flags = defaultOn;
                this.Starting = defaultOn;
                this.BaseCarryWeight = defaultOn;
                this.BaseMass = defaultOn;
                this.AccelerationRate = defaultOn;
                this.DecelerationRate = defaultOn;
                this.Size = defaultOn;
                this.HeadBipedObject = defaultOn;
                this.HairBipedObject = defaultOn;
                this.InjuredHealthPercent = defaultOn;
                this.ShieldBipedObject = defaultOn;
                this.Regen = defaultOn;
                this.UnarmedDamage = defaultOn;
                this.UnarmedReach = defaultOn;
                this.BodyBipedObject = defaultOn;
                this.AimAngleTolerance = defaultOn;
                this.FlightRadius = defaultOn;
                this.AngularAccelerationRate = defaultOn;
                this.AngularTolerance = defaultOn;
                this.MovementTypeNames = defaultOn;
                this.NumberOfTintsInList = defaultOn;
                this.FacegenMainClamp = defaultOn;
                this.FacegenFaceClamp = defaultOn;
                this.AttackRace = defaultOn;
                this.Hairs = defaultOn;
                this.Eyes = defaultOn;
                this.BodyPartData = defaultOn;
                this.MaterialType = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.DecapitationFX = defaultOn;
                this.OpenLootSound = defaultOn;
                this.CloseLootSound = defaultOn;
                this.BipedObjectNames = defaultOn;
                this.EquipmentFlags = defaultOn;
                this.EquipmentSlots = defaultOn;
                this.UnarmedEquipSlot = defaultOn;
                this.BaseMovementDefaultWalk = defaultOn;
                this.BaseMovementDefaultRun = defaultOn;
                this.BaseMovementDefaultSwim = defaultOn;
                this.BaseMovementDefaultFly = defaultOn;
                this.BaseMovementDefaultSneak = defaultOn;
                this.BaseMovementDefaultSprint = defaultOn;
                this.MorphRace = defaultOn;
                this.ArmorRace = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((ActorEffect, null));
                ret.Add((Skin, null));
                ret.Add((BodyTemplate != null ? BodyTemplate.OnOverall : DefaultOn, BodyTemplate?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((SkillBoost0 != null ? SkillBoost0.OnOverall : DefaultOn, SkillBoost0?.GetCrystal()));
                ret.Add((SkillBoost1 != null ? SkillBoost1.OnOverall : DefaultOn, SkillBoost1?.GetCrystal()));
                ret.Add((SkillBoost2 != null ? SkillBoost2.OnOverall : DefaultOn, SkillBoost2?.GetCrystal()));
                ret.Add((SkillBoost3 != null ? SkillBoost3.OnOverall : DefaultOn, SkillBoost3?.GetCrystal()));
                ret.Add((SkillBoost4 != null ? SkillBoost4.OnOverall : DefaultOn, SkillBoost4?.GetCrystal()));
                ret.Add((SkillBoost5 != null ? SkillBoost5.OnOverall : DefaultOn, SkillBoost5?.GetCrystal()));
                ret.Add((SkillBoost6 != null ? SkillBoost6.OnOverall : DefaultOn, SkillBoost6?.GetCrystal()));
                ret.Add((Unknown, null));
                ret.Add((Height != null || DefaultOn, null));
                ret.Add((Weight != null || DefaultOn, null));
                ret.Add((Flags, null));
                ret.Add((Starting, null));
                ret.Add((BaseCarryWeight, null));
                ret.Add((BaseMass, null));
                ret.Add((AccelerationRate, null));
                ret.Add((DecelerationRate, null));
                ret.Add((Size, null));
                ret.Add((HeadBipedObject, null));
                ret.Add((HairBipedObject, null));
                ret.Add((InjuredHealthPercent, null));
                ret.Add((ShieldBipedObject, null));
                ret.Add((Regen, null));
                ret.Add((UnarmedDamage, null));
                ret.Add((UnarmedReach, null));
                ret.Add((BodyBipedObject, null));
                ret.Add((AimAngleTolerance, null));
                ret.Add((FlightRadius, null));
                ret.Add((AngularAccelerationRate, null));
                ret.Add((AngularTolerance, null));
                ret.Add((MountData != null ? MountData.OnOverall : DefaultOn, MountData?.GetCrystal()));
                ret.Add((SkeletalModel != null || DefaultOn, null));
                ret.Add((MovementTypeNames, null));
                ret.Add((Voices != null || DefaultOn, null));
                ret.Add((DecapitateArmors != null || DefaultOn, null));
                ret.Add((DefaultHairColors != null || DefaultOn, null));
                ret.Add((NumberOfTintsInList, null));
                ret.Add((FacegenMainClamp, null));
                ret.Add((FacegenFaceClamp, null));
                ret.Add((AttackRace, null));
                ret.Add((Attacks == null ? DefaultOn : !Attacks.GetCrystal().CopyNothing, Attacks?.GetCrystal()));
                ret.Add((BodyData != null || DefaultOn, null));
                ret.Add((Hairs, null));
                ret.Add((Eyes, null));
                ret.Add((BodyPartData, null));
                ret.Add((BehaviorGraph != null || DefaultOn, null));
                ret.Add((MaterialType, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((DecapitationFX, null));
                ret.Add((OpenLootSound, null));
                ret.Add((CloseLootSound, null));
                ret.Add((BipedObjectNames, null));
                ret.Add((MovementTypes == null ? DefaultOn : !MovementTypes.GetCrystal().CopyNothing, MovementTypes?.GetCrystal()));
                ret.Add((EquipmentFlags, null));
                ret.Add((EquipmentSlots, null));
                ret.Add((UnarmedEquipSlot, null));
                ret.Add((FaceFxPhonemes != null ? FaceFxPhonemes.OnOverall : DefaultOn, FaceFxPhonemes?.GetCrystal()));
                ret.Add((BaseMovementDefaultWalk, null));
                ret.Add((BaseMovementDefaultRun, null));
                ret.Add((BaseMovementDefaultSwim, null));
                ret.Add((BaseMovementDefaultFly, null));
                ret.Add((BaseMovementDefaultSneak, null));
                ret.Add((BaseMovementDefaultSprint, null));
                ret.Add((HeadData != null || DefaultOn, null));
                ret.Add((MorphRace, null));
                ret.Add((ArmorRace, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Race_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => RaceCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceSetterCommon.Instance.RemapLinks(this, mapping);
        public Race(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Race(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Race(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Race(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Race(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Race>.ToString(this);
        }

        protected override Type LinkType => typeof(IRace);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        [Flags]
        public enum DATADataType
        {
            Break0 = 1
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => RaceCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => RaceSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => RaceSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => RaceSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRaceGetter rhs) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRaceGetter? obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Race CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Race item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((RaceSetterCommon)((IRaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Race GetNew()
        {
            return new Race();
        }

    }
    #endregion

    #region Interface
    public partial interface IRace :
        IAssetLinkContainer,
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IRaceInternal>,
        INamed,
        INamedRequired,
        IRaceGetter,
        IRelatable,
        ISkyrimMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TranslatedString Description { get; set; }
        new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; set; }
        new IFormLinkNullable<IArmorGetter> Skin { get; set; }
        new BodyTemplate? BodyTemplate { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new SkillBoost SkillBoost0 { get; set; }
        new SkillBoost SkillBoost1 { get; set; }
        new SkillBoost SkillBoost2 { get; set; }
        new SkillBoost SkillBoost3 { get; set; }
        new SkillBoost SkillBoost4 { get; set; }
        new SkillBoost SkillBoost5 { get; set; }
        new SkillBoost SkillBoost6 { get; set; }
        new Int16 Unknown { get; set; }
        new IGenderedItem<Single> Height { get; set; }
        new IGenderedItem<Single> Weight { get; set; }
        new Race.Flag Flags { get; set; }
        new IDictionary<BasicStat, Single> Starting { get; }
        new Single BaseCarryWeight { get; set; }
        new Single BaseMass { get; set; }
        new Single AccelerationRate { get; set; }
        new Single DecelerationRate { get; set; }
        new Size Size { get; set; }
        new BipedObject HeadBipedObject { get; set; }
        new BipedObject HairBipedObject { get; set; }
        new Single InjuredHealthPercent { get; set; }
        new BipedObject ShieldBipedObject { get; set; }
        new IDictionary<BasicStat, Single> Regen { get; }
        new Single UnarmedDamage { get; set; }
        new Single UnarmedReach { get; set; }
        new BipedObject BodyBipedObject { get; set; }
        new Single AimAngleTolerance { get; set; }
        new Single FlightRadius { get; set; }
        new Single AngularAccelerationRate { get; set; }
        new Single AngularTolerance { get; set; }
        new MountData MountData { get; set; }
        new IGenderedItem<SimpleModel?>? SkeletalModel { get; set; }
        new ExtendedList<String> MovementTypeNames { get; }
        new IGenderedItem<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; set; }
        new IGenderedItem<IFormLinkGetter<IArmorGetter>>? DecapitateArmors { get; set; }
        new IGenderedItem<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors { get; set; }
        new UInt16? NumberOfTintsInList { get; set; }
        new Single FacegenMainClamp { get; set; }
        new Single FacegenFaceClamp { get; set; }
        new IFormLinkNullable<IRaceGetter> AttackRace { get; set; }
        new ExtendedList<Attack> Attacks { get; }
        new IGenderedItem<BodyData?> BodyData { get; set; }
        new ExtendedList<IFormLinkGetter<IHairGetter>>? Hairs { get; set; }
        new ExtendedList<IFormLinkGetter<IEyesGetter>>? Eyes { get; set; }
        new IFormLinkNullable<IBodyPartDataGetter> BodyPartData { get; set; }
        new IGenderedItem<Model?> BehaviorGraph { get; set; }
        new IFormLinkNullable<IMaterialTypeGetter> MaterialType { get; set; }
        new IFormLinkNullable<IImpactDataSetGetter> ImpactDataSet { get; set; }
        new IFormLinkNullable<IArtObjectGetter> DecapitationFX { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> OpenLootSound { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> CloseLootSound { get; set; }
        new IDictionary<BipedObject, String> BipedObjectNames { get; }
        new ExtendedList<RaceMovementType> MovementTypes { get; }
        new EquipTypeFlag? EquipmentFlags { get; set; }
        new ExtendedList<IFormLinkGetter<IEquipTypeGetter>> EquipmentSlots { get; }
        new IFormLinkNullable<IEquipTypeGetter> UnarmedEquipSlot { get; set; }
        new FaceFxPhonemes FaceFxPhonemes { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultWalk { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultRun { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultSwim { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultFly { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultSneak { get; set; }
        new IFormLinkNullable<IMovementTypeGetter> BaseMovementDefaultSprint { get; set; }
        new IGenderedItem<HeadData?>? HeadData { get; set; }
        new IFormLinkNullable<IRaceGetter> MorphRace { get; set; }
        new IFormLinkNullable<IRaceGetter> ArmorRace { get; set; }
        new Race.DATADataType DATADataTypeState { get; set; }
        #region Mutagen
        new Race.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IRaceInternal :
        ISkyrimMajorRecordInternal,
        IRace,
        IRaceGetter
    {
        new IGenderedItem<Single> Height { get; set; }
        new IGenderedItem<Single> Weight { get; set; }
        new IDictionary<BasicStat, Single> Starting { get; }
        new IDictionary<BasicStat, Single> Regen { get; }
        new IGenderedItem<SimpleModel?>? SkeletalModel { get; set; }
        new IGenderedItem<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; set; }
        new IGenderedItem<IFormLinkGetter<IArmorGetter>>? DecapitateArmors { get; set; }
        new IGenderedItem<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors { get; set; }
        new IGenderedItem<BodyData?> BodyData { get; set; }
        new IGenderedItem<Model?> BehaviorGraph { get; set; }
        new IDictionary<BipedObject, String> BipedObjectNames { get; }
        new IGenderedItem<HeadData?>? HeadData { get; set; }
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.RACE)]
    public partial interface IRaceGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IRaceGetter>,
        IMapsToGetter<IRaceGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IRelatableGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        ITranslatedStringGetter Description { get; }
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; }
        IFormLinkNullableGetter<IArmorGetter> Skin { get; }
        IBodyTemplateGetter? BodyTemplate { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        ISkillBoostGetter SkillBoost0 { get; }
        ISkillBoostGetter SkillBoost1 { get; }
        ISkillBoostGetter SkillBoost2 { get; }
        ISkillBoostGetter SkillBoost3 { get; }
        ISkillBoostGetter SkillBoost4 { get; }
        ISkillBoostGetter SkillBoost5 { get; }
        ISkillBoostGetter SkillBoost6 { get; }
        Int16 Unknown { get; }
        IGenderedItemGetter<Single> Height { get; }
        IGenderedItemGetter<Single> Weight { get; }
        Race.Flag Flags { get; }
        IReadOnlyDictionary<BasicStat, Single> Starting { get; }
        Single BaseCarryWeight { get; }
        Single BaseMass { get; }
        Single AccelerationRate { get; }
        Single DecelerationRate { get; }
        Size Size { get; }
        BipedObject HeadBipedObject { get; }
        BipedObject HairBipedObject { get; }
        Single InjuredHealthPercent { get; }
        BipedObject ShieldBipedObject { get; }
        IReadOnlyDictionary<BasicStat, Single> Regen { get; }
        Single UnarmedDamage { get; }
        Single UnarmedReach { get; }
        BipedObject BodyBipedObject { get; }
        Single AimAngleTolerance { get; }
        Single FlightRadius { get; }
        Single AngularAccelerationRate { get; }
        Single AngularTolerance { get; }
        IMountDataGetter MountData { get; }
        IGenderedItemGetter<ISimpleModelGetter?>? SkeletalModel { get; }
        IReadOnlyList<String> MovementTypeNames { get; }
        IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> Voices { get; }
        IGenderedItemGetter<IFormLinkGetter<IArmorGetter>>? DecapitateArmors { get; }
        IGenderedItemGetter<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors { get; }
        UInt16? NumberOfTintsInList { get; }
        Single FacegenMainClamp { get; }
        Single FacegenFaceClamp { get; }
        IFormLinkNullableGetter<IRaceGetter> AttackRace { get; }
        IReadOnlyList<IAttackGetter> Attacks { get; }
        IGenderedItemGetter<IBodyDataGetter?> BodyData { get; }
        IReadOnlyList<IFormLinkGetter<IHairGetter>>? Hairs { get; }
        IReadOnlyList<IFormLinkGetter<IEyesGetter>>? Eyes { get; }
        IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData { get; }
        IGenderedItemGetter<IModelGetter?> BehaviorGraph { get; }
        IFormLinkNullableGetter<IMaterialTypeGetter> MaterialType { get; }
        IFormLinkNullableGetter<IImpactDataSetGetter> ImpactDataSet { get; }
        IFormLinkNullableGetter<IArtObjectGetter> DecapitationFX { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> OpenLootSound { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> CloseLootSound { get; }
        IReadOnlyDictionary<BipedObject, String> BipedObjectNames { get; }
        IReadOnlyList<IRaceMovementTypeGetter> MovementTypes { get; }
        EquipTypeFlag? EquipmentFlags { get; }
        IReadOnlyList<IFormLinkGetter<IEquipTypeGetter>> EquipmentSlots { get; }
        IFormLinkNullableGetter<IEquipTypeGetter> UnarmedEquipSlot { get; }
        IFaceFxPhonemesGetter FaceFxPhonemes { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultWalk { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultRun { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSwim { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultFly { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSneak { get; }
        IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSprint { get; }
        IGenderedItemGetter<IHeadDataGetter?>? HeadData { get; }
        IFormLinkNullableGetter<IRaceGetter> MorphRace { get; }
        IFormLinkNullableGetter<IRaceGetter> ArmorRace { get; }
        Race.DATADataType DATADataTypeState { get; }

        #region Mutagen
        Race.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class RaceMixIn
    {
        public static void Clear(this IRaceInternal item)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Race.Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IRaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRaceGetter item,
            IRaceGetter rhs,
            Race.TranslationMask? equalsMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Race Duplicate(
            this IRaceGetter item,
            FormKey formKey,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Race Duplicate(
            this IRaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Race_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        Name = 7,
        Description = 8,
        ActorEffect = 9,
        Skin = 10,
        BodyTemplate = 11,
        Keywords = 12,
        SkillBoost0 = 13,
        SkillBoost1 = 14,
        SkillBoost2 = 15,
        SkillBoost3 = 16,
        SkillBoost4 = 17,
        SkillBoost5 = 18,
        SkillBoost6 = 19,
        Unknown = 20,
        Height = 21,
        Weight = 22,
        Flags = 23,
        Starting = 24,
        BaseCarryWeight = 25,
        BaseMass = 26,
        AccelerationRate = 27,
        DecelerationRate = 28,
        Size = 29,
        HeadBipedObject = 30,
        HairBipedObject = 31,
        InjuredHealthPercent = 32,
        ShieldBipedObject = 33,
        Regen = 34,
        UnarmedDamage = 35,
        UnarmedReach = 36,
        BodyBipedObject = 37,
        AimAngleTolerance = 38,
        FlightRadius = 39,
        AngularAccelerationRate = 40,
        AngularTolerance = 41,
        MountData = 42,
        SkeletalModel = 43,
        MovementTypeNames = 44,
        Voices = 45,
        DecapitateArmors = 46,
        DefaultHairColors = 47,
        NumberOfTintsInList = 48,
        FacegenMainClamp = 49,
        FacegenFaceClamp = 50,
        AttackRace = 51,
        Attacks = 52,
        BodyData = 53,
        Hairs = 54,
        Eyes = 55,
        BodyPartData = 56,
        BehaviorGraph = 57,
        MaterialType = 58,
        ImpactDataSet = 59,
        DecapitationFX = 60,
        OpenLootSound = 61,
        CloseLootSound = 62,
        BipedObjectNames = 63,
        MovementTypes = 64,
        EquipmentFlags = 65,
        EquipmentSlots = 66,
        UnarmedEquipSlot = 67,
        FaceFxPhonemes = 68,
        BaseMovementDefaultWalk = 69,
        BaseMovementDefaultRun = 70,
        BaseMovementDefaultSwim = 71,
        BaseMovementDefaultFly = 72,
        BaseMovementDefaultSneak = 73,
        BaseMovementDefaultSprint = 74,
        HeadData = 75,
        MorphRace = 76,
        ArmorRace = 77,
        DATADataTypeState = 78,
    }
    #endregion

    #region Registration
    internal partial class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 72;

        public const ushort FieldCount = 79;

        public static readonly Type MaskType = typeof(Race.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race.ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type? InternalSetterType = typeof(IRaceInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.RACE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.RACE);
            var all = RecordCollection.Factory(
                RecordTypes.RACE,
                RecordTypes.FULL,
                RecordTypes.DESC,
                RecordTypes.SPLO,
                RecordTypes.SPCT,
                RecordTypes.WNAM,
                RecordTypes.BODT,
                RecordTypes.BOD2,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.DATA,
                RecordTypes.MNAM,
                RecordTypes.FNAM,
                RecordTypes.ANAM,
                RecordTypes.MTNM,
                RecordTypes.VTCK,
                RecordTypes.DNAM,
                RecordTypes.HCLF,
                RecordTypes.TINL,
                RecordTypes.PNAM,
                RecordTypes.UNAM,
                RecordTypes.ATKR,
                RecordTypes.ATKD,
                RecordTypes.ATKE,
                RecordTypes.NAM1,
                RecordTypes.HNAM,
                RecordTypes.ENAM,
                RecordTypes.GNAM,
                RecordTypes.NAM3,
                RecordTypes.NAM4,
                RecordTypes.NAM5,
                RecordTypes.NAM7,
                RecordTypes.ONAM,
                RecordTypes.LNAM,
                RecordTypes.NAME,
                RecordTypes.MTYP,
                RecordTypes.SPED,
                RecordTypes.VNAM,
                RecordTypes.QNAM,
                RecordTypes.UNES,
                RecordTypes.PHTN,
                RecordTypes.PHWT,
                RecordTypes.WKMV,
                RecordTypes.RNMV,
                RecordTypes.SWMV,
                RecordTypes.FLMV,
                RecordTypes.SNMV,
                RecordTypes.SPMV,
                RecordTypes.NAM0,
                RecordTypes.RPRF,
                RecordTypes.FTSF,
                RecordTypes.AHCF,
                RecordTypes.DFTF,
                RecordTypes.NAM8,
                RecordTypes.RNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static RecordTypeConverter SkeletalModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.ANAM));
        public static readonly Type BinaryWriteTranslation = typeof(RaceBinaryWriteTranslation);
        public static RecordTypeConverter HeadDataFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.RPRM,
                RecordTypes.RPRF),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.FTSM,
                RecordTypes.FTSF),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.AHCM,
                RecordTypes.AHCF),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.DFTM,
                RecordTypes.DFTF));
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class RaceSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly RaceSetterCommon Instance = new RaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description.Clear();
            item.ActorEffect = null;
            item.Skin.Clear();
            item.BodyTemplate = null;
            item.Keywords = null;
            item.SkillBoost0.Clear();
            item.SkillBoost1.Clear();
            item.SkillBoost2.Clear();
            item.SkillBoost3.Clear();
            item.SkillBoost4.Clear();
            item.SkillBoost5.Clear();
            item.SkillBoost6.Clear();
            item.Unknown = default(Int16);
            item.Height.Male = default(Single);
            item.Height.Female = default(Single);
            item.Weight.Male = default(Single);
            item.Weight.Female = default(Single);
            item.Flags = default(Race.Flag);
            item.Starting.Clear();
            item.BaseCarryWeight = default(Single);
            item.BaseMass = default(Single);
            item.AccelerationRate = default(Single);
            item.DecelerationRate = default(Single);
            item.Size = default(Size);
            item.HeadBipedObject = Race.HeadBipedObjectDefault;
            item.HairBipedObject = Race.HairBipedObjectDefault;
            item.InjuredHealthPercent = default(Single);
            item.ShieldBipedObject = Race.ShieldBipedObjectDefault;
            item.Regen.Clear();
            item.UnarmedDamage = default(Single);
            item.UnarmedReach = default(Single);
            item.BodyBipedObject = Race.BodyBipedObjectDefault;
            item.AimAngleTolerance = default(Single);
            item.FlightRadius = default(Single);
            item.AngularAccelerationRate = default(Single);
            item.AngularTolerance = default(Single);
            item.MountData.Clear();
            item.SkeletalModel = null;
            item.MovementTypeNames.Clear();
            item.Voices.Male = FormLink<IVoiceTypeGetter>.Null;
            item.Voices.Female = FormLink<IVoiceTypeGetter>.Null;
            item.DecapitateArmors = null;
            item.DefaultHairColors = null;
            item.NumberOfTintsInList = default;
            item.FacegenMainClamp = default(Single);
            item.FacegenFaceClamp = default(Single);
            item.AttackRace.Clear();
            item.Attacks.Clear();
            item.BodyData.Male = null;
            item.BodyData.Female = null;
            item.Hairs = null;
            item.Eyes = null;
            item.BodyPartData.Clear();
            item.BehaviorGraph.Male = null;
            item.BehaviorGraph.Female = null;
            item.MaterialType.Clear();
            item.ImpactDataSet.Clear();
            item.DecapitationFX.Clear();
            item.OpenLootSound.Clear();
            item.CloseLootSound.Clear();
            item.BipedObjectNames.Clear();
            item.MovementTypes.Clear();
            item.EquipmentFlags = default;
            item.EquipmentSlots.Clear();
            item.UnarmedEquipSlot.Clear();
            item.FaceFxPhonemes.Clear();
            item.BaseMovementDefaultWalk.Clear();
            item.BaseMovementDefaultRun.Clear();
            item.BaseMovementDefaultSwim.Clear();
            item.BaseMovementDefaultFly.Clear();
            item.BaseMovementDefaultSneak.Clear();
            item.BaseMovementDefaultSprint.Clear();
            item.HeadData = null;
            item.MorphRace.Clear();
            item.ArmorRace.Clear();
            item.DATADataTypeState = default(Race.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IRace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.ActorEffect?.RemapLinks(mapping);
            obj.Skin.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.SkeletalModel?.RemapLinks(mapping);
            obj.Voices.RemapLinks(mapping);
            obj.DecapitateArmors?.RemapLinks(mapping);
            obj.DefaultHairColors?.RemapLinks(mapping);
            obj.AttackRace.Relink(mapping);
            obj.Attacks.RemapLinks(mapping);
            obj.BodyData.RemapLinks(mapping);
            obj.Hairs?.RemapLinks(mapping);
            obj.Eyes?.RemapLinks(mapping);
            obj.BodyPartData.Relink(mapping);
            obj.BehaviorGraph.RemapLinks(mapping);
            obj.MaterialType.Relink(mapping);
            obj.ImpactDataSet.Relink(mapping);
            obj.DecapitationFX.Relink(mapping);
            obj.OpenLootSound.Relink(mapping);
            obj.CloseLootSound.Relink(mapping);
            obj.MovementTypes.RemapLinks(mapping);
            obj.EquipmentSlots.RemapLinks(mapping);
            obj.UnarmedEquipSlot.Relink(mapping);
            obj.BaseMovementDefaultWalk.Relink(mapping);
            obj.BaseMovementDefaultRun.Relink(mapping);
            obj.BaseMovementDefaultSwim.Relink(mapping);
            obj.BaseMovementDefaultFly.Relink(mapping);
            obj.BaseMovementDefaultSneak.Relink(mapping);
            obj.BaseMovementDefaultSprint.Relink(mapping);
            obj.HeadData?.RemapLinks(mapping);
            obj.MorphRace.Relink(mapping);
            obj.ArmorRace.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IRace obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.SkeletalModel is {} SkeletalModelItem)
            {
                foreach (var item in SkeletalModelItem.WhereNotNull().SelectMany(f => f.EnumerateListedAssetLinks()))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.BodyData.WhereNotNull().SelectMany(f => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            foreach (var item in obj.BehaviorGraph.WhereNotNull().SelectMany(f => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            if (obj.HeadData is {} HeadDataItem)
            {
                foreach (var item in HeadDataItem.WhereNotNull().SelectMany(f => f.EnumerateListedAssetLinks()))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IRace obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.SkeletalModel?.ForEach(x => x?.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.BodyData.ForEach(x => x?.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.BehaviorGraph.ForEach(x => x?.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.HeadData?.ForEach(x => x?.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IRaceInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class RaceCommon : SkyrimMajorRecordCommon
    {
        public new static readonly RaceCommon Instance = new RaceCommon();

        public Race.Mask<bool> GetEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.ActorEffect = item.ActorEffect.CollectionEqualsHelper(
                rhs.ActorEffect,
                (l, r) => object.Equals(l, r),
                include);
            ret.Skin = item.Skin.Equals(rhs.Skin);
            ret.BodyTemplate = EqualsMaskHelper.EqualsHelper(
                item.BodyTemplate,
                rhs.BodyTemplate,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.SkillBoost0 = MaskItemExt.Factory(item.SkillBoost0.GetEqualsMask(rhs.SkillBoost0, include), include);
            ret.SkillBoost1 = MaskItemExt.Factory(item.SkillBoost1.GetEqualsMask(rhs.SkillBoost1, include), include);
            ret.SkillBoost2 = MaskItemExt.Factory(item.SkillBoost2.GetEqualsMask(rhs.SkillBoost2, include), include);
            ret.SkillBoost3 = MaskItemExt.Factory(item.SkillBoost3.GetEqualsMask(rhs.SkillBoost3, include), include);
            ret.SkillBoost4 = MaskItemExt.Factory(item.SkillBoost4.GetEqualsMask(rhs.SkillBoost4, include), include);
            ret.SkillBoost5 = MaskItemExt.Factory(item.SkillBoost5.GetEqualsMask(rhs.SkillBoost5, include), include);
            ret.SkillBoost6 = MaskItemExt.Factory(item.SkillBoost6.GetEqualsMask(rhs.SkillBoost6, include), include);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Height = new GenderedItem<bool>(
                male: item.Height.Male.EqualsWithin(rhs.Height.Male),
                female: item.Height.Female.EqualsWithin(rhs.Height.Female));
            ret.Weight = new GenderedItem<bool>(
                male: item.Weight.Male.EqualsWithin(rhs.Weight.Male),
                female: item.Weight.Female.EqualsWithin(rhs.Weight.Female));
            ret.Flags = item.Flags == rhs.Flags;
            ret.Starting = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.Starting,
                rhs: rhs.Starting,
                include: include);
            ret.BaseCarryWeight = item.BaseCarryWeight.EqualsWithin(rhs.BaseCarryWeight);
            ret.BaseMass = item.BaseMass.EqualsWithin(rhs.BaseMass);
            ret.AccelerationRate = item.AccelerationRate.EqualsWithin(rhs.AccelerationRate);
            ret.DecelerationRate = item.DecelerationRate.EqualsWithin(rhs.DecelerationRate);
            ret.Size = item.Size == rhs.Size;
            ret.HeadBipedObject = item.HeadBipedObject == rhs.HeadBipedObject;
            ret.HairBipedObject = item.HairBipedObject == rhs.HairBipedObject;
            ret.InjuredHealthPercent = item.InjuredHealthPercent.EqualsWithin(rhs.InjuredHealthPercent);
            ret.ShieldBipedObject = item.ShieldBipedObject == rhs.ShieldBipedObject;
            ret.Regen = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.Regen,
                rhs: rhs.Regen,
                include: include);
            ret.UnarmedDamage = item.UnarmedDamage.EqualsWithin(rhs.UnarmedDamage);
            ret.UnarmedReach = item.UnarmedReach.EqualsWithin(rhs.UnarmedReach);
            ret.BodyBipedObject = item.BodyBipedObject == rhs.BodyBipedObject;
            ret.AimAngleTolerance = item.AimAngleTolerance.EqualsWithin(rhs.AimAngleTolerance);
            ret.FlightRadius = item.FlightRadius.EqualsWithin(rhs.FlightRadius);
            ret.AngularAccelerationRate = item.AngularAccelerationRate.EqualsWithin(rhs.AngularAccelerationRate);
            ret.AngularTolerance = item.AngularTolerance.EqualsWithin(rhs.AngularTolerance);
            ret.MountData = MaskItemExt.Factory(item.MountData.GetEqualsMask(rhs.MountData, include), include);
            ret.SkeletalModel = GenderedItem.EqualityMaskHelper(
                lhs: item.SkeletalModel,
                rhs: rhs.SkeletalModel,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.MovementTypeNames = item.MovementTypeNames.CollectionEqualsHelper(
                rhs.MovementTypeNames,
                (l, r) => string.Equals(l, r),
                include);
            ret.Voices = new GenderedItem<bool>(
                male: object.Equals(item.Voices.Male, rhs.Voices.Male),
                female: object.Equals(item.Voices.Female, rhs.Voices.Female));
            ret.DecapitateArmors = GenderedItem.EqualityMaskHelper(
                lhs: item.DecapitateArmors,
                rhs: rhs.DecapitateArmors,
                maskGetter: (l, r, i) => EqualityComparer<IFormLinkGetter<IArmorGetter>>.Default.Equals(l, r),
                include: include);
            ret.DefaultHairColors = GenderedItem.EqualityMaskHelper(
                lhs: item.DefaultHairColors,
                rhs: rhs.DefaultHairColors,
                maskGetter: (l, r, i) => EqualityComparer<IFormLinkGetter<IColorRecordGetter>>.Default.Equals(l, r),
                include: include);
            ret.NumberOfTintsInList = item.NumberOfTintsInList == rhs.NumberOfTintsInList;
            ret.FacegenMainClamp = item.FacegenMainClamp.EqualsWithin(rhs.FacegenMainClamp);
            ret.FacegenFaceClamp = item.FacegenFaceClamp.EqualsWithin(rhs.FacegenFaceClamp);
            ret.AttackRace = item.AttackRace.Equals(rhs.AttackRace);
            ret.Attacks = item.Attacks.CollectionEqualsHelper(
                rhs.Attacks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyData = GenderedItem.EqualityMaskHelper(
                lhs: item.BodyData,
                rhs: rhs.BodyData,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.Hairs = item.Hairs.CollectionEqualsHelper(
                rhs.Hairs,
                (l, r) => object.Equals(l, r),
                include);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.BodyPartData = item.BodyPartData.Equals(rhs.BodyPartData);
            ret.BehaviorGraph = GenderedItem.EqualityMaskHelper(
                lhs: item.BehaviorGraph,
                rhs: rhs.BehaviorGraph,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.MaterialType = item.MaterialType.Equals(rhs.MaterialType);
            ret.ImpactDataSet = item.ImpactDataSet.Equals(rhs.ImpactDataSet);
            ret.DecapitationFX = item.DecapitationFX.Equals(rhs.DecapitationFX);
            ret.OpenLootSound = item.OpenLootSound.Equals(rhs.OpenLootSound);
            ret.CloseLootSound = item.CloseLootSound.Equals(rhs.CloseLootSound);
            ret.BipedObjectNames = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.BipedObjectNames,
                rhs: rhs.BipedObjectNames,
                include: include);
            ret.MovementTypes = item.MovementTypes.CollectionEqualsHelper(
                rhs.MovementTypes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EquipmentFlags = item.EquipmentFlags == rhs.EquipmentFlags;
            ret.EquipmentSlots = item.EquipmentSlots.CollectionEqualsHelper(
                rhs.EquipmentSlots,
                (l, r) => object.Equals(l, r),
                include);
            ret.UnarmedEquipSlot = item.UnarmedEquipSlot.Equals(rhs.UnarmedEquipSlot);
            ret.FaceFxPhonemes = MaskItemExt.Factory(item.FaceFxPhonemes.GetEqualsMask(rhs.FaceFxPhonemes, include), include);
            ret.BaseMovementDefaultWalk = item.BaseMovementDefaultWalk.Equals(rhs.BaseMovementDefaultWalk);
            ret.BaseMovementDefaultRun = item.BaseMovementDefaultRun.Equals(rhs.BaseMovementDefaultRun);
            ret.BaseMovementDefaultSwim = item.BaseMovementDefaultSwim.Equals(rhs.BaseMovementDefaultSwim);
            ret.BaseMovementDefaultFly = item.BaseMovementDefaultFly.Equals(rhs.BaseMovementDefaultFly);
            ret.BaseMovementDefaultSneak = item.BaseMovementDefaultSneak.Equals(rhs.BaseMovementDefaultSneak);
            ret.BaseMovementDefaultSprint = item.BaseMovementDefaultSprint.Equals(rhs.BaseMovementDefaultSprint);
            ret.HeadData = GenderedItem.EqualityMaskHelper(
                lhs: item.HeadData,
                rhs: rhs.HeadData,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.MorphRace = item.MorphRace.Equals(rhs.MorphRace);
            ret.ArmorRace = item.ArmorRace.Equals(rhs.ArmorRace);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IRaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Race =>");
            }
            else
            {
                sb.AppendLine($"{name} (Race) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IRaceGetter item,
            StructuredStringBuilder sb,
            Race.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Description ?? true)
            {
                sb.AppendItem(item.Description, "Description");
            }
            if ((printMask?.ActorEffect?.Overall ?? true)
                && item.ActorEffect is {} ActorEffectItem)
            {
                sb.AppendLine("ActorEffect =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActorEffectItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Skin ?? true)
            {
                sb.AppendItem(item.Skin.FormKeyNullable, "Skin");
            }
            if ((printMask?.BodyTemplate?.Overall ?? true)
                && item.BodyTemplate is {} BodyTemplateItem)
            {
                BodyTemplateItem?.Print(sb, "BodyTemplate");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.SkillBoost0?.Overall ?? true)
            {
                item.SkillBoost0?.Print(sb, "SkillBoost0");
            }
            if (printMask?.SkillBoost1?.Overall ?? true)
            {
                item.SkillBoost1?.Print(sb, "SkillBoost1");
            }
            if (printMask?.SkillBoost2?.Overall ?? true)
            {
                item.SkillBoost2?.Print(sb, "SkillBoost2");
            }
            if (printMask?.SkillBoost3?.Overall ?? true)
            {
                item.SkillBoost3?.Print(sb, "SkillBoost3");
            }
            if (printMask?.SkillBoost4?.Overall ?? true)
            {
                item.SkillBoost4?.Print(sb, "SkillBoost4");
            }
            if (printMask?.SkillBoost5?.Overall ?? true)
            {
                item.SkillBoost5?.Print(sb, "SkillBoost5");
            }
            if (printMask?.SkillBoost6?.Overall ?? true)
            {
                item.SkillBoost6?.Print(sb, "SkillBoost6");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (true)
            {
                item.Height.Print(sb, "Height");
            }
            if (true)
            {
                item.Weight.Print(sb, "Weight");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Starting?.Overall ?? true)
            {
                sb.AppendLine("Starting =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Starting)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value);
                        }
                    }
                }
            }
            if (printMask?.BaseCarryWeight ?? true)
            {
                sb.AppendItem(item.BaseCarryWeight, "BaseCarryWeight");
            }
            if (printMask?.BaseMass ?? true)
            {
                sb.AppendItem(item.BaseMass, "BaseMass");
            }
            if (printMask?.AccelerationRate ?? true)
            {
                sb.AppendItem(item.AccelerationRate, "AccelerationRate");
            }
            if (printMask?.DecelerationRate ?? true)
            {
                sb.AppendItem(item.DecelerationRate, "DecelerationRate");
            }
            if (printMask?.Size ?? true)
            {
                sb.AppendItem(item.Size, "Size");
            }
            if (printMask?.HeadBipedObject ?? true)
            {
                sb.AppendItem(item.HeadBipedObject, "HeadBipedObject");
            }
            if (printMask?.HairBipedObject ?? true)
            {
                sb.AppendItem(item.HairBipedObject, "HairBipedObject");
            }
            if (printMask?.InjuredHealthPercent ?? true)
            {
                sb.AppendItem(item.InjuredHealthPercent, "InjuredHealthPercent");
            }
            if (printMask?.ShieldBipedObject ?? true)
            {
                sb.AppendItem(item.ShieldBipedObject, "ShieldBipedObject");
            }
            if (printMask?.Regen?.Overall ?? true)
            {
                sb.AppendLine("Regen =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Regen)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value);
                        }
                    }
                }
            }
            if (printMask?.UnarmedDamage ?? true)
            {
                sb.AppendItem(item.UnarmedDamage, "UnarmedDamage");
            }
            if (printMask?.UnarmedReach ?? true)
            {
                sb.AppendItem(item.UnarmedReach, "UnarmedReach");
            }
            if (printMask?.BodyBipedObject ?? true)
            {
                sb.AppendItem(item.BodyBipedObject, "BodyBipedObject");
            }
            if (printMask?.AimAngleTolerance ?? true)
            {
                sb.AppendItem(item.AimAngleTolerance, "AimAngleTolerance");
            }
            if (printMask?.FlightRadius ?? true)
            {
                sb.AppendItem(item.FlightRadius, "FlightRadius");
            }
            if (printMask?.AngularAccelerationRate ?? true)
            {
                sb.AppendItem(item.AngularAccelerationRate, "AngularAccelerationRate");
            }
            if (printMask?.AngularTolerance ?? true)
            {
                sb.AppendItem(item.AngularTolerance, "AngularTolerance");
            }
            if (printMask?.MountData?.Overall ?? true)
            {
                item.MountData?.Print(sb, "MountData");
            }
            if ((printMask?.SkeletalModel?.Overall ?? true)
                && item.SkeletalModel is {} SkeletalModelItem)
            {
                SkeletalModelItem?.Print(sb, "SkeletalModel");
            }
            if (printMask?.MovementTypeNames?.Overall ?? true)
            {
                sb.AppendLine("MovementTypeNames =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MovementTypeNames)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (true)
            {
                item.Voices.Print(sb, "Voices");
            }
            if ((printMask?.DecapitateArmors?.Overall ?? true)
                && item.DecapitateArmors is {} DecapitateArmorsItem)
            {
                DecapitateArmorsItem?.Print(sb, "DecapitateArmors");
            }
            if ((printMask?.DefaultHairColors?.Overall ?? true)
                && item.DefaultHairColors is {} DefaultHairColorsItem)
            {
                DefaultHairColorsItem?.Print(sb, "DefaultHairColors");
            }
            if ((printMask?.NumberOfTintsInList ?? true)
                && item.NumberOfTintsInList is {} NumberOfTintsInListItem)
            {
                sb.AppendItem(NumberOfTintsInListItem, "NumberOfTintsInList");
            }
            if (printMask?.FacegenMainClamp ?? true)
            {
                sb.AppendItem(item.FacegenMainClamp, "FacegenMainClamp");
            }
            if (printMask?.FacegenFaceClamp ?? true)
            {
                sb.AppendItem(item.FacegenFaceClamp, "FacegenFaceClamp");
            }
            if (printMask?.AttackRace ?? true)
            {
                sb.AppendItem(item.AttackRace.FormKeyNullable, "AttackRace");
            }
            if (printMask?.Attacks?.Overall ?? true)
            {
                sb.AppendLine("Attacks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Attacks)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (true)
            {
                item.BodyData.Print(sb, "BodyData");
            }
            if ((printMask?.Hairs?.Overall ?? true)
                && item.Hairs is {} HairsItem)
            {
                sb.AppendLine("Hairs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in HairsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Eyes?.Overall ?? true)
                && item.Eyes is {} EyesItem)
            {
                sb.AppendLine("Eyes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in EyesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.BodyPartData ?? true)
            {
                sb.AppendItem(item.BodyPartData.FormKeyNullable, "BodyPartData");
            }
            if (true)
            {
                item.BehaviorGraph.Print(sb, "BehaviorGraph");
            }
            if (printMask?.MaterialType ?? true)
            {
                sb.AppendItem(item.MaterialType.FormKeyNullable, "MaterialType");
            }
            if (printMask?.ImpactDataSet ?? true)
            {
                sb.AppendItem(item.ImpactDataSet.FormKeyNullable, "ImpactDataSet");
            }
            if (printMask?.DecapitationFX ?? true)
            {
                sb.AppendItem(item.DecapitationFX.FormKeyNullable, "DecapitationFX");
            }
            if (printMask?.OpenLootSound ?? true)
            {
                sb.AppendItem(item.OpenLootSound.FormKeyNullable, "OpenLootSound");
            }
            if (printMask?.CloseLootSound ?? true)
            {
                sb.AppendItem(item.CloseLootSound.FormKeyNullable, "CloseLootSound");
            }
            if ((printMask?.BipedObjectNames?.Overall ?? true)
                && item.BipedObjectNames is {} BipedObjectNamesItem)
            {
                sb.AppendLine("BipedObjectNames =>");
                using (sb.Brace())
                {
                    foreach (var subItem in BipedObjectNamesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value);
                        }
                    }
                }
            }
            if (printMask?.MovementTypes?.Overall ?? true)
            {
                sb.AppendLine("MovementTypes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MovementTypes)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.EquipmentFlags ?? true)
                && item.EquipmentFlags is {} EquipmentFlagsItem)
            {
                sb.AppendItem(EquipmentFlagsItem, "EquipmentFlags");
            }
            if (printMask?.EquipmentSlots?.Overall ?? true)
            {
                sb.AppendLine("EquipmentSlots =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.EquipmentSlots)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.UnarmedEquipSlot ?? true)
            {
                sb.AppendItem(item.UnarmedEquipSlot.FormKeyNullable, "UnarmedEquipSlot");
            }
            if (printMask?.FaceFxPhonemes?.Overall ?? true)
            {
                item.FaceFxPhonemes?.Print(sb, "FaceFxPhonemes");
            }
            if (printMask?.BaseMovementDefaultWalk ?? true)
            {
                sb.AppendItem(item.BaseMovementDefaultWalk.FormKeyNullable, "BaseMovementDefaultWalk");
            }
            if (printMask?.BaseMovementDefaultRun ?? true)
            {
                sb.AppendItem(item.BaseMovementDefaultRun.FormKeyNullable, "BaseMovementDefaultRun");
            }
            if (printMask?.BaseMovementDefaultSwim ?? true)
            {
                sb.AppendItem(item.BaseMovementDefaultSwim.FormKeyNullable, "BaseMovementDefaultSwim");
            }
            if (printMask?.BaseMovementDefaultFly ?? true)
            {
                sb.AppendItem(item.BaseMovementDefaultFly.FormKeyNullable, "BaseMovementDefaultFly");
            }
            if (printMask?.BaseMovementDefaultSneak ?? true)
            {
                sb.AppendItem(item.BaseMovementDefaultSneak.FormKeyNullable, "BaseMovementDefaultSneak");
            }
            if (printMask?.BaseMovementDefaultSprint ?? true)
            {
                sb.AppendItem(item.BaseMovementDefaultSprint.FormKeyNullable, "BaseMovementDefaultSprint");
            }
            if ((printMask?.HeadData?.Overall ?? true)
                && item.HeadData is {} HeadDataItem)
            {
                HeadDataItem?.Print(sb, "HeadData");
            }
            if (printMask?.MorphRace ?? true)
            {
                sb.AppendItem(item.MorphRace.FormKeyNullable, "MorphRace");
            }
            if (printMask?.ArmorRace ?? true)
            {
                sb.AppendItem(item.ArmorRace.FormKeyNullable, "ArmorRace");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                sb.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static Race_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Race_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceGetter? lhs,
            IRaceGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                if (!lhs.ActorEffect.SequenceEqualNullable(rhs.ActorEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                if (!lhs.Skin.Equals(rhs.Skin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyTemplate) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BodyTemplate, rhs.BodyTemplate, out var lhsBodyTemplate, out var rhsBodyTemplate, out var isBodyTemplateEqual))
                {
                    if (!((BodyTemplateCommon)((IBodyTemplateGetter)lhsBodyTemplate).CommonInstance()!).Equals(lhsBodyTemplate, rhsBodyTemplate, equalsMask?.GetSubCrystal((int)Race_FieldIndex.BodyTemplate))) return false;
                }
                else if (!isBodyTemplateEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost0) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SkillBoost0, rhs.SkillBoost0, out var lhsSkillBoost0, out var rhsSkillBoost0, out var isSkillBoost0Equal))
                {
                    if (!((SkillBoostCommon)((ISkillBoostGetter)lhsSkillBoost0).CommonInstance()!).Equals(lhsSkillBoost0, rhsSkillBoost0, equalsMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost0))) return false;
                }
                else if (!isSkillBoost0Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost1) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SkillBoost1, rhs.SkillBoost1, out var lhsSkillBoost1, out var rhsSkillBoost1, out var isSkillBoost1Equal))
                {
                    if (!((SkillBoostCommon)((ISkillBoostGetter)lhsSkillBoost1).CommonInstance()!).Equals(lhsSkillBoost1, rhsSkillBoost1, equalsMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost1))) return false;
                }
                else if (!isSkillBoost1Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost2) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SkillBoost2, rhs.SkillBoost2, out var lhsSkillBoost2, out var rhsSkillBoost2, out var isSkillBoost2Equal))
                {
                    if (!((SkillBoostCommon)((ISkillBoostGetter)lhsSkillBoost2).CommonInstance()!).Equals(lhsSkillBoost2, rhsSkillBoost2, equalsMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost2))) return false;
                }
                else if (!isSkillBoost2Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost3) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SkillBoost3, rhs.SkillBoost3, out var lhsSkillBoost3, out var rhsSkillBoost3, out var isSkillBoost3Equal))
                {
                    if (!((SkillBoostCommon)((ISkillBoostGetter)lhsSkillBoost3).CommonInstance()!).Equals(lhsSkillBoost3, rhsSkillBoost3, equalsMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost3))) return false;
                }
                else if (!isSkillBoost3Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost4) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SkillBoost4, rhs.SkillBoost4, out var lhsSkillBoost4, out var rhsSkillBoost4, out var isSkillBoost4Equal))
                {
                    if (!((SkillBoostCommon)((ISkillBoostGetter)lhsSkillBoost4).CommonInstance()!).Equals(lhsSkillBoost4, rhsSkillBoost4, equalsMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost4))) return false;
                }
                else if (!isSkillBoost4Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost5) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SkillBoost5, rhs.SkillBoost5, out var lhsSkillBoost5, out var rhsSkillBoost5, out var isSkillBoost5Equal))
                {
                    if (!((SkillBoostCommon)((ISkillBoostGetter)lhsSkillBoost5).CommonInstance()!).Equals(lhsSkillBoost5, rhsSkillBoost5, equalsMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost5))) return false;
                }
                else if (!isSkillBoost5Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost6) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SkillBoost6, rhs.SkillBoost6, out var lhsSkillBoost6, out var rhsSkillBoost6, out var isSkillBoost6Equal))
                {
                    if (!((SkillBoostCommon)((ISkillBoostGetter)lhsSkillBoost6).CommonInstance()!).Equals(lhsSkillBoost6, rhsSkillBoost6, equalsMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost6))) return false;
                }
                else if (!isSkillBoost6Equal) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Height) ?? true))
            {
                if (!Equals(lhs.Height, rhs.Height)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Weight) ?? true))
            {
                if (!Equals(lhs.Weight, rhs.Weight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Starting) ?? true))
            {
                if (!lhs.Starting.SequenceEqualNullable(rhs.Starting)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseCarryWeight) ?? true))
            {
                if (!lhs.BaseCarryWeight.EqualsWithin(rhs.BaseCarryWeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMass) ?? true))
            {
                if (!lhs.BaseMass.EqualsWithin(rhs.BaseMass)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AccelerationRate) ?? true))
            {
                if (!lhs.AccelerationRate.EqualsWithin(rhs.AccelerationRate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DecelerationRate) ?? true))
            {
                if (!lhs.DecelerationRate.EqualsWithin(rhs.DecelerationRate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Size) ?? true))
            {
                if (lhs.Size != rhs.Size) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.HeadBipedObject) ?? true))
            {
                if (lhs.HeadBipedObject != rhs.HeadBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.HairBipedObject) ?? true))
            {
                if (lhs.HairBipedObject != rhs.HairBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.InjuredHealthPercent) ?? true))
            {
                if (!lhs.InjuredHealthPercent.EqualsWithin(rhs.InjuredHealthPercent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ShieldBipedObject) ?? true))
            {
                if (lhs.ShieldBipedObject != rhs.ShieldBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Regen) ?? true))
            {
                if (!lhs.Regen.SequenceEqualNullable(rhs.Regen)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedDamage) ?? true))
            {
                if (!lhs.UnarmedDamage.EqualsWithin(rhs.UnarmedDamage)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedReach) ?? true))
            {
                if (!lhs.UnarmedReach.EqualsWithin(rhs.UnarmedReach)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyBipedObject) ?? true))
            {
                if (lhs.BodyBipedObject != rhs.BodyBipedObject) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AimAngleTolerance) ?? true))
            {
                if (!lhs.AimAngleTolerance.EqualsWithin(rhs.AimAngleTolerance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FlightRadius) ?? true))
            {
                if (!lhs.FlightRadius.EqualsWithin(rhs.FlightRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AngularAccelerationRate) ?? true))
            {
                if (!lhs.AngularAccelerationRate.EqualsWithin(rhs.AngularAccelerationRate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AngularTolerance) ?? true))
            {
                if (!lhs.AngularTolerance.EqualsWithin(rhs.AngularTolerance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MountData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MountData, rhs.MountData, out var lhsMountData, out var rhsMountData, out var isMountDataEqual))
                {
                    if (!((MountDataCommon)((IMountDataGetter)lhsMountData).CommonInstance()!).Equals(lhsMountData, rhsMountData, equalsMask?.GetSubCrystal((int)Race_FieldIndex.MountData))) return false;
                }
                else if (!isMountDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SkeletalModel) ?? true))
            {
                if (!Equals(lhs.SkeletalModel, rhs.SkeletalModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypeNames) ?? true))
            {
                if (!lhs.MovementTypeNames.SequenceEqualNullable(rhs.MovementTypeNames)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                if (!Equals(lhs.Voices, rhs.Voices)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DecapitateArmors) ?? true))
            {
                if (!Equals(lhs.DecapitateArmors, rhs.DecapitateArmors)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColors) ?? true))
            {
                if (!Equals(lhs.DefaultHairColors, rhs.DefaultHairColors)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.NumberOfTintsInList) ?? true))
            {
                if (lhs.NumberOfTintsInList != rhs.NumberOfTintsInList) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenMainClamp) ?? true))
            {
                if (!lhs.FacegenMainClamp.EqualsWithin(rhs.FacegenMainClamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenFaceClamp) ?? true))
            {
                if (!lhs.FacegenFaceClamp.EqualsWithin(rhs.FacegenFaceClamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.AttackRace) ?? true))
            {
                if (!lhs.AttackRace.Equals(rhs.AttackRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Attacks) ?? true))
            {
                if (!lhs.Attacks.SequenceEqual(rhs.Attacks, (l, r) => ((AttackCommon)((IAttackGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.Attacks)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                if (!Equals(lhs.BodyData, rhs.BodyData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                if (!lhs.Hairs.SequenceEqualNullable(rhs.Hairs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                if (!lhs.Eyes.SequenceEqualNullable(rhs.Eyes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyPartData) ?? true))
            {
                if (!lhs.BodyPartData.Equals(rhs.BodyPartData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BehaviorGraph) ?? true))
            {
                if (!Equals(lhs.BehaviorGraph, rhs.BehaviorGraph)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MaterialType) ?? true))
            {
                if (!lhs.MaterialType.Equals(rhs.MaterialType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactDataSet) ?? true))
            {
                if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DecapitationFX) ?? true))
            {
                if (!lhs.DecapitationFX.Equals(rhs.DecapitationFX)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.OpenLootSound) ?? true))
            {
                if (!lhs.OpenLootSound.Equals(rhs.OpenLootSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.CloseLootSound) ?? true))
            {
                if (!lhs.CloseLootSound.Equals(rhs.CloseLootSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BipedObjectNames) ?? true))
            {
                if (!lhs.BipedObjectNames.SequenceEqualNullable(rhs.BipedObjectNames)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypes) ?? true))
            {
                if (!lhs.MovementTypes.SequenceEqual(rhs.MovementTypes, (l, r) => ((RaceMovementTypeCommon)((IRaceMovementTypeGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.MovementTypes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentFlags) ?? true))
            {
                if (lhs.EquipmentFlags != rhs.EquipmentFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentSlots) ?? true))
            {
                if (!lhs.EquipmentSlots.SequenceEqualNullable(rhs.EquipmentSlots)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedEquipSlot) ?? true))
            {
                if (!lhs.UnarmedEquipSlot.Equals(rhs.UnarmedEquipSlot)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FaceFxPhonemes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FaceFxPhonemes, rhs.FaceFxPhonemes, out var lhsFaceFxPhonemes, out var rhsFaceFxPhonemes, out var isFaceFxPhonemesEqual))
                {
                    if (!((FaceFxPhonemesCommon)((IFaceFxPhonemesGetter)lhsFaceFxPhonemes).CommonInstance()!).Equals(lhsFaceFxPhonemes, rhsFaceFxPhonemes, equalsMask?.GetSubCrystal((int)Race_FieldIndex.FaceFxPhonemes))) return false;
                }
                else if (!isFaceFxPhonemesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultWalk) ?? true))
            {
                if (!lhs.BaseMovementDefaultWalk.Equals(rhs.BaseMovementDefaultWalk)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultRun) ?? true))
            {
                if (!lhs.BaseMovementDefaultRun.Equals(rhs.BaseMovementDefaultRun)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSwim) ?? true))
            {
                if (!lhs.BaseMovementDefaultSwim.Equals(rhs.BaseMovementDefaultSwim)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultFly) ?? true))
            {
                if (!lhs.BaseMovementDefaultFly.Equals(rhs.BaseMovementDefaultFly)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSneak) ?? true))
            {
                if (!lhs.BaseMovementDefaultSneak.Equals(rhs.BaseMovementDefaultSneak)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSprint) ?? true))
            {
                if (!lhs.BaseMovementDefaultSprint.Equals(rhs.BaseMovementDefaultSprint)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.HeadData) ?? true))
            {
                if (!Equals(lhs.HeadData, rhs.HeadData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.MorphRace) ?? true))
            {
                if (!lhs.MorphRace.Equals(rhs.MorphRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.ArmorRace) ?? true))
            {
                if (!lhs.ArmorRace.Equals(rhs.ArmorRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DATADataTypeState) ?? true))
            {
                if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IRaceGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Description);
            hash.Add(item.ActorEffect);
            hash.Add(item.Skin);
            if (item.BodyTemplate is {} BodyTemplateitem)
            {
                hash.Add(BodyTemplateitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.SkillBoost0);
            hash.Add(item.SkillBoost1);
            hash.Add(item.SkillBoost2);
            hash.Add(item.SkillBoost3);
            hash.Add(item.SkillBoost4);
            hash.Add(item.SkillBoost5);
            hash.Add(item.SkillBoost6);
            hash.Add(item.Unknown);
            hash.Add(HashCode.Combine(item.Height.Male, item.Height.Female));
            hash.Add(HashCode.Combine(item.Weight.Male, item.Weight.Female));
            hash.Add(item.Flags);
            hash.Add(item.Starting);
            hash.Add(item.BaseCarryWeight);
            hash.Add(item.BaseMass);
            hash.Add(item.AccelerationRate);
            hash.Add(item.DecelerationRate);
            hash.Add(item.Size);
            hash.Add(item.HeadBipedObject);
            hash.Add(item.HairBipedObject);
            hash.Add(item.InjuredHealthPercent);
            hash.Add(item.ShieldBipedObject);
            hash.Add(item.Regen);
            hash.Add(item.UnarmedDamage);
            hash.Add(item.UnarmedReach);
            hash.Add(item.BodyBipedObject);
            hash.Add(item.AimAngleTolerance);
            hash.Add(item.FlightRadius);
            hash.Add(item.AngularAccelerationRate);
            hash.Add(item.AngularTolerance);
            hash.Add(item.MountData);
            if (item.SkeletalModel is {} SkeletalModelitem)
            {
                hash.Add(HashCode.Combine(SkeletalModelitem.Male, SkeletalModelitem.Female));
            }
            hash.Add(item.MovementTypeNames);
            hash.Add(HashCode.Combine(item.Voices.Male, item.Voices.Female));
            if (item.DecapitateArmors is {} DecapitateArmorsitem)
            {
                hash.Add(HashCode.Combine(DecapitateArmorsitem.Male, DecapitateArmorsitem.Female));
            }
            if (item.DefaultHairColors is {} DefaultHairColorsitem)
            {
                hash.Add(HashCode.Combine(DefaultHairColorsitem.Male, DefaultHairColorsitem.Female));
            }
            if (item.NumberOfTintsInList is {} NumberOfTintsInListitem)
            {
                hash.Add(NumberOfTintsInListitem);
            }
            hash.Add(item.FacegenMainClamp);
            hash.Add(item.FacegenFaceClamp);
            hash.Add(item.AttackRace);
            hash.Add(item.Attacks);
            hash.Add(HashCode.Combine(item.BodyData.Male, item.BodyData.Female));
            hash.Add(item.Hairs);
            hash.Add(item.Eyes);
            hash.Add(item.BodyPartData);
            hash.Add(HashCode.Combine(item.BehaviorGraph.Male, item.BehaviorGraph.Female));
            hash.Add(item.MaterialType);
            hash.Add(item.ImpactDataSet);
            hash.Add(item.DecapitationFX);
            hash.Add(item.OpenLootSound);
            hash.Add(item.CloseLootSound);
            hash.Add(item.BipedObjectNames);
            hash.Add(item.MovementTypes);
            if (item.EquipmentFlags is {} EquipmentFlagsitem)
            {
                hash.Add(EquipmentFlagsitem);
            }
            hash.Add(item.EquipmentSlots);
            hash.Add(item.UnarmedEquipSlot);
            hash.Add(item.FaceFxPhonemes);
            hash.Add(item.BaseMovementDefaultWalk);
            hash.Add(item.BaseMovementDefaultRun);
            hash.Add(item.BaseMovementDefaultSwim);
            hash.Add(item.BaseMovementDefaultFly);
            hash.Add(item.BaseMovementDefaultSneak);
            hash.Add(item.BaseMovementDefaultSprint);
            if (item.HeadData is {} HeadDataitem)
            {
                hash.Add(HashCode.Combine(HeadDataitem.Male, HeadDataitem.Female));
            }
            hash.Add(item.MorphRace);
            hash.Add(item.ArmorRace);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Race.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IRaceGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.ActorEffect is {} ActorEffectItem)
            {
                foreach (var item in ActorEffectItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.Skin, out var SkinInfo))
            {
                yield return SkinInfo;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.SkeletalModel is {} SkeletalModelItem)
            {
                foreach (var item in SkeletalModelItem.WhereNotNull().WhereCastable<ISimpleModelGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Voices)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.DecapitateArmors is {} DecapitateArmorsItem)
            {
                foreach (var item in DecapitateArmorsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.DefaultHairColors is {} DefaultHairColorsItem)
            {
                foreach (var item in DefaultHairColorsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.AttackRace, out var AttackRaceInfo))
            {
                yield return AttackRaceInfo;
            }
            foreach (var item in obj.Attacks.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.BodyData.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Hairs is {} HairsItem)
            {
                foreach (var item in HairsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Eyes is {} EyesItem)
            {
                foreach (var item in EyesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.BodyPartData, out var BodyPartDataInfo))
            {
                yield return BodyPartDataInfo;
            }
            foreach (var item in obj.BehaviorGraph.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.MaterialType, out var MaterialTypeInfo))
            {
                yield return MaterialTypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ImpactDataSet, out var ImpactDataSetInfo))
            {
                yield return ImpactDataSetInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DecapitationFX, out var DecapitationFXInfo))
            {
                yield return DecapitationFXInfo;
            }
            if (FormLinkInformation.TryFactory(obj.OpenLootSound, out var OpenLootSoundInfo))
            {
                yield return OpenLootSoundInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CloseLootSound, out var CloseLootSoundInfo))
            {
                yield return CloseLootSoundInfo;
            }
            foreach (var item in obj.MovementTypes.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.EquipmentSlots)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.UnarmedEquipSlot, out var UnarmedEquipSlotInfo))
            {
                yield return UnarmedEquipSlotInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefaultWalk, out var BaseMovementDefaultWalkInfo))
            {
                yield return BaseMovementDefaultWalkInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefaultRun, out var BaseMovementDefaultRunInfo))
            {
                yield return BaseMovementDefaultRunInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefaultSwim, out var BaseMovementDefaultSwimInfo))
            {
                yield return BaseMovementDefaultSwimInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefaultFly, out var BaseMovementDefaultFlyInfo))
            {
                yield return BaseMovementDefaultFlyInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefaultSneak, out var BaseMovementDefaultSneakInfo))
            {
                yield return BaseMovementDefaultSneakInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BaseMovementDefaultSprint, out var BaseMovementDefaultSprintInfo))
            {
                yield return BaseMovementDefaultSprintInfo;
            }
            if (obj.HeadData is {} HeadDataItem)
            {
                foreach (var item in HeadDataItem.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.MorphRace, out var MorphRaceInfo))
            {
                yield return MorphRaceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ArmorRace, out var ArmorRaceInfo))
            {
                yield return ArmorRaceInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IRaceGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.SkeletalModel is {} SkeletalModelItem)
            {
                foreach (var item in SkeletalModelItem.WhereNotNull().SelectMany(f => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.BodyData.WhereNotNull().SelectMany(f => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            foreach (var item in obj.BehaviorGraph.WhereNotNull().SelectMany(f => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            if (obj.HeadData is {} HeadDataItem)
            {
                foreach (var item in HeadDataItem.WhereNotNull().SelectMany(f => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Race Duplicate(
            IRaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Race(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class RaceSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly RaceSetterTranslationCommon Instance = new RaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRaceInternal item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ActorEffect) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.ActorEffect);
                try
                {
                    if ((rhs.ActorEffect != null))
                    {
                        item.ActorEffect = 
                            rhs.ActorEffect
                                .Select(b => (IFormLinkGetter<ISpellRecordGetter>)new FormLink<ISpellRecordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    }
                    else
                    {
                        item.ActorEffect = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Skin) ?? true))
            {
                item.Skin.SetTo(rhs.Skin.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyTemplate) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.BodyTemplate);
                try
                {
                    if(rhs.BodyTemplate is {} rhsBodyTemplate)
                    {
                        item.BodyTemplate = rhsBodyTemplate.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.BodyTemplate));
                    }
                    else
                    {
                        item.BodyTemplate = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost0) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost0);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost0) ?? true))
                    {
                        item.SkillBoost0 = rhs.SkillBoost0.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost0),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost1) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost1);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost1) ?? true))
                    {
                        item.SkillBoost1 = rhs.SkillBoost1.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost1),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost2) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost2);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost2) ?? true))
                    {
                        item.SkillBoost2 = rhs.SkillBoost2.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost2),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost3) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost3);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost3) ?? true))
                    {
                        item.SkillBoost3 = rhs.SkillBoost3.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost3),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost4) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost4);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost4) ?? true))
                    {
                        item.SkillBoost4 = rhs.SkillBoost4.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost4),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost5) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost5);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost5) ?? true))
                    {
                        item.SkillBoost5 = rhs.SkillBoost5.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost5),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost6) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.SkillBoost6);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SkillBoost6) ?? true))
                    {
                        item.SkillBoost6 = rhs.SkillBoost6.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.SkillBoost6),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            item.Height = new GenderedItem<Single>(
                male: rhs.Height.Male,
                female: rhs.Height.Female);
            item.Weight = new GenderedItem<Single>(
                male: rhs.Weight.Male,
                female: rhs.Weight.Female);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Starting) ?? true))
            {
                item.Starting.SetTo(rhs.Starting);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseCarryWeight) ?? true))
            {
                item.BaseCarryWeight = rhs.BaseCarryWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMass) ?? true))
            {
                item.BaseMass = rhs.BaseMass;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AccelerationRate) ?? true))
            {
                item.AccelerationRate = rhs.AccelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DecelerationRate) ?? true))
            {
                item.DecelerationRate = rhs.DecelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Size) ?? true))
            {
                item.Size = rhs.Size;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.HeadBipedObject) ?? true))
            {
                item.HeadBipedObject = rhs.HeadBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.HairBipedObject) ?? true))
            {
                item.HairBipedObject = rhs.HairBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.InjuredHealthPercent) ?? true))
            {
                item.InjuredHealthPercent = rhs.InjuredHealthPercent;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ShieldBipedObject) ?? true))
            {
                item.ShieldBipedObject = rhs.ShieldBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Regen) ?? true))
            {
                item.Regen.SetTo(rhs.Regen);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedDamage) ?? true))
            {
                item.UnarmedDamage = rhs.UnarmedDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedReach) ?? true))
            {
                item.UnarmedReach = rhs.UnarmedReach;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyBipedObject) ?? true))
            {
                item.BodyBipedObject = rhs.BodyBipedObject;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AimAngleTolerance) ?? true))
            {
                item.AimAngleTolerance = rhs.AimAngleTolerance;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FlightRadius) ?? true))
            {
                item.FlightRadius = rhs.FlightRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AngularAccelerationRate) ?? true))
            {
                item.AngularAccelerationRate = rhs.AngularAccelerationRate;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AngularTolerance) ?? true))
            {
                item.AngularTolerance = rhs.AngularTolerance;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MountData) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MountData);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MountData) ?? true))
                    {
                        item.MountData = rhs.MountData.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.MountData),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (rhs.SkeletalModel is not {} rhsSkeletalModelitem)
            {
                item.SkeletalModel = null;
            }
            else
            {
                item.SkeletalModel = new GenderedItem<SimpleModel?>(
                    male: rhsSkeletalModelitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsSkeletalModelitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypeNames) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MovementTypeNames);
                try
                {
                    item.MovementTypeNames.SetTo(rhs.MovementTypeNames);
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.Voices = new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(
                male: new FormLink<IVoiceTypeGetter>(rhs.Voices.Male.FormKey),
                female: new FormLink<IVoiceTypeGetter>(rhs.Voices.Female.FormKey));
            if (rhs.DecapitateArmors is not {} rhsDecapitateArmorsitem)
            {
                item.DecapitateArmors = null;
            }
            else
            {
                item.DecapitateArmors = new GenderedItem<IFormLinkGetter<IArmorGetter>>(
                    male: new FormLink<IArmorGetter>(rhsDecapitateArmorsitem.Male.FormKey),
                    female: new FormLink<IArmorGetter>(rhsDecapitateArmorsitem.Female.FormKey));
            }
            if (rhs.DefaultHairColors is not {} rhsDefaultHairColorsitem)
            {
                item.DefaultHairColors = null;
            }
            else
            {
                item.DefaultHairColors = new GenderedItem<IFormLinkGetter<IColorRecordGetter>>(
                    male: new FormLink<IColorRecordGetter>(rhsDefaultHairColorsitem.Male.FormKey),
                    female: new FormLink<IColorRecordGetter>(rhsDefaultHairColorsitem.Female.FormKey));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.NumberOfTintsInList) ?? true))
            {
                item.NumberOfTintsInList = rhs.NumberOfTintsInList;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenMainClamp) ?? true))
            {
                item.FacegenMainClamp = rhs.FacegenMainClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FacegenFaceClamp) ?? true))
            {
                item.FacegenFaceClamp = rhs.FacegenFaceClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.AttackRace) ?? true))
            {
                item.AttackRace.SetTo(rhs.AttackRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Attacks) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Attacks);
                try
                {
                    item.Attacks.SetTo(
                        rhs.Attacks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.BodyData = new GenderedItem<BodyData?>(
                male: rhs.BodyData.Male?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)),
                female: rhs.BodyData.Female?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)));
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                try
                {
                    if ((rhs.Hairs != null))
                    {
                        item.Hairs = 
                            rhs.Hairs
                                .Select(b => (IFormLinkGetter<IHairGetter>)new FormLink<IHairGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IHairGetter>>();
                    }
                    else
                    {
                        item.Hairs = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                try
                {
                    if ((rhs.Eyes != null))
                    {
                        item.Eyes = 
                            rhs.Eyes
                                .Select(b => (IFormLinkGetter<IEyesGetter>)new FormLink<IEyesGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IEyesGetter>>();
                    }
                    else
                    {
                        item.Eyes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BodyPartData) ?? true))
            {
                item.BodyPartData.SetTo(rhs.BodyPartData.FormKeyNullable);
            }
            item.BehaviorGraph = new GenderedItem<Model?>(
                male: rhs.BehaviorGraph.Male?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)),
                female: rhs.BehaviorGraph.Female?.DeepCopy(
                    errorMask: errorMask,
                    default(TranslationCrystal)));
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MaterialType) ?? true))
            {
                item.MaterialType.SetTo(rhs.MaterialType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet.SetTo(rhs.ImpactDataSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DecapitationFX) ?? true))
            {
                item.DecapitationFX.SetTo(rhs.DecapitationFX.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.OpenLootSound) ?? true))
            {
                item.OpenLootSound.SetTo(rhs.OpenLootSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.CloseLootSound) ?? true))
            {
                item.CloseLootSound.SetTo(rhs.CloseLootSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BipedObjectNames) ?? true))
            {
                item.BipedObjectNames.SetTo(rhs.BipedObjectNames);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MovementTypes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.MovementTypes);
                try
                {
                    item.MovementTypes.SetTo(
                        rhs.MovementTypes
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentFlags) ?? true))
            {
                item.EquipmentFlags = rhs.EquipmentFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.EquipmentSlots) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.EquipmentSlots);
                try
                {
                    item.EquipmentSlots.SetTo(
                        rhs.EquipmentSlots
                            .Select(b => (IFormLinkGetter<IEquipTypeGetter>)new FormLink<IEquipTypeGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.UnarmedEquipSlot) ?? true))
            {
                item.UnarmedEquipSlot.SetTo(rhs.UnarmedEquipSlot.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceFxPhonemes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceFxPhonemes);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceFxPhonemes) ?? true))
                    {
                        item.FaceFxPhonemes = rhs.FaceFxPhonemes.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Race_FieldIndex.FaceFxPhonemes),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultWalk) ?? true))
            {
                item.BaseMovementDefaultWalk.SetTo(rhs.BaseMovementDefaultWalk.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultRun) ?? true))
            {
                item.BaseMovementDefaultRun.SetTo(rhs.BaseMovementDefaultRun.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSwim) ?? true))
            {
                item.BaseMovementDefaultSwim.SetTo(rhs.BaseMovementDefaultSwim.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultFly) ?? true))
            {
                item.BaseMovementDefaultFly.SetTo(rhs.BaseMovementDefaultFly.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSneak) ?? true))
            {
                item.BaseMovementDefaultSneak.SetTo(rhs.BaseMovementDefaultSneak.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.BaseMovementDefaultSprint) ?? true))
            {
                item.BaseMovementDefaultSprint.SetTo(rhs.BaseMovementDefaultSprint.FormKeyNullable);
            }
            if (rhs.HeadData is not {} rhsHeadDataitem)
            {
                item.HeadData = null;
            }
            else
            {
                item.HeadData = new GenderedItem<HeadData?>(
                    male: rhsHeadDataitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsHeadDataitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.MorphRace) ?? true))
            {
                item.MorphRace.SetTo(rhs.MorphRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.ArmorRace) ?? true))
            {
                item.ArmorRace.SetTo(rhs.ArmorRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Race DeepCopy(
            IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Race
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class RaceBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly RaceBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IRaceGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            RaceBinaryWriteTranslation.WriteBinaryExtraNAM2(
                writer: writer,
                item: item);
        }

        public static void WriteRecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ActorEffect,
                counterType: RecordTypes.SPCT,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPLO),
                subRecordPerItem: true,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Skin,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            RaceBinaryWriteTranslation.WriteBinaryBodyTemplate(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                var SkillBoost0Item = item.SkillBoost0;
                ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost0Item).BinaryWriteTranslator).Write(
                    item: SkillBoost0Item,
                    writer: writer,
                    translationParams: translationParams);
                var SkillBoost1Item = item.SkillBoost1;
                ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost1Item).BinaryWriteTranslator).Write(
                    item: SkillBoost1Item,
                    writer: writer,
                    translationParams: translationParams);
                var SkillBoost2Item = item.SkillBoost2;
                ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost2Item).BinaryWriteTranslator).Write(
                    item: SkillBoost2Item,
                    writer: writer,
                    translationParams: translationParams);
                var SkillBoost3Item = item.SkillBoost3;
                ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost3Item).BinaryWriteTranslator).Write(
                    item: SkillBoost3Item,
                    writer: writer,
                    translationParams: translationParams);
                var SkillBoost4Item = item.SkillBoost4;
                ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost4Item).BinaryWriteTranslator).Write(
                    item: SkillBoost4Item,
                    writer: writer,
                    translationParams: translationParams);
                var SkillBoost5Item = item.SkillBoost5;
                ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost5Item).BinaryWriteTranslator).Write(
                    item: SkillBoost5Item,
                    writer: writer,
                    translationParams: translationParams);
                var SkillBoost6Item = item.SkillBoost6;
                ((SkillBoostBinaryWriteTranslation)((IBinaryItem)SkillBoost6Item).BinaryWriteTranslator).Write(
                    item: SkillBoost6Item,
                    writer: writer,
                    translationParams: translationParams);
                writer.Write(item.Unknown);
                GenderedItemBinaryTranslation.Write(
                    writer: writer,
                    item: item.Height,
                    transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                GenderedItemBinaryTranslation.Write(
                    writer: writer,
                    item: item.Weight,
                    transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                EnumBinaryTranslation<Race.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                Mutagen.Bethesda.Plugins.Binary.Translations.DictBinaryTranslation<Single>.Instance.Write(
                    writer: writer,
                    items: item.Starting,
                    transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BaseCarryWeight);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BaseMass);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AccelerationRate);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DecelerationRate);
                EnumBinaryTranslation<Size, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Size,
                    length: 4);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.HeadBipedObject,
                    length: 4);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.HairBipedObject,
                    length: 4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.InjuredHealthPercent);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.ShieldBipedObject,
                    length: 4);
                Mutagen.Bethesda.Plugins.Binary.Translations.DictBinaryTranslation<Single>.Instance.Write(
                    writer: writer,
                    items: item.Regen,
                    transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnarmedDamage);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.UnarmedReach);
                EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.BodyBipedObject,
                    length: 4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AimAngleTolerance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FlightRadius);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AngularAccelerationRate);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AngularTolerance);
                RaceBinaryWriteTranslation.WriteBinaryFlags2(
                    writer: writer,
                    item: item);
                if (!item.DATADataTypeState.HasFlag(Race.DATADataType.Break0))
                {
                    var MountDataItem = item.MountData;
                    ((MountDataBinaryWriteTranslation)((IBinaryItem)MountDataItem).BinaryWriteTranslator).Write(
                        item: MountDataItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.SkeletalModel,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                transl: (MutagenWriter subWriter, ISimpleModelGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((SimpleModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv.With(Race_Registration.SkeletalModelConverter));
                    }
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.MovementTypeNames,
                transl: (MutagenWriter subWriter, String subItem) =>
                {
                    StringBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.MTNM),
                        binaryType: StringBinaryType.Plain);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Voices,
                recordType: RecordTypes.VTCK,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IVoiceTypeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.DecapitateArmors,
                recordType: RecordTypes.DNAM,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IArmorGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.DefaultHairColors,
                recordType: RecordTypes.HCLF,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IColorRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NumberOfTintsInList,
                header: translationParams.ConvertToCustom(RecordTypes.TINL));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FacegenMainClamp,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FacegenFaceClamp,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackRace,
                header: translationParams.ConvertToCustom(RecordTypes.ATKR));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAttackGetter>.Instance.Write(
                writer: writer,
                items: item.Attacks,
                transl: (MutagenWriter subWriter, IAttackGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AttackBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.BodyData,
                markerType: RecordTypes.NAM1,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                transl: (MutagenWriter subWriter, IBodyDataGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((BodyDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IHairGetter>>.Instance.Write(
                writer: writer,
                items: item.Hairs,
                recordType: translationParams.ConvertToCustom(RecordTypes.HNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IHairGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IEyesGetter>>.Instance.Write(
                writer: writer,
                items: item.Eyes,
                recordType: translationParams.ConvertToCustom(RecordTypes.ENAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IEyesGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BodyPartData,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.BehaviorGraph,
                markerType: RecordTypes.NAM3,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                transl: (MutagenWriter subWriter, IModelGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((ModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaterialType,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImpactDataSet,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DecapitationFX,
                header: translationParams.ConvertToCustom(RecordTypes.NAM7));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OpenLootSound,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CloseLootSound,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            RaceBinaryWriteTranslation.WriteBinaryBipedObjectNames(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRaceMovementTypeGetter>.Instance.Write(
                writer: writer,
                items: item.MovementTypes,
                transl: (MutagenWriter subWriter, IRaceMovementTypeGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((RaceMovementTypeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            EnumBinaryTranslation<EquipTypeFlag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.EquipmentFlags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IEquipTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.EquipmentSlots,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IEquipTypeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.QNAM));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UnarmedEquipSlot,
                header: translationParams.ConvertToCustom(RecordTypes.UNES));
            RaceBinaryWriteTranslation.WriteBinaryFaceFxPhonemesListingParsing(
                writer: writer,
                item: item);
            RaceBinaryWriteTranslation.WriteBinaryFaceFxPhonemesRawParsing(
                writer: writer,
                item: item);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultWalk,
                header: translationParams.ConvertToCustom(RecordTypes.WKMV));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultRun,
                header: translationParams.ConvertToCustom(RecordTypes.RNMV));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultSwim,
                header: translationParams.ConvertToCustom(RecordTypes.SWMV));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultFly,
                header: translationParams.ConvertToCustom(RecordTypes.FLMV));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultSneak,
                header: translationParams.ConvertToCustom(RecordTypes.SNMV));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseMovementDefaultSprint,
                header: translationParams.ConvertToCustom(RecordTypes.SPMV));
            GenderedItemBinaryTranslation.WriteMarkerAheadOfItem(
                writer: writer,
                item: item.HeadData,
                markerType: RecordTypes.NAM0,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                femaleRecordConverter: Race_Registration.HeadDataFemaleConverter,
                transl: (MutagenWriter subWriter, IHeadDataGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((HeadDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MorphRace,
                header: translationParams.ConvertToCustom(RecordTypes.NAM8));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ArmorRace,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
        }

        public static partial void WriteBinaryBodyTemplateCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryBodyTemplate(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryBodyTemplateCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFlags2Custom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryFlags2(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryFlags2Custom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryExtraNAM2Custom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryExtraNAM2(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryExtraNAM2Custom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryBipedObjectNamesCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryBipedObjectNames(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryBipedObjectNamesCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFaceFxPhonemesListingParsingCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryFaceFxPhonemesListingParsing(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryFaceFxPhonemesListingParsingCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryFaceFxPhonemesRawParsingCustom(
            MutagenWriter writer,
            IRaceGetter item);

        public static void WriteBinaryFaceFxPhonemesRawParsing(
            MutagenWriter writer,
            IRaceGetter item)
        {
            WriteBinaryFaceFxPhonemesRawParsingCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IRaceGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.RACE,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class RaceBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly RaceBinaryCreateTranslation Instance = new RaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.RACE;
        public static void FillBinaryStructs(
            IRaceInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            RaceBinaryCreateTranslation.FillBinaryExtraNAM2Custom(
                frame: frame,
                item: item);
        }

        public static ParseResult FillBinaryRecordTypes(
            IRaceInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Race_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate);
                    return (int)Race_FieldIndex.Description;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    item.ActorEffect = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.SPCT),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SPLO),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    return (int)Race_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Skin.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.Skin;
                }
                case RecordTypeInts.BODT:
                case RecordTypeInts.BOD2:
                {
                    RaceBinaryCreateTranslation.FillBinaryBodyTemplateCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Race_FieldIndex.BodyTemplate;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Race_FieldIndex.Keywords;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Complete) return null;
                    item.SkillBoost0 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SkillBoost1 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SkillBoost2 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SkillBoost3 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SkillBoost4 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SkillBoost5 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SkillBoost6 = Mutagen.Bethesda.Skyrim.SkillBoost.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Remaining < 2) return null;
                    item.Unknown = dataFrame.ReadInt16();
                    if (dataFrame.Remaining < 8) return null;
                    item.Height = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<Single>(
                        frame: frame,
                        transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    if (dataFrame.Remaining < 8) return null;
                    item.Weight = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<Single>(
                        frame: frame,
                        transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    if (dataFrame.Remaining < 4) return null;
                    item.Flags = EnumBinaryTranslation<Race.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 12) return null;
                    Mutagen.Bethesda.Plugins.Binary.Translations.DictBinaryTranslation<Single>.Instance.Parse<BasicStat>(
                        reader: frame,
                        item: item.Starting,
                        transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    if (dataFrame.Remaining < 4) return null;
                    item.BaseCarryWeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BaseMass = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AccelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DecelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Size = EnumBinaryTranslation<Size, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.HeadBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.HairBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.InjuredHealthPercent = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ShieldBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 12) return null;
                    Mutagen.Bethesda.Plugins.Binary.Translations.DictBinaryTranslation<Single>.Instance.Parse<BasicStat>(
                        reader: frame,
                        item: item.Regen,
                        transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnarmedDamage = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.UnarmedReach = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BodyBipedObject = EnumBinaryTranslation<BipedObject, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.AimAngleTolerance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FlightRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AngularAccelerationRate = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AngularTolerance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    RaceBinaryCreateTranslation.FillBinaryFlags2Custom(
                        frame: dataFrame,
                        item: item);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= Race.DATADataType.Break0;
                        return (int)Race_FieldIndex.AngularTolerance;
                    }
                    if (dataFrame.Complete) return null;
                    item.MountData = Mutagen.Bethesda.Skyrim.MountData.CreateFromBinary(frame: dataFrame);
                    return (int)Race_FieldIndex.MountData;
                }
                case RecordTypeInts.MNAM:
                case RecordTypeInts.FNAM:
                {
                    item.SkeletalModel = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<SimpleModel>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        translationParams: Race_Registration.SkeletalModelConverter,
                        transl: SimpleModel.TryCreateFromBinary);
                    return (int)Race_FieldIndex.SkeletalModel;
                }
                case RecordTypeInts.MTNM:
                {
                    item.MovementTypeNames.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.MTNM),
                            transl: (MutagenFrame r, [MaybeNullWhen(false)] out String listSubItem) =>
                            {
                                return StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: true,
                                    binaryType: StringBinaryType.Plain);
                            }));
                    return (int)Race_FieldIndex.MovementTypeNames;
                }
                case RecordTypeInts.VTCK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Voices = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<IFormLinkGetter<IVoiceTypeGetter>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return (int)Race_FieldIndex.Voices;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DecapitateArmors = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<IFormLinkGetter<IArmorGetter>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return (int)Race_FieldIndex.DecapitateArmors;
                }
                case RecordTypeInts.HCLF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultHairColors = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<IFormLinkGetter<IColorRecordGetter>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return (int)Race_FieldIndex.DefaultHairColors;
                }
                case RecordTypeInts.TINL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NumberOfTintsInList = frame.ReadUInt16();
                    return (int)Race_FieldIndex.NumberOfTintsInList;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FacegenMainClamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Race_FieldIndex.FacegenMainClamp;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FacegenFaceClamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Race_FieldIndex.FacegenFaceClamp;
                }
                case RecordTypeInts.ATKR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.AttackRace;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                {
                    item.Attacks.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Attack>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Attack_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Attack.TryCreateFromBinary));
                    return (int)Race_FieldIndex.Attacks;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BodyData = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<BodyData>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        transl: BodyData.TryCreateFromBinary);
                    return (int)Race_FieldIndex.BodyData;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Hairs = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IHairGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IHairGetter>>();
                    return (int)Race_FieldIndex.Hairs;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Eyes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IEyesGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IEyesGetter>>();
                    return (int)Race_FieldIndex.Eyes;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BodyPartData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BodyPartData;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BehaviorGraph = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<Model>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        transl: Model.TryCreateFromBinary);
                    return (int)Race_FieldIndex.BehaviorGraph;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaterialType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.MaterialType;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.ImpactDataSet;
                }
                case RecordTypeInts.NAM7:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DecapitationFX.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.DecapitationFX;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OpenLootSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.OpenLootSound;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CloseLootSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.CloseLootSound;
                }
                case RecordTypeInts.NAME:
                {
                    RaceBinaryCreateTranslation.FillBinaryBipedObjectNamesCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Race_FieldIndex.BipedObjectNames;
                }
                case RecordTypeInts.MTYP:
                case RecordTypeInts.SPED:
                {
                    item.MovementTypes.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<RaceMovementType>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RaceMovementType_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: RaceMovementType.TryCreateFromBinary));
                    return (int)Race_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipmentFlags = EnumBinaryTranslation<EquipTypeFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Race_FieldIndex.EquipmentFlags;
                }
                case RecordTypeInts.QNAM:
                {
                    item.EquipmentSlots.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IEquipTypeGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.QNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Race_FieldIndex.EquipmentSlots;
                }
                case RecordTypeInts.UNES:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UnarmedEquipSlot.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.UnarmedEquipSlot;
                }
                case RecordTypeInts.PHTN:
                {
                    return RaceBinaryCreateTranslation.FillBinaryFaceFxPhonemesListingParsingCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.PHWT:
                {
                    return RaceBinaryCreateTranslation.FillBinaryFaceFxPhonemesRawParsingCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.WKMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefaultWalk.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefaultWalk;
                }
                case RecordTypeInts.RNMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefaultRun.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefaultRun;
                }
                case RecordTypeInts.SWMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefaultSwim.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefaultSwim;
                }
                case RecordTypeInts.FLMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefaultFly.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefaultFly;
                }
                case RecordTypeInts.SNMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefaultSneak.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefaultSneak;
                }
                case RecordTypeInts.SPMV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseMovementDefaultSprint.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.BaseMovementDefaultSprint;
                }
                case RecordTypeInts.NAM0:
                {
                    item.HeadData = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseMarkerAheadOfItem<HeadData>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        marker: RecordTypes.NAM0,
                        femaleRecordConverter: Race_Registration.HeadDataFemaleConverter,
                        transl: HeadData.TryCreateFromBinary);
                    return (int)Race_FieldIndex.HeadData;
                }
                case RecordTypeInts.NAM8:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MorphRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.MorphRace;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ArmorRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Race_FieldIndex.ArmorRace;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryBodyTemplateCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

        public static partial void FillBinaryFlags2Custom(
            MutagenFrame frame,
            IRaceInternal item);

        public static partial void FillBinaryExtraNAM2Custom(
            MutagenFrame frame,
            IRaceInternal item);

        public static partial void FillBinaryBipedObjectNamesCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryFaceFxPhonemesListingParsingCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryFaceFxPhonemesRawParsingCustom(
            MutagenFrame frame,
            IRaceInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class RaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class RaceBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IRaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => RaceCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => RaceCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IRace);

        public Race.MajorFlag MajorFlags => (Race.MajorFlag)this.MajorRecordFlagsRaw;

        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData) : TranslatedString.Empty;
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; private set; }
        #region Skin
        private int? _SkinLocation;
        public IFormLinkNullableGetter<IArmorGetter> Skin => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArmorGetter>(_package, _recordData, _SkinLocation);
        #endregion
        #region BodyTemplate
        partial void BodyTemplateCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset);
        public partial IBodyTemplateGetter? GetBodyTemplateCustom();
        public IBodyTemplateGetter? BodyTemplate => GetBodyTemplateCustom();
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        private RangeInt32? _DATALocation;
        public Race.DATADataType DATADataTypeState { get; private set; }
        #region SkillBoost0
        private int _SkillBoost0Location => _DATALocation!.Value.Min;
        private bool _SkillBoost0_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost0 => _SkillBoost0_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(_recordData.Slice(_SkillBoost0Location), _package) : default;
        public ISkillBoostGetter SkillBoost0 => _SkillBoost0 ?? new SkillBoost();
        #endregion
        #region SkillBoost1
        private int _SkillBoost1Location => _DATALocation!.Value.Min + 0x2;
        private bool _SkillBoost1_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost1 => _SkillBoost1_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(_recordData.Slice(_SkillBoost1Location), _package) : default;
        public ISkillBoostGetter SkillBoost1 => _SkillBoost1 ?? new SkillBoost();
        #endregion
        #region SkillBoost2
        private int _SkillBoost2Location => _DATALocation!.Value.Min + 0x4;
        private bool _SkillBoost2_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost2 => _SkillBoost2_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(_recordData.Slice(_SkillBoost2Location), _package) : default;
        public ISkillBoostGetter SkillBoost2 => _SkillBoost2 ?? new SkillBoost();
        #endregion
        #region SkillBoost3
        private int _SkillBoost3Location => _DATALocation!.Value.Min + 0x6;
        private bool _SkillBoost3_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost3 => _SkillBoost3_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(_recordData.Slice(_SkillBoost3Location), _package) : default;
        public ISkillBoostGetter SkillBoost3 => _SkillBoost3 ?? new SkillBoost();
        #endregion
        #region SkillBoost4
        private int _SkillBoost4Location => _DATALocation!.Value.Min + 0x8;
        private bool _SkillBoost4_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost4 => _SkillBoost4_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(_recordData.Slice(_SkillBoost4Location), _package) : default;
        public ISkillBoostGetter SkillBoost4 => _SkillBoost4 ?? new SkillBoost();
        #endregion
        #region SkillBoost5
        private int _SkillBoost5Location => _DATALocation!.Value.Min + 0xA;
        private bool _SkillBoost5_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost5 => _SkillBoost5_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(_recordData.Slice(_SkillBoost5Location), _package) : default;
        public ISkillBoostGetter SkillBoost5 => _SkillBoost5 ?? new SkillBoost();
        #endregion
        #region SkillBoost6
        private int _SkillBoost6Location => _DATALocation!.Value.Min + 0xC;
        private bool _SkillBoost6_IsSet => _DATALocation.HasValue;
        private ISkillBoostGetter? _SkillBoost6 => _SkillBoost6_IsSet ? SkillBoostBinaryOverlay.SkillBoostFactory(_recordData.Slice(_SkillBoost6Location), _package) : default;
        public ISkillBoostGetter SkillBoost6 => _SkillBoost6 ?? new SkillBoost();
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value.Min + 0xE;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public Int16 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt16LittleEndian(_recordData.Slice(_UnknownLocation, 2)) : default(Int16);
        #endregion
        #region Height
        private int _HeightLocation => _DATALocation!.Value.Min + 0x10;
        private bool _Height_IsSet => _DATALocation.HasValue;
        public IGenderedItemGetter<Single> Height
        {
            get
            {
                if (!_Height_IsSet) return new GenderedItem<Single>(default(Single), default(Single));
                var data = _recordData.Slice(_HeightLocation);
                return new GenderedItem<Single>(
                    data.Float(),
                    data.Slice(4).Float());
            }
        }
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value.Min + 0x18;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public IGenderedItemGetter<Single> Weight
        {
            get
            {
                if (!_Weight_IsSet) return new GenderedItem<Single>(default(Single), default(Single));
                var data = _recordData.Slice(_WeightLocation);
                return new GenderedItem<Single>(
                    data.Float(),
                    data.Slice(4).Float());
            }
        }
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value.Min + 0x20;
        public partial Race.Flag GetFlagsCustom();
        public Race.Flag Flags => GetFlagsCustom();
        #endregion
        #region Starting
        private int _StartingLocation => _DATALocation!.Value.Min + 0x24;
        private bool _Starting_IsSet => _DATALocation.HasValue;
        public IReadOnlyDictionary<BasicStat, Single> Starting => DictBinaryTranslation<Single>.Instance.Parse<BasicStat>(
            new MutagenFrame(new MutagenMemoryReadStream(_recordData.Slice(_StartingLocation), _package.MetaData)),
            new Dictionary<BasicStat, Single>(),
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
        #endregion
        #region BaseCarryWeight
        private int _BaseCarryWeightLocation => _DATALocation!.Value.Min + 0x30;
        private bool _BaseCarryWeight_IsSet => _DATALocation.HasValue;
        public Single BaseCarryWeight => _BaseCarryWeight_IsSet ? _recordData.Slice(_BaseCarryWeightLocation, 4).Float() : default(Single);
        #endregion
        #region BaseMass
        private int _BaseMassLocation => _DATALocation!.Value.Min + 0x34;
        private bool _BaseMass_IsSet => _DATALocation.HasValue;
        public Single BaseMass => _BaseMass_IsSet ? _recordData.Slice(_BaseMassLocation, 4).Float() : default(Single);
        #endregion
        #region AccelerationRate
        private int _AccelerationRateLocation => _DATALocation!.Value.Min + 0x38;
        private bool _AccelerationRate_IsSet => _DATALocation.HasValue;
        public Single AccelerationRate => _AccelerationRate_IsSet ? _recordData.Slice(_AccelerationRateLocation, 4).Float() : default(Single);
        #endregion
        #region DecelerationRate
        private int _DecelerationRateLocation => _DATALocation!.Value.Min + 0x3C;
        private bool _DecelerationRate_IsSet => _DATALocation.HasValue;
        public Single DecelerationRate => _DecelerationRate_IsSet ? _recordData.Slice(_DecelerationRateLocation, 4).Float() : default(Single);
        #endregion
        #region Size
        private int _SizeLocation => _DATALocation!.Value.Min + 0x40;
        private bool _Size_IsSet => _DATALocation.HasValue;
        public Size Size => _Size_IsSet ? (Size)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_SizeLocation, 0x4)) : default;
        #endregion
        #region HeadBipedObject
        private int _HeadBipedObjectLocation => _DATALocation!.Value.Min + 0x44;
        private bool _HeadBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject HeadBipedObject => _HeadBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_HeadBipedObjectLocation, 0x4)) : default;
        #endregion
        #region HairBipedObject
        private int _HairBipedObjectLocation => _DATALocation!.Value.Min + 0x48;
        private bool _HairBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject HairBipedObject => _HairBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_HairBipedObjectLocation, 0x4)) : default;
        #endregion
        #region InjuredHealthPercent
        private int _InjuredHealthPercentLocation => _DATALocation!.Value.Min + 0x4C;
        private bool _InjuredHealthPercent_IsSet => _DATALocation.HasValue;
        public Single InjuredHealthPercent => _InjuredHealthPercent_IsSet ? _recordData.Slice(_InjuredHealthPercentLocation, 4).Float() : default(Single);
        #endregion
        #region ShieldBipedObject
        private int _ShieldBipedObjectLocation => _DATALocation!.Value.Min + 0x50;
        private bool _ShieldBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject ShieldBipedObject => _ShieldBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_ShieldBipedObjectLocation, 0x4)) : default;
        #endregion
        #region Regen
        private int _RegenLocation => _DATALocation!.Value.Min + 0x54;
        private bool _Regen_IsSet => _DATALocation.HasValue;
        public IReadOnlyDictionary<BasicStat, Single> Regen => DictBinaryTranslation<Single>.Instance.Parse<BasicStat>(
            new MutagenFrame(new MutagenMemoryReadStream(_recordData.Slice(_RegenLocation), _package.MetaData)),
            new Dictionary<BasicStat, Single>(),
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
        #endregion
        #region UnarmedDamage
        private int _UnarmedDamageLocation => _DATALocation!.Value.Min + 0x60;
        private bool _UnarmedDamage_IsSet => _DATALocation.HasValue;
        public Single UnarmedDamage => _UnarmedDamage_IsSet ? _recordData.Slice(_UnarmedDamageLocation, 4).Float() : default(Single);
        #endregion
        #region UnarmedReach
        private int _UnarmedReachLocation => _DATALocation!.Value.Min + 0x64;
        private bool _UnarmedReach_IsSet => _DATALocation.HasValue;
        public Single UnarmedReach => _UnarmedReach_IsSet ? _recordData.Slice(_UnarmedReachLocation, 4).Float() : default(Single);
        #endregion
        #region BodyBipedObject
        private int _BodyBipedObjectLocation => _DATALocation!.Value.Min + 0x68;
        private bool _BodyBipedObject_IsSet => _DATALocation.HasValue;
        public BipedObject BodyBipedObject => _BodyBipedObject_IsSet ? (BipedObject)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_BodyBipedObjectLocation, 0x4)) : default;
        #endregion
        #region AimAngleTolerance
        private int _AimAngleToleranceLocation => _DATALocation!.Value.Min + 0x6C;
        private bool _AimAngleTolerance_IsSet => _DATALocation.HasValue;
        public Single AimAngleTolerance => _AimAngleTolerance_IsSet ? _recordData.Slice(_AimAngleToleranceLocation, 4).Float() : default(Single);
        #endregion
        #region FlightRadius
        private int _FlightRadiusLocation => _DATALocation!.Value.Min + 0x70;
        private bool _FlightRadius_IsSet => _DATALocation.HasValue;
        public Single FlightRadius => _FlightRadius_IsSet ? _recordData.Slice(_FlightRadiusLocation, 4).Float() : default(Single);
        #endregion
        #region AngularAccelerationRate
        private int _AngularAccelerationRateLocation => _DATALocation!.Value.Min + 0x74;
        private bool _AngularAccelerationRate_IsSet => _DATALocation.HasValue;
        public Single AngularAccelerationRate => _AngularAccelerationRate_IsSet ? _recordData.Slice(_AngularAccelerationRateLocation, 4).Float() : default(Single);
        #endregion
        #region AngularTolerance
        private int _AngularToleranceLocation => _DATALocation!.Value.Min + 0x78;
        private bool _AngularTolerance_IsSet => _DATALocation.HasValue;
        public Single AngularTolerance => _AngularTolerance_IsSet ? _recordData.Slice(_AngularToleranceLocation, 4).Float() : default(Single);
        #endregion
        #region Flags2
        private int _Flags2Location => _DATALocation!.Value.Min + 0x7C;
        private bool _Flags2_IsSet => _DATALocation.HasValue;
        partial void Flags2CustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        #region MountData
        private int _MountDataLocation => _DATALocation!.Value.Min + 0x80;
        private bool _MountData_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Race.DATADataType.Break0);
        private IMountDataGetter? _MountData => _MountData_IsSet ? MountDataBinaryOverlay.MountDataFactory(_recordData.Slice(_MountDataLocation), _package) : default;
        public IMountDataGetter MountData => _MountData ?? new MountData();
        #endregion
        #region SkeletalModel
        private IGenderedItemGetter<ISimpleModelGetter?>? _SkeletalModelOverlay;
        public IGenderedItemGetter<ISimpleModelGetter?>? SkeletalModel => _SkeletalModelOverlay;
        #endregion
        public IReadOnlyList<String> MovementTypeNames { get; private set; } = Array.Empty<String>();
        #region Voices
        private int? _VoicesLocation;
        public IGenderedItemGetter<IFormLinkGetter<IVoiceTypeGetter>> Voices
        {
            get
            {
                if (!_VoicesLocation.HasValue) return new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(FormLink<IVoiceTypeGetter>.Null, FormLink<IVoiceTypeGetter>.Null);
                var data = HeaderTranslation.ExtractSubrecordMemory(_recordData, _VoicesLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IFormLinkGetter<IVoiceTypeGetter>>(
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IVoiceTypeGetter>(_package, data),
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IVoiceTypeGetter>(_package, data.Slice(4)));
            }
        }
        #endregion
        #region DecapitateArmors
        private int? _DecapitateArmorsLocation;
        public IGenderedItemGetter<IFormLinkGetter<IArmorGetter>>? DecapitateArmors
        {
            get
            {
                if (!_DecapitateArmorsLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_recordData, _DecapitateArmorsLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IFormLinkGetter<IArmorGetter>>(
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IArmorGetter>(_package, data),
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IArmorGetter>(_package, data.Slice(4)));
            }
        }
        #endregion
        #region DefaultHairColors
        private int? _DefaultHairColorsLocation;
        public IGenderedItemGetter<IFormLinkGetter<IColorRecordGetter>>? DefaultHairColors
        {
            get
            {
                if (!_DefaultHairColorsLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_recordData, _DefaultHairColorsLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IFormLinkGetter<IColorRecordGetter>>(
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IColorRecordGetter>(_package, data),
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IColorRecordGetter>(_package, data.Slice(4)));
            }
        }
        #endregion
        #region NumberOfTintsInList
        private int? _NumberOfTintsInListLocation;
        public UInt16? NumberOfTintsInList => _NumberOfTintsInListLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NumberOfTintsInListLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region FacegenMainClamp
        private int? _FacegenMainClampLocation;
        public Single FacegenMainClamp => _FacegenMainClampLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FacegenMainClampLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region FacegenFaceClamp
        private int? _FacegenFaceClampLocation;
        public Single FacegenFaceClamp => _FacegenFaceClampLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FacegenFaceClampLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region AttackRace
        private int? _AttackRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> AttackRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _AttackRaceLocation);
        #endregion
        public IReadOnlyList<IAttackGetter> Attacks { get; private set; } = Array.Empty<IAttackGetter>();
        #region BodyData
        private IGenderedItemGetter<IBodyDataGetter?>? _BodyDataOverlay;
        public IGenderedItemGetter<IBodyDataGetter?> BodyData => _BodyDataOverlay ?? new GenderedItem<IBodyDataGetter?>(default, default);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IHairGetter>>? Hairs { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IEyesGetter>>? Eyes { get; private set; }
        #region BodyPartData
        private int? _BodyPartDataLocation;
        public IFormLinkNullableGetter<IBodyPartDataGetter> BodyPartData => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IBodyPartDataGetter>(_package, _recordData, _BodyPartDataLocation);
        #endregion
        #region ExtraNAM2
        partial void ExtraNAM2CustomParse(
            OverlayStream stream,
            int offset);
        protected int ExtraNAM2EndingPos;
        #endregion
        #region BehaviorGraph
        private IGenderedItemGetter<IModelGetter?>? _BehaviorGraphOverlay;
        public IGenderedItemGetter<IModelGetter?> BehaviorGraph => _BehaviorGraphOverlay ?? new GenderedItem<IModelGetter?>(default, default);
        #endregion
        #region MaterialType
        private int? _MaterialTypeLocation;
        public IFormLinkNullableGetter<IMaterialTypeGetter> MaterialType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMaterialTypeGetter>(_package, _recordData, _MaterialTypeLocation);
        #endregion
        #region ImpactDataSet
        private int? _ImpactDataSetLocation;
        public IFormLinkNullableGetter<IImpactDataSetGetter> ImpactDataSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IImpactDataSetGetter>(_package, _recordData, _ImpactDataSetLocation);
        #endregion
        #region DecapitationFX
        private int? _DecapitationFXLocation;
        public IFormLinkNullableGetter<IArtObjectGetter> DecapitationFX => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArtObjectGetter>(_package, _recordData, _DecapitationFXLocation);
        #endregion
        #region OpenLootSound
        private int? _OpenLootSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> OpenLootSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _OpenLootSoundLocation);
        #endregion
        #region CloseLootSound
        private int? _CloseLootSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> CloseLootSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _CloseLootSoundLocation);
        #endregion
        public IReadOnlyList<IRaceMovementTypeGetter> MovementTypes { get; private set; } = Array.Empty<IRaceMovementTypeGetter>();
        #region EquipmentFlags
        private int? _EquipmentFlagsLocation;
        public EquipTypeFlag? EquipmentFlags => _EquipmentFlagsLocation.HasValue ? (EquipTypeFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EquipmentFlagsLocation!.Value, _package.MetaData.Constants)) : default(EquipTypeFlag?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IEquipTypeGetter>> EquipmentSlots { get; private set; } = Array.Empty<IFormLinkGetter<IEquipTypeGetter>>();
        #region UnarmedEquipSlot
        private int? _UnarmedEquipSlotLocation;
        public IFormLinkNullableGetter<IEquipTypeGetter> UnarmedEquipSlot => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEquipTypeGetter>(_package, _recordData, _UnarmedEquipSlotLocation);
        #endregion
        #region FaceFxPhonemesListingParsing
        public partial ParseResult FaceFxPhonemesListingParsingCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region FaceFxPhonemesRawParsing
        public partial ParseResult FaceFxPhonemesRawParsingCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region BaseMovementDefaultWalk
        private int? _BaseMovementDefaultWalkLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultWalk => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultWalkLocation);
        #endregion
        #region BaseMovementDefaultRun
        private int? _BaseMovementDefaultRunLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultRun => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultRunLocation);
        #endregion
        #region BaseMovementDefaultSwim
        private int? _BaseMovementDefaultSwimLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSwim => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultSwimLocation);
        #endregion
        #region BaseMovementDefaultFly
        private int? _BaseMovementDefaultFlyLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultFly => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultFlyLocation);
        #endregion
        #region BaseMovementDefaultSneak
        private int? _BaseMovementDefaultSneakLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSneak => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultSneakLocation);
        #endregion
        #region BaseMovementDefaultSprint
        private int? _BaseMovementDefaultSprintLocation;
        public IFormLinkNullableGetter<IMovementTypeGetter> BaseMovementDefaultSprint => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMovementTypeGetter>(_package, _recordData, _BaseMovementDefaultSprintLocation);
        #endregion
        #region HeadData
        private IGenderedItemGetter<IHeadDataGetter?>? _HeadDataOverlay;
        public IGenderedItemGetter<IHeadDataGetter?>? HeadData => _HeadDataOverlay;
        #endregion
        #region MorphRace
        private int? _MorphRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> MorphRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _MorphRaceLocation);
        #endregion
        #region ArmorRace
        private int? _ArmorRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> ArmorRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _ArmorRaceLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RaceBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IRaceGetter RaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new RaceBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IRaceGetter RaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return RaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Description;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    this.ActorEffect = BinaryOverlayList.FactoryByCountPerItem<IFormLinkGetter<ISpellRecordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.SPCT,
                        trigger: RecordTypes.SPLO,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellRecordGetter>(p, s));
                    return (int)Race_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.WNAM:
                {
                    _SkinLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Skin;
                }
                case RecordTypeInts.BODT:
                case RecordTypeInts.BOD2:
                {
                    BodyTemplateCustomParse(
                        stream,
                        finalPos,
                        offset);
                    return (int)Race_FieldIndex.BodyTemplate;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Race_FieldIndex.Keywords;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x80)
                    {
                        this.DATADataTypeState |= Race.DATADataType.Break0;
                    }
                    return (int)Race_FieldIndex.MountData;
                }
                case RecordTypeInts.MNAM:
                case RecordTypeInts.FNAM:
                {
                    _SkeletalModelOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<ISimpleModelGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        stream: stream,
                        creator: static (s, p, r) => SimpleModelBinaryOverlay.SimpleModelFactory(s, p, r),
                        translationParams: Race_Registration.SkeletalModelConverter);
                    return (int)Race_FieldIndex.SkeletalModel;
                }
                case RecordTypeInts.MTNM:
                {
                    this.MovementTypeNames = BinaryOverlayList.FactoryByArray<String>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => BinaryStringUtility.ToZString(p.MetaData.Constants.Subrecord(s).Content, encoding: p.MetaData.Encodings.NonTranslated),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.MTNM,
                            skipHeader: false,
                            translationParams: translationParams));
                    return (int)Race_FieldIndex.MovementTypeNames;
                }
                case RecordTypeInts.VTCK:
                {
                    _VoicesLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Voices;
                }
                case RecordTypeInts.DNAM:
                {
                    _DecapitateArmorsLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.DecapitateArmors;
                }
                case RecordTypeInts.HCLF:
                {
                    _DefaultHairColorsLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.DefaultHairColors;
                }
                case RecordTypeInts.TINL:
                {
                    _NumberOfTintsInListLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.NumberOfTintsInList;
                }
                case RecordTypeInts.PNAM:
                {
                    _FacegenMainClampLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.FacegenMainClamp;
                }
                case RecordTypeInts.UNAM:
                {
                    _FacegenFaceClampLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.FacegenFaceClamp;
                }
                case RecordTypeInts.ATKR:
                {
                    _AttackRaceLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.AttackRace;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                {
                    this.Attacks = this.ParseRepeatedTypelessSubrecord<IAttackGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Attack_Registration.TriggerSpecs,
                        factory: AttackBinaryOverlay.AttackFactory);
                    return (int)Race_FieldIndex.Attacks;
                }
                case RecordTypeInts.NAM1:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    _BodyDataOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IBodyDataGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        stream: stream,
                        creator: static (s, p, r) => BodyDataBinaryOverlay.BodyDataFactory(s, p, r),
                        translationParams: translationParams);
                    return (int)Race_FieldIndex.BodyData;
                }
                case RecordTypeInts.HNAM:
                {
                    this.Hairs = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IHairGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IHairGetter>(p, s));
                    return (int)Race_FieldIndex.Hairs;
                }
                case RecordTypeInts.ENAM:
                {
                    this.Eyes = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IEyesGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IEyesGetter>(p, s));
                    return (int)Race_FieldIndex.Eyes;
                }
                case RecordTypeInts.GNAM:
                {
                    _BodyPartDataLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BodyPartData;
                }
                case RecordTypeInts.NAM3:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    _BehaviorGraphOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IModelGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        stream: stream,
                        creator: static (s, p, r) => ModelBinaryOverlay.ModelFactory(s, p, r),
                        translationParams: translationParams);
                    return (int)Race_FieldIndex.BehaviorGraph;
                }
                case RecordTypeInts.NAM4:
                {
                    _MaterialTypeLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.MaterialType;
                }
                case RecordTypeInts.NAM5:
                {
                    _ImpactDataSetLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.ImpactDataSet;
                }
                case RecordTypeInts.NAM7:
                {
                    _DecapitationFXLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.DecapitationFX;
                }
                case RecordTypeInts.ONAM:
                {
                    _OpenLootSoundLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.OpenLootSound;
                }
                case RecordTypeInts.LNAM:
                {
                    _CloseLootSoundLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.CloseLootSound;
                }
                case RecordTypeInts.NAME:
                {
                    BipedObjectNamesCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)Race_FieldIndex.BipedObjectNames;
                }
                case RecordTypeInts.MTYP:
                case RecordTypeInts.SPED:
                {
                    this.MovementTypes = this.ParseRepeatedTypelessSubrecord<IRaceMovementTypeGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: RaceMovementType_Registration.TriggerSpecs,
                        factory: RaceMovementTypeBinaryOverlay.RaceMovementTypeFactory);
                    return (int)Race_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.VNAM:
                {
                    _EquipmentFlagsLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.EquipmentFlags;
                }
                case RecordTypeInts.QNAM:
                {
                    this.EquipmentSlots = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IEquipTypeGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IEquipTypeGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.QNAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Race_FieldIndex.EquipmentSlots;
                }
                case RecordTypeInts.UNES:
                {
                    _UnarmedEquipSlotLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.UnarmedEquipSlot;
                }
                case RecordTypeInts.PHTN:
                {
                    return FaceFxPhonemesListingParsingCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.PHWT:
                {
                    return FaceFxPhonemesRawParsingCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.WKMV:
                {
                    _BaseMovementDefaultWalkLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefaultWalk;
                }
                case RecordTypeInts.RNMV:
                {
                    _BaseMovementDefaultRunLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefaultRun;
                }
                case RecordTypeInts.SWMV:
                {
                    _BaseMovementDefaultSwimLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefaultSwim;
                }
                case RecordTypeInts.FLMV:
                {
                    _BaseMovementDefaultFlyLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefaultFly;
                }
                case RecordTypeInts.SNMV:
                {
                    _BaseMovementDefaultSneakLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefaultSneak;
                }
                case RecordTypeInts.SPMV:
                {
                    _BaseMovementDefaultSprintLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.BaseMovementDefaultSprint;
                }
                case RecordTypeInts.NAM0:
                {
                    _HeadDataOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IHeadDataGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        marker: RecordTypes.NAM0,
                        stream: stream,
                        creator: static (s, p, r) => HeadDataBinaryOverlay.HeadDataFactory(s, p, r),
                        femaleRecordConverter: Race_Registration.HeadDataFemaleConverter);
                    return (int)Race_FieldIndex.HeadData;
                }
                case RecordTypeInts.NAM8:
                {
                    _MorphRaceLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.MorphRace;
                }
                case RecordTypeInts.RNAM:
                {
                    _ArmorRaceLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.ArmorRace;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Race>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRaceGetter rhs) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRaceGetter? obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

