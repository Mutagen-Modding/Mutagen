/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Class :
        SkyrimMajorRecord,
        IClassInternal,
        IEquatable<IClassGetter>,
        ILoquiObjectSetter<Class>
    {
        #region Ctor
        protected Class()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamedRequired, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString Name { get; set; } = string.Empty;
        ITranslatedStringGetter IClassGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Description
        public String Description { get; set; } = string.Empty;
        #endregion
        #region Icon
        public String? Icon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClassGetter.Icon => this.Icon;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default(Int32);
        #endregion
        #region Teaches
        public Skill? Teaches { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Skill? IClassGetter.Teaches => this.Teaches;
        #endregion
        #region MaxTrainingLevel
        public Byte MaxTrainingLevel { get; set; } = default(Byte);
        #endregion
        #region SkillWeights
        private readonly Dictionary<Skill, Byte> _SkillWeights = new Dictionary<Skill, Byte>();
        public IDictionary<Skill, Byte> SkillWeights => _SkillWeights;
        #region Interface Members
        IDictionary<Skill, Byte> IClass.SkillWeights => _SkillWeights;
        IReadOnlyDictionary<Skill, Byte> IClassGetter.SkillWeights => _SkillWeights;
        #endregion

        #endregion
        #region BleedoutDefault
        public Single BleedoutDefault { get; set; } = default(Single);
        #endregion
        #region VoicePoints
        public UInt32 VoicePoints { get; set; } = default(UInt32);
        #endregion
        #region StatWeights
        private readonly Dictionary<BasicStat, Byte> _StatWeights = new Dictionary<BasicStat, Byte>();
        public IDictionary<BasicStat, Byte> StatWeights => _StatWeights;
        #region Interface Members
        IDictionary<BasicStat, Byte> IClass.StatWeights => _StatWeights;
        IReadOnlyDictionary<BasicStat, Byte> IClassGetter.StatWeights => _StatWeights;
        #endregion

        #endregion
        #region Unknown2
        public Byte Unknown2 { get; set; } = default(Byte);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ClassMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Icon = initialValue;
                this.Unknown = initialValue;
                this.Teaches = initialValue;
                this.MaxTrainingLevel = initialValue;
                this.SkillWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>(initialValue, null);
                this.BleedoutDefault = initialValue;
                this.VoicePoints = initialValue;
                this.StatWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>(initialValue, null);
                this.Unknown2 = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem Name,
                TItem Description,
                TItem Icon,
                TItem Unknown,
                TItem Teaches,
                TItem MaxTrainingLevel,
                TItem SkillWeights,
                TItem BleedoutDefault,
                TItem VoicePoints,
                TItem StatWeights,
                TItem Unknown2)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.Name = Name;
                this.Description = Description;
                this.Icon = Icon;
                this.Unknown = Unknown;
                this.Teaches = Teaches;
                this.MaxTrainingLevel = MaxTrainingLevel;
                this.SkillWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>(SkillWeights, null);
                this.BleedoutDefault = BleedoutDefault;
                this.VoicePoints = VoicePoints;
                this.StatWeights = new MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>(StatWeights, null);
                this.Unknown2 = Unknown2;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public TItem Icon;
            public TItem Unknown;
            public TItem Teaches;
            public TItem MaxTrainingLevel;
            public MaskItem<TItem, IEnumerable<KeyValuePair<Skill, TItem>>?>? SkillWeights;
            public TItem BleedoutDefault;
            public TItem VoicePoints;
            public MaskItem<TItem, IEnumerable<KeyValuePair<BasicStat, TItem>>?>? StatWeights;
            public TItem Unknown2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.MaxTrainingLevel, rhs.MaxTrainingLevel)) return false;
                if (!object.Equals(this.SkillWeights, rhs.SkillWeights)) return false;
                if (!object.Equals(this.BleedoutDefault, rhs.BleedoutDefault)) return false;
                if (!object.Equals(this.VoicePoints, rhs.VoicePoints)) return false;
                if (!object.Equals(this.StatWeights, rhs.StatWeights)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.Icon);
                hash.Add(this.Unknown);
                hash.Add(this.Teaches);
                hash.Add(this.MaxTrainingLevel);
                hash.Add(this.SkillWeights);
                hash.Add(this.BleedoutDefault);
                hash.Add(this.VoicePoints);
                hash.Add(this.StatWeights);
                hash.Add(this.Unknown2);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Icon)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Teaches)) return false;
                if (!eval(this.MaxTrainingLevel)) return false;
                if (this.SkillWeights != null)
                {
                    if (!eval(this.SkillWeights.Overall)) return false;
                    if (this.SkillWeights.Specific != null)
                    {
                        foreach (var item in this.SkillWeights.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.BleedoutDefault)) return false;
                if (!eval(this.VoicePoints)) return false;
                if (this.StatWeights != null)
                {
                    if (!eval(this.StatWeights.Overall)) return false;
                    if (this.StatWeights.Specific != null)
                    {
                        foreach (var item in this.StatWeights.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Unknown2)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.Icon)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Teaches)) return true;
                if (eval(this.MaxTrainingLevel)) return true;
                if (this.SkillWeights != null)
                {
                    if (eval(this.SkillWeights.Overall)) return true;
                    if (this.SkillWeights.Specific != null)
                    {
                        foreach (var item in this.SkillWeights.Specific)
                        {
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (eval(this.BleedoutDefault)) return true;
                if (eval(this.VoicePoints)) return true;
                if (this.StatWeights != null)
                {
                    if (eval(this.StatWeights.Overall)) return true;
                    if (this.StatWeights.Specific != null)
                    {
                        foreach (var item in this.StatWeights.Specific)
                        {
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                if (eval(this.Unknown2)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Class.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                obj.Icon = eval(this.Icon);
                obj.Unknown = eval(this.Unknown);
                obj.Teaches = eval(this.Teaches);
                obj.MaxTrainingLevel = eval(this.MaxTrainingLevel);
                if (SkillWeights != null)
                {
                    obj.SkillWeights = new MaskItem<R, IEnumerable<KeyValuePair<Skill, R>>?>(eval(this.SkillWeights.Overall), default);
                    if (SkillWeights.Specific != null)
                    {
                        List<KeyValuePair<Skill, R>> l = new List<KeyValuePair<Skill, R>>();
                        obj.SkillWeights.Specific = l;
                        foreach (var item in SkillWeights.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                obj.BleedoutDefault = eval(this.BleedoutDefault);
                obj.VoicePoints = eval(this.VoicePoints);
                if (StatWeights != null)
                {
                    obj.StatWeights = new MaskItem<R, IEnumerable<KeyValuePair<BasicStat, R>>?>(eval(this.StatWeights.Overall), default);
                    if (StatWeights.Specific != null)
                    {
                        List<KeyValuePair<BasicStat, R>> l = new List<KeyValuePair<BasicStat, R>>();
                        obj.StatWeights.Specific = l;
                        foreach (var item in StatWeights.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
                obj.Unknown2 = eval(this.Unknown2);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Class.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Class.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Class.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if (printMask?.Icon ?? true)
                    {
                        sb.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Teaches ?? true)
                    {
                        sb.AppendItem(Teaches, "Teaches");
                    }
                    if (printMask?.MaxTrainingLevel ?? true)
                    {
                        sb.AppendItem(MaxTrainingLevel, "MaxTrainingLevel");
                    }
                    if (printMask?.SkillWeights?.Overall ?? true)
                    {
                        sb.AppendLine("SkillWeights =>");
                        using (sb.Brace())
                        {
                            if (SkillWeights != null)
                            {
                                if (SkillWeights.Overall != null)
                                {
                                    sb.AppendLine(SkillWeights.Overall.ToString());
                                }
                                if (SkillWeights.Specific != null)
                                {
                                    foreach (var subItem in SkillWeights.Specific)
                                    {
                                        using (sb.Brace())
                                        {
                                            sb.AppendLine("Key => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Key);
                                                }
                                            }
                                            sb.AppendLine("]");
                                            sb.AppendLine("Value => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Value);
                                                }
                                            }
                                            sb.AppendLine("]");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.BleedoutDefault ?? true)
                    {
                        sb.AppendItem(BleedoutDefault, "BleedoutDefault");
                    }
                    if (printMask?.VoicePoints ?? true)
                    {
                        sb.AppendItem(VoicePoints, "VoicePoints");
                    }
                    if (printMask?.StatWeights?.Overall ?? true)
                    {
                        sb.AppendLine("StatWeights =>");
                        using (sb.Brace())
                        {
                            if (StatWeights != null)
                            {
                                if (StatWeights.Overall != null)
                                {
                                    sb.AppendLine(StatWeights.Overall.ToString());
                                }
                                if (StatWeights.Specific != null)
                                {
                                    foreach (var subItem in StatWeights.Specific)
                                    {
                                        using (sb.Brace())
                                        {
                                            sb.AppendLine("Key => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Key);
                                                }
                                            }
                                            sb.AppendLine("]");
                                            sb.AppendLine("Value => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Value);
                                                }
                                            }
                                            sb.AppendLine("]");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public Exception? Icon;
            public Exception? Unknown;
            public Exception? Teaches;
            public Exception? MaxTrainingLevel;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>? SkillWeights;
            public Exception? BleedoutDefault;
            public Exception? VoicePoints;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>? StatWeights;
            public Exception? Unknown2;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        return Name;
                    case Class_FieldIndex.Description:
                        return Description;
                    case Class_FieldIndex.Icon:
                        return Icon;
                    case Class_FieldIndex.Unknown:
                        return Unknown;
                    case Class_FieldIndex.Teaches:
                        return Teaches;
                    case Class_FieldIndex.MaxTrainingLevel:
                        return MaxTrainingLevel;
                    case Class_FieldIndex.SkillWeights:
                        return SkillWeights;
                    case Class_FieldIndex.BleedoutDefault:
                        return BleedoutDefault;
                    case Class_FieldIndex.VoicePoints:
                        return VoicePoints;
                    case Class_FieldIndex.StatWeights:
                        return StatWeights;
                    case Class_FieldIndex.Unknown2:
                        return Unknown2;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Class_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Class_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Class_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Class_FieldIndex.Teaches:
                        this.Teaches = ex;
                        break;
                    case Class_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = ex;
                        break;
                    case Class_FieldIndex.SkillWeights:
                        this.SkillWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>(ex, null);
                        break;
                    case Class_FieldIndex.BleedoutDefault:
                        this.BleedoutDefault = ex;
                        break;
                    case Class_FieldIndex.VoicePoints:
                        this.VoicePoints = ex;
                        break;
                    case Class_FieldIndex.StatWeights:
                        this.StatWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>(ex, null);
                        break;
                    case Class_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Teaches:
                        this.Teaches = (Exception?)obj;
                        break;
                    case Class_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = (Exception?)obj;
                        break;
                    case Class_FieldIndex.SkillWeights:
                        this.SkillWeights = (MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>)obj;
                        break;
                    case Class_FieldIndex.BleedoutDefault:
                        this.BleedoutDefault = (Exception?)obj;
                        break;
                    case Class_FieldIndex.VoicePoints:
                        this.VoicePoints = (Exception?)obj;
                        break;
                    case Class_FieldIndex.StatWeights:
                        this.StatWeights = (MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>)obj;
                        break;
                    case Class_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Icon != null) return true;
                if (Unknown != null) return true;
                if (Teaches != null) return true;
                if (MaxTrainingLevel != null) return true;
                if (SkillWeights != null) return true;
                if (BleedoutDefault != null) return true;
                if (VoicePoints != null) return true;
                if (StatWeights != null) return true;
                if (Unknown2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                {
                    sb.AppendItem(Icon, "Icon");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(Teaches, "Teaches");
                }
                {
                    sb.AppendItem(MaxTrainingLevel, "MaxTrainingLevel");
                }
                {
                    sb.AppendLine("SkillWeights =>");
                    using (sb.Brace())
                    {
                        if (SkillWeights != null)
                        {
                            if (SkillWeights.Overall != null)
                            {
                                sb.AppendLine(SkillWeights.Overall.ToString());
                            }
                            if (SkillWeights.Specific != null)
                            {
                                foreach (var subItem in SkillWeights.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        sb.AppendLine("Key => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Key);
                                            }
                                        }
                                        sb.AppendLine("]");
                                        sb.AppendLine("Value => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Value);
                                            }
                                        }
                                        sb.AppendLine("]");
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(BleedoutDefault, "BleedoutDefault");
                }
                {
                    sb.AppendItem(VoicePoints, "VoicePoints");
                }
                {
                    sb.AppendLine("StatWeights =>");
                    using (sb.Brace())
                    {
                        if (StatWeights != null)
                        {
                            if (StatWeights.Overall != null)
                            {
                                sb.AppendLine(StatWeights.Overall.ToString());
                            }
                            if (StatWeights.Specific != null)
                            {
                                foreach (var subItem in StatWeights.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        sb.AppendLine("Key => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Key);
                                            }
                                        }
                                        sb.AppendLine("]");
                                        sb.AppendLine("Value => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Value);
                                            }
                                        }
                                        sb.AppendLine("]");
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches);
                ret.MaxTrainingLevel = this.MaxTrainingLevel.Combine(rhs.MaxTrainingLevel);
                ret.SkillWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<Skill, Exception?>>?>(Noggog.ExceptionExt.Combine(this.SkillWeights?.Overall, rhs.SkillWeights?.Overall), Noggog.ExceptionExt.Combine(this.SkillWeights?.Specific, rhs.SkillWeights?.Specific));
                ret.BleedoutDefault = this.BleedoutDefault.Combine(rhs.BleedoutDefault);
                ret.VoicePoints = this.VoicePoints.Combine(rhs.VoicePoints);
                ret.StatWeights = new MaskItem<Exception?, IEnumerable<KeyValuePair<BasicStat, Exception?>>?>(Noggog.ExceptionExt.Combine(this.StatWeights?.Overall, rhs.StatWeights?.Overall), Noggog.ExceptionExt.Combine(this.StatWeights?.Specific, rhs.StatWeights?.Specific));
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool Icon;
            public bool Unknown;
            public bool Teaches;
            public bool MaxTrainingLevel;
            public bool SkillWeights;
            public bool BleedoutDefault;
            public bool VoicePoints;
            public bool StatWeights;
            public bool Unknown2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Icon = defaultOn;
                this.Unknown = defaultOn;
                this.Teaches = defaultOn;
                this.MaxTrainingLevel = defaultOn;
                this.SkillWeights = defaultOn;
                this.BleedoutDefault = defaultOn;
                this.VoicePoints = defaultOn;
                this.StatWeights = defaultOn;
                this.Unknown2 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Icon, null));
                ret.Add((Unknown, null));
                ret.Add((Teaches, null));
                ret.Add((MaxTrainingLevel, null));
                ret.Add((SkillWeights, null));
                ret.Add((BleedoutDefault, null));
                ret.Add((VoicePoints, null));
                ret.Add((StatWeights, null));
                ret.Add((Unknown2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Class_Registration.TriggeringRecordType;
        public Class(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Class(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Class(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Class(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Class(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Class>.ToString(this);
        }

        protected override Type LinkType => typeof(IClass);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IClassGetter rhs) return false;
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IClassGetter? obj)
        {
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ClassCommon)((IClassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Class CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Class();
            ((ClassSetterCommon)((IClassGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Class item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ClassSetterCommon)((IClassGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Class GetNew()
        {
            return new Class();
        }

    }
    #endregion

    #region Interface
    public partial interface IClass :
        IClassGetter,
        ILoquiObjectSetter<IClassInternal>,
        INamedRequired,
        ISkyrimMajorRecordInternal,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: INamedRequired, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString Name { get; set; }
        new String Description { get; set; }
        new String? Icon { get; set; }
        new Int32 Unknown { get; set; }
        new Skill? Teaches { get; set; }
        new Byte MaxTrainingLevel { get; set; }
        new IDictionary<Skill, Byte> SkillWeights { get; }
        new Single BleedoutDefault { get; set; }
        new UInt32 VoicePoints { get; set; }
        new IDictionary<BasicStat, Byte> StatWeights { get; }
        new Byte Unknown2 { get; set; }
    }

    public partial interface IClassInternal :
        ISkyrimMajorRecordInternal,
        IClass,
        IClassGetter
    {
        new IDictionary<Skill, Byte> SkillWeights { get; }
        new IDictionary<BasicStat, Byte> StatWeights { get; }
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.CLAS)]
    public partial interface IClassGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IClassGetter>,
        IMapsToGetter<IClassGetter>,
        INamedRequiredGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Class_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedRequiredGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter Name { get; }
        #endregion
        String Description { get; }
        String? Icon { get; }
        Int32 Unknown { get; }
        Skill? Teaches { get; }
        Byte MaxTrainingLevel { get; }
        IReadOnlyDictionary<Skill, Byte> SkillWeights { get; }
        Single BleedoutDefault { get; }
        UInt32 VoicePoints { get; }
        IReadOnlyDictionary<BasicStat, Byte> StatWeights { get; }
        Byte Unknown2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClassMixIn
    {
        public static void Clear(this IClassInternal item)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Class.Mask<bool> GetEqualsMask(
            this IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IClassGetter item,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IClassGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IClassGetter item,
            IClassGetter rhs,
            Class.TranslationMask? equalsMask = null)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IClassInternal lhs,
            IClassGetter rhs,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassSetterTranslationCommon)((IClassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClassInternal lhs,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClassSetterTranslationCommon)((IClassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Class Duplicate(
            this IClassGetter item,
            FormKey formKey,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Class Duplicate(
            this IClassGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IClassInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Class_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        Name = 7,
        Description = 8,
        Icon = 9,
        Unknown = 10,
        Teaches = 11,
        MaxTrainingLevel = 12,
        SkillWeights = 13,
        BleedoutDefault = 14,
        VoicePoints = 15,
        StatWeights = 16,
        Unknown2 = 17,
    }
    #endregion

    #region Registration
    internal partial class Class_Registration : ILoquiRegistration
    {
        public static readonly Class_Registration Instance = new Class_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(Class.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Class.ErrorMask);

        public static readonly Type ClassType = typeof(Class);

        public static readonly Type GetterType = typeof(IClassGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClass);

        public static readonly Type? InternalSetterType = typeof(IClassInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Class";

        public const string Name = "Class";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CLAS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CLAS);
            var all = RecordCollection.Factory(
                RecordTypes.CLAS,
                RecordTypes.FULL,
                RecordTypes.DESC,
                RecordTypes.ICON,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ClassBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ClassSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ClassSetterCommon Instance = new ClassSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClassInternal item)
        {
            ClearPartial();
            item.Name.Clear();
            item.Description = string.Empty;
            item.Icon = default;
            item.Unknown = default(Int32);
            item.Teaches = default;
            item.MaxTrainingLevel = default(Byte);
            item.SkillWeights.Clear();
            item.BleedoutDefault = default(Single);
            item.VoicePoints = default(UInt32);
            item.StatWeights.Clear();
            item.Unknown2 = default(Byte);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IClass obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IClassInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IClassInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ClassBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ClassBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Class)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Class)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ClassCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ClassCommon Instance = new ClassCommon();

        public Class.Mask<bool> GetEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Class.Mask<bool>(false);
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            Class.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaxTrainingLevel = item.MaxTrainingLevel == rhs.MaxTrainingLevel;
            ret.SkillWeights = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.SkillWeights,
                rhs: rhs.SkillWeights,
                include: include);
            ret.BleedoutDefault = item.BleedoutDefault.EqualsWithin(rhs.BleedoutDefault);
            ret.VoicePoints = item.VoicePoints == rhs.VoicePoints;
            ret.StatWeights = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.StatWeights,
                rhs: rhs.StatWeights,
                include: include);
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IClassGetter item,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IClassGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Class =>");
            }
            else
            {
                sb.AppendLine($"{name} (Class) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IClassGetter item,
            StructuredStringBuilder sb,
            Class.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                sb.AppendItem(item.Name, "Name");
            }
            if (printMask?.Description ?? true)
            {
                sb.AppendItem(item.Description, "Description");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon is {} IconItem)
            {
                sb.AppendItem(IconItem, "Icon");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if ((printMask?.Teaches ?? true)
                && item.Teaches is {} TeachesItem)
            {
                sb.AppendItem(TeachesItem, "Teaches");
            }
            if (printMask?.MaxTrainingLevel ?? true)
            {
                sb.AppendItem(item.MaxTrainingLevel, "MaxTrainingLevel");
            }
            if (printMask?.SkillWeights?.Overall ?? true)
            {
                sb.AppendLine("SkillWeights =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.SkillWeights)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value);
                        }
                    }
                }
            }
            if (printMask?.BleedoutDefault ?? true)
            {
                sb.AppendItem(item.BleedoutDefault, "BleedoutDefault");
            }
            if (printMask?.VoicePoints ?? true)
            {
                sb.AppendItem(item.VoicePoints, "VoicePoints");
            }
            if (printMask?.StatWeights?.Overall ?? true)
            {
                sb.AppendLine("StatWeights =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.StatWeights)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value);
                        }
                    }
                }
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
        }
        
        public static Class_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Class_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Class_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClassGetter? lhs,
            IClassGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Teaches) ?? true))
            {
                if (lhs.Teaches != rhs.Teaches) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.MaxTrainingLevel) ?? true))
            {
                if (lhs.MaxTrainingLevel != rhs.MaxTrainingLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.SkillWeights) ?? true))
            {
                if (!lhs.SkillWeights.SequenceEqualNullable(rhs.SkillWeights)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.BleedoutDefault) ?? true))
            {
                if (!lhs.BleedoutDefault.EqualsWithin(rhs.BleedoutDefault)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.VoicePoints) ?? true))
            {
                if (lhs.VoicePoints != rhs.VoicePoints) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.StatWeights) ?? true))
            {
                if (!lhs.StatWeights.SequenceEqualNullable(rhs.StatWeights)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown2) ?? true))
            {
                if (lhs.Unknown2 != rhs.Unknown2) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IClassGetter?)lhs,
                rhs: rhs as IClassGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IClassGetter?)lhs,
                rhs: rhs as IClassGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IClassGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Name);
            hash.Add(item.Description);
            if (item.Icon is {} Iconitem)
            {
                hash.Add(Iconitem);
            }
            hash.Add(item.Unknown);
            if (item.Teaches is {} Teachesitem)
            {
                hash.Add(Teachesitem);
            }
            hash.Add(item.MaxTrainingLevel);
            hash.Add(item.SkillWeights);
            hash.Add(item.BleedoutDefault);
            hash.Add(item.VoicePoints);
            hash.Add(item.StatWeights);
            hash.Add(item.Unknown2);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IClassGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClassGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Class.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IClassGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Class Duplicate(
            IClassGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Class(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IClassGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IClassGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ClassSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ClassSetterTranslationCommon Instance = new ClassSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IClassInternal item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IClass item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Teaches) ?? true))
            {
                item.Teaches = rhs.Teaches;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.MaxTrainingLevel) ?? true))
            {
                item.MaxTrainingLevel = rhs.MaxTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.SkillWeights) ?? true))
            {
                item.SkillWeights.SetTo(rhs.SkillWeights);
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.BleedoutDefault) ?? true))
            {
                item.BleedoutDefault = rhs.BleedoutDefault;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.VoicePoints) ?? true))
            {
                item.VoicePoints = rhs.VoicePoints;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.StatWeights) ?? true))
            {
                item.StatWeights.SetTo(rhs.StatWeights);
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IClass item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClassInternal)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClass)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClassInternal)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClass)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Class DeepCopy(
            IClassGetter item,
            Class.TranslationMask? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ((ClassSetterTranslationCommon)((IClassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Class DeepCopy(
            IClassGetter item,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ((ClassSetterTranslationCommon)((IClassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Class DeepCopy(
            IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ((ClassSetterTranslationCommon)((IClassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Class
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Class_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClassSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClassSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class ClassBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ClassBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IClassGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Unknown);
                EnumBinaryTranslation<Skill, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    ((int?)item.Teaches) ?? -1,
                    length: 1);
                writer.Write(item.MaxTrainingLevel);
                Mutagen.Bethesda.Plugins.Binary.Translations.DictBinaryTranslation<Byte>.Instance.Write(
                    writer: writer,
                    items: item.SkillWeights,
                    transl: ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.BleedoutDefault);
                writer.Write(item.VoicePoints);
                Mutagen.Bethesda.Plugins.Binary.Translations.DictBinaryTranslation<Byte>.Instance.Write(
                    writer: writer,
                    items: item.StatWeights,
                    transl: ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
                writer.Write(item.Unknown2);
            }
        }

        public void Write(
            MutagenWriter writer,
            IClassGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.CLAS,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ClassBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly ClassBinaryCreateTranslation Instance = new ClassBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CLAS;
        public static ParseResult FillBinaryRecordTypes(
            IClassInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Class_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Class_FieldIndex.Description;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Icon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Class_FieldIndex.Icon;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 1) return null;
                    item.Teaches = EnumBinaryTranslation<Skill, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.MaxTrainingLevel = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 18) return null;
                    Mutagen.Bethesda.Plugins.Binary.Translations.DictBinaryTranslation<Byte>.Instance.Parse<Skill>(
                        reader: frame,
                        item: item.SkillWeights,
                        transl: ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    if (dataFrame.Remaining < 4) return null;
                    item.BleedoutDefault = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.VoicePoints = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 3) return null;
                    Mutagen.Bethesda.Plugins.Binary.Translations.DictBinaryTranslation<Byte>.Instance.Parse<BasicStat>(
                        reader: frame,
                        item: item.StatWeights,
                        transl: ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    if (dataFrame.Remaining < 1) return null;
                    item.Unknown2 = dataFrame.ReadUInt8();
                    return (int)Class_FieldIndex.Unknown2;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ClassBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class ClassBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IClassGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Class_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClassSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IClass);


        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : TranslatedString.Empty;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        #endregion
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IconLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        private RangeInt32? _DATALocation;
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value.Min;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public Int32 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_UnknownLocation, 4)) : default(Int32);
        #endregion
        #region Teaches
        private int _TeachesLocation => _DATALocation!.Value.Min + 0x4;
        private bool _Teaches_IsSet => _DATALocation.HasValue;
        public Skill? Teaches
        {
            get
            {
                var val = (Skill)_recordData.Span.Slice(_TeachesLocation, 0x1)[0];
                if (((int)val) == -1) return null;
                return val;
            }
        }
        #endregion
        #region MaxTrainingLevel
        private int _MaxTrainingLevelLocation => _DATALocation!.Value.Min + 0x5;
        private bool _MaxTrainingLevel_IsSet => _DATALocation.HasValue;
        public Byte MaxTrainingLevel => _MaxTrainingLevel_IsSet ? _recordData.Span[_MaxTrainingLevelLocation] : default;
        #endregion
        #region SkillWeights
        private int _SkillWeightsLocation => _DATALocation!.Value.Min + 0x6;
        private bool _SkillWeights_IsSet => _DATALocation.HasValue;
        public IReadOnlyDictionary<Skill, Byte> SkillWeights => DictBinaryTranslation<Byte>.Instance.Parse<Skill>(
            new MutagenFrame(new MutagenMemoryReadStream(_recordData.Slice(_SkillWeightsLocation), _package.MetaData)),
            new Dictionary<Skill, Byte>(),
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
        #endregion
        #region BleedoutDefault
        private int _BleedoutDefaultLocation => _DATALocation!.Value.Min + 0x18;
        private bool _BleedoutDefault_IsSet => _DATALocation.HasValue;
        public Single BleedoutDefault => _BleedoutDefault_IsSet ? _recordData.Slice(_BleedoutDefaultLocation, 4).Float() : default(Single);
        #endregion
        #region VoicePoints
        private int _VoicePointsLocation => _DATALocation!.Value.Min + 0x1C;
        private bool _VoicePoints_IsSet => _DATALocation.HasValue;
        public UInt32 VoicePoints => _VoicePoints_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_VoicePointsLocation, 4)) : default(UInt32);
        #endregion
        #region StatWeights
        private int _StatWeightsLocation => _DATALocation!.Value.Min + 0x20;
        private bool _StatWeights_IsSet => _DATALocation.HasValue;
        public IReadOnlyDictionary<BasicStat, Byte> StatWeights => DictBinaryTranslation<Byte>.Instance.Parse<BasicStat>(
            new MutagenFrame(new MutagenMemoryReadStream(_recordData.Slice(_StatWeightsLocation), _package.MetaData)),
            new Dictionary<BasicStat, Byte>(),
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
        #endregion
        #region Unknown2
        private int _Unknown2Location => _DATALocation!.Value.Min + 0x23;
        private bool _Unknown2_IsSet => _DATALocation.HasValue;
        public Byte Unknown2 => _Unknown2_IsSet ? _recordData.Span[_Unknown2Location] : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ClassBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IClassGetter ClassFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ClassBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IClassGetter ClassFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ClassFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Class_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Class_FieldIndex.Description;
                }
                case RecordTypeInts.ICON:
                {
                    _IconLocation = (stream.Position - offset);
                    return (int)Class_FieldIndex.Icon;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Class_FieldIndex.Unknown2;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ClassMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Class>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IClassGetter rhs) return false;
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IClassGetter? obj)
        {
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ClassCommon)((IClassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

