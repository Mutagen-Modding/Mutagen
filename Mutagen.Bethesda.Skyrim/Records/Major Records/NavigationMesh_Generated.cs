/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class NavigationMesh :
        SkyrimMajorRecord,
        IEquatable<INavigationMeshGetter>,
        ILoquiObjectSetter<NavigationMesh>,
        INavigationMeshInternal
    {
        #region Ctor
        protected NavigationMesh()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NavigationMeshData? _Data;
        public NavigationMeshData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INavigationMeshDataGetter? INavigationMeshGetter.Data => this.Data;
        #endregion
        #region ONAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ONAM;
        public MemorySlice<Byte>? ONAM
        {
            get => this._ONAM;
            set => this._ONAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INavigationMeshGetter.ONAM => this.ONAM;
        #endregion
        #region PNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _PNAM;
        public MemorySlice<Byte>? PNAM
        {
            get => this._PNAM;
            set => this._PNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INavigationMeshGetter.PNAM => this.PNAM;
        #endregion
        #region NNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NNAM;
        public MemorySlice<Byte>? NNAM
        {
            get => this._NNAM;
            set => this._NNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INavigationMeshGetter.NNAM => this.NNAM;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavigationMeshMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Data = new MaskItem<TItem, NavigationMeshData.Mask<TItem>?>(initialValue, new NavigationMeshData.Mask<TItem>(initialValue));
                this.ONAM = initialValue;
                this.PNAM = initialValue;
                this.NNAM = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem Data,
                TItem ONAM,
                TItem PNAM,
                TItem NNAM)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.Data = new MaskItem<TItem, NavigationMeshData.Mask<TItem>?>(Data, new NavigationMeshData.Mask<TItem>(Data));
                this.ONAM = ONAM;
                this.PNAM = PNAM;
                this.NNAM = NNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, NavigationMeshData.Mask<TItem>?>? Data { get; set; }
            public TItem ONAM;
            public TItem PNAM;
            public TItem NNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.ONAM, rhs.ONAM)) return false;
                if (!object.Equals(this.PNAM, rhs.PNAM)) return false;
                if (!object.Equals(this.NNAM, rhs.NNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Data);
                hash.Add(this.ONAM);
                hash.Add(this.PNAM);
                hash.Add(this.NNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!eval(this.ONAM)) return false;
                if (!eval(this.PNAM)) return false;
                if (!eval(this.NNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (eval(this.ONAM)) return true;
                if (eval(this.PNAM)) return true;
                if (eval(this.NNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new NavigationMesh.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Data = this.Data == null ? null : new MaskItem<R, NavigationMeshData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.ONAM = eval(this.ONAM);
                obj.PNAM = eval(this.PNAM);
                obj.NNAM = eval(this.NNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(NavigationMesh.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, NavigationMesh.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(NavigationMesh.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if (printMask?.ONAM ?? true)
                    {
                        sb.AppendItem(ONAM, "ONAM");
                    }
                    if (printMask?.PNAM ?? true)
                    {
                        sb.AppendItem(PNAM, "PNAM");
                    }
                    if (printMask?.NNAM ?? true)
                    {
                        sb.AppendItem(NNAM, "NNAM");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, NavigationMeshData.ErrorMask?>? Data;
            public Exception? ONAM;
            public Exception? PNAM;
            public Exception? NNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                NavigationMesh_FieldIndex enu = (NavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMesh_FieldIndex.Data:
                        return Data;
                    case NavigationMesh_FieldIndex.ONAM:
                        return ONAM;
                    case NavigationMesh_FieldIndex.PNAM:
                        return PNAM;
                    case NavigationMesh_FieldIndex.NNAM:
                        return NNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                NavigationMesh_FieldIndex enu = (NavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMesh_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, NavigationMeshData.ErrorMask?>(ex, null);
                        break;
                    case NavigationMesh_FieldIndex.ONAM:
                        this.ONAM = ex;
                        break;
                    case NavigationMesh_FieldIndex.PNAM:
                        this.PNAM = ex;
                        break;
                    case NavigationMesh_FieldIndex.NNAM:
                        this.NNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                NavigationMesh_FieldIndex enu = (NavigationMesh_FieldIndex)index;
                switch (enu)
                {
                    case NavigationMesh_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, NavigationMeshData.ErrorMask?>?)obj;
                        break;
                    case NavigationMesh_FieldIndex.ONAM:
                        this.ONAM = (Exception?)obj;
                        break;
                    case NavigationMesh_FieldIndex.PNAM:
                        this.PNAM = (Exception?)obj;
                        break;
                    case NavigationMesh_FieldIndex.NNAM:
                        this.NNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Data != null) return true;
                if (ONAM != null) return true;
                if (PNAM != null) return true;
                if (NNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                Data?.Print(sb);
                {
                    sb.AppendItem(ONAM, "ONAM");
                }
                {
                    sb.AppendItem(PNAM, "PNAM");
                }
                {
                    sb.AppendItem(NNAM, "NNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.ONAM = this.ONAM.Combine(rhs.ONAM);
                ret.PNAM = this.PNAM.Combine(rhs.PNAM);
                ret.NNAM = this.NNAM.Combine(rhs.NNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public NavigationMeshData.TranslationMask? Data;
            public bool ONAM;
            public bool PNAM;
            public bool NNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ONAM = defaultOn;
                this.PNAM = defaultOn;
                this.NNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((ONAM, null));
                ret.Add((PNAM, null));
                ret.Add((NNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = NavigationMesh_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NavigationMeshCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NavigationMeshSetterCommon.Instance.RemapLinks(this, mapping);
        public NavigationMesh(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private NavigationMesh(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal NavigationMesh(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public NavigationMesh(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public NavigationMesh(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<NavigationMesh>.ToString(this);
        }

        protected override Type LinkType => typeof(INavigationMesh);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not INavigationMeshGetter rhs) return false;
            return ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INavigationMeshGetter? obj)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NavigationMeshBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavigationMeshBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static NavigationMesh CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new NavigationMesh();
            ((NavigationMeshSetterCommon)((INavigationMeshGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out NavigationMesh item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NavigationMeshSetterCommon)((INavigationMeshGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new NavigationMesh GetNew()
        {
            return new NavigationMesh();
        }

    }
    #endregion

    #region Interface
    public partial interface INavigationMesh :
        IFormLinkContainer,
        ILoquiObjectSetter<INavigationMeshInternal>,
        INavigationMeshGetter,
        ISkyrimMajorRecordInternal
    {
        new NavigationMeshData? Data { get; set; }
        new MemorySlice<Byte>? ONAM { get; set; }
        new MemorySlice<Byte>? PNAM { get; set; }
        new MemorySlice<Byte>? NNAM { get; set; }
        #region Mutagen
        new NavigationMesh.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface INavigationMeshInternal :
        ISkyrimMajorRecordInternal,
        INavigationMesh,
        INavigationMeshGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.NAVM)]
    public partial interface INavigationMeshGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<INavigationMeshGetter>,
        IMapsToGetter<INavigationMeshGetter>
    {
        static new ILoquiRegistration StaticRegistration => NavigationMesh_Registration.Instance;
        INavigationMeshDataGetter? Data { get; }
        ReadOnlyMemorySlice<Byte>? ONAM { get; }
        ReadOnlyMemorySlice<Byte>? PNAM { get; }
        ReadOnlyMemorySlice<Byte>? NNAM { get; }

        #region Mutagen
        NavigationMesh.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class NavigationMeshMixIn
    {
        public static void Clear(this INavigationMeshInternal item)
        {
            ((NavigationMeshSetterCommon)((INavigationMeshGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static NavigationMesh.Mask<bool> GetEqualsMask(
            this INavigationMeshGetter item,
            INavigationMeshGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INavigationMeshGetter item,
            string? name = null,
            NavigationMesh.Mask<bool>? printMask = null)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INavigationMeshGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavigationMesh.Mask<bool>? printMask = null)
        {
            ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INavigationMeshGetter item,
            INavigationMeshGetter rhs,
            NavigationMesh.TranslationMask? equalsMask = null)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INavigationMeshInternal lhs,
            INavigationMeshGetter rhs,
            out NavigationMesh.ErrorMask errorMask,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = NavigationMesh.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INavigationMeshInternal lhs,
            INavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static NavigationMesh DeepCopy(
            this INavigationMeshGetter item,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static NavigationMesh DeepCopy(
            this INavigationMeshGetter item,
            out NavigationMesh.ErrorMask errorMask,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static NavigationMesh DeepCopy(
            this INavigationMeshGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static NavigationMesh Duplicate(
            this INavigationMeshGetter item,
            FormKey formKey,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static NavigationMesh Duplicate(
            this INavigationMeshGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this INavigationMeshInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NavigationMeshSetterCommon)((INavigationMeshGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum NavigationMesh_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        Data = 7,
        ONAM = 8,
        PNAM = 9,
        NNAM = 10,
    }
    #endregion

    #region Registration
    internal partial class NavigationMesh_Registration : ILoquiRegistration
    {
        public static readonly NavigationMesh_Registration Instance = new NavigationMesh_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(NavigationMesh.Mask<>);

        public static readonly Type ErrorMaskType = typeof(NavigationMesh.ErrorMask);

        public static readonly Type ClassType = typeof(NavigationMesh);

        public static readonly Type GetterType = typeof(INavigationMeshGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INavigationMesh);

        public static readonly Type? InternalSetterType = typeof(INavigationMeshInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.NavigationMesh";

        public const string Name = "NavigationMesh";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NAVM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NAVM);
            var all = RecordCollection.Factory(
                RecordTypes.NAVM,
                RecordTypes.NVNM,
                RecordTypes.XXXX,
                RecordTypes.ONAM,
                RecordTypes.PNAM,
                RecordTypes.NNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NavigationMeshBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NavigationMeshSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly NavigationMeshSetterCommon Instance = new NavigationMeshSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INavigationMeshInternal item)
        {
            ClearPartial();
            item.Data = null;
            item.ONAM = default;
            item.PNAM = default;
            item.NNAM = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (INavigationMeshInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INavigationMeshInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(INavigationMesh obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Data?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INavigationMeshInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<INavigationMeshInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NavigationMeshBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NavigationMeshBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (NavigationMesh)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (NavigationMesh)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class NavigationMeshCommon : SkyrimMajorRecordCommon
    {
        public new static readonly NavigationMeshCommon Instance = new NavigationMeshCommon();

        public NavigationMesh.Mask<bool> GetEqualsMask(
            INavigationMeshGetter item,
            INavigationMeshGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new NavigationMesh.Mask<bool>(false);
            ((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INavigationMeshGetter item,
            INavigationMeshGetter rhs,
            NavigationMesh.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ONAM = MemorySliceExt.SequenceEqual(item.ONAM, rhs.ONAM);
            ret.PNAM = MemorySliceExt.SequenceEqual(item.PNAM, rhs.PNAM);
            ret.NNAM = MemorySliceExt.SequenceEqual(item.NNAM, rhs.NNAM);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            INavigationMeshGetter item,
            string? name = null,
            NavigationMesh.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INavigationMeshGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            NavigationMesh.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"NavigationMesh =>");
            }
            else
            {
                sb.AppendLine($"{name} (NavigationMesh) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INavigationMeshGetter item,
            StructuredStringBuilder sb,
            NavigationMesh.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if ((printMask?.ONAM ?? true)
                && item.ONAM is {} ONAMItem)
            {
                sb.AppendLine($"ONAM => {SpanExt.ToHexString(ONAMItem)}");
            }
            if ((printMask?.PNAM ?? true)
                && item.PNAM is {} PNAMItem)
            {
                sb.AppendLine($"PNAM => {SpanExt.ToHexString(PNAMItem)}");
            }
            if ((printMask?.NNAM ?? true)
                && item.NNAM is {} NNAMItem)
            {
                sb.AppendLine($"NNAM => {SpanExt.ToHexString(NNAMItem)}");
            }
        }
        
        public static NavigationMesh_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (NavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (NavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (NavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (NavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (NavigationMesh_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (NavigationMesh_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new NavigationMesh_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (NavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (NavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (NavigationMesh_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (NavigationMesh_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INavigationMeshGetter? lhs,
            INavigationMeshGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((NavigationMeshDataCommon)((INavigationMeshDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)NavigationMesh_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.ONAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ONAM, rhs.ONAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.PNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.PNAM, rhs.PNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.NNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NNAM, rhs.NNAM)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (INavigationMeshGetter?)lhs,
                rhs: rhs as INavigationMeshGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (INavigationMeshGetter?)lhs,
                rhs: rhs as INavigationMeshGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(INavigationMeshGetter item)
        {
            var hash = new HashCode();
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            if (item.ONAM is {} ONAMItem)
            {
                hash.Add(ONAMItem);
            }
            if (item.PNAM is {} PNAMItem)
            {
                hash.Add(PNAMItem);
            }
            if (item.NNAM is {} NNAMItem)
            {
                hash.Add(NNAMItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (INavigationMeshGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INavigationMeshGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return NavigationMesh.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INavigationMeshGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Data is IFormLinkContainerGetter DatalinkCont)
            {
                foreach (var item in DatalinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public NavigationMesh Duplicate(
            INavigationMeshGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new NavigationMesh(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INavigationMeshGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INavigationMeshGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class NavigationMeshSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly NavigationMeshSetterTranslationCommon Instance = new NavigationMeshSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INavigationMeshInternal item,
            INavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            INavigationMesh item,
            INavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)NavigationMesh_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)NavigationMesh_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.ONAM) ?? true))
            {
                if(rhs.ONAM is {} ONAMrhs)
                {
                    item.ONAM = ONAMrhs.ToArray();
                }
                else
                {
                    item.ONAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.PNAM) ?? true))
            {
                if(rhs.PNAM is {} PNAMrhs)
                {
                    item.PNAM = PNAMrhs.ToArray();
                }
                else
                {
                    item.PNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)NavigationMesh_FieldIndex.NNAM) ?? true))
            {
                if(rhs.NNAM is {} NNAMrhs)
                {
                    item.NNAM = NNAMrhs.ToArray();
                }
                else
                {
                    item.NNAM = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            INavigationMesh item,
            INavigationMeshGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInternal)item,
                rhs: (INavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMesh)item,
                rhs: (INavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMeshInternal)item,
                rhs: (INavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INavigationMesh)item,
                rhs: (INavigationMeshGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public NavigationMesh DeepCopy(
            INavigationMeshGetter item,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            NavigationMesh ret = (NavigationMesh)((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public NavigationMesh DeepCopy(
            INavigationMeshGetter item,
            out NavigationMesh.ErrorMask errorMask,
            NavigationMesh.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            NavigationMesh ret = (NavigationMesh)((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = NavigationMesh.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public NavigationMesh DeepCopy(
            INavigationMeshGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            NavigationMesh ret = (NavigationMesh)((NavigationMeshCommon)((INavigationMeshGetter)item).CommonInstance()!).GetNew();
            ((NavigationMeshSetterTranslationCommon)((INavigationMeshGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class NavigationMesh
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMesh_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => NavigationMesh_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NavigationMeshCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NavigationMeshSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NavigationMeshSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class NavigationMeshBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly NavigationMeshBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            INavigationMeshGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.Data is {} DataItem)
            {
                ((NavigationMeshDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ONAM,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PNAM,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NNAM,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
        }

        public void Write(
            MutagenWriter writer,
            INavigationMeshGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.NAVM,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INavigationMeshGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (INavigationMeshGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (INavigationMeshGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NavigationMeshBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly NavigationMeshBinaryCreateTranslation Instance = new NavigationMeshBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.NAVM;
        public static ParseResult FillBinaryRecordTypes(
            INavigationMeshInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NVNM:
                {
                    item.Data = Mutagen.Bethesda.Skyrim.NavigationMeshData.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)NavigationMesh_FieldIndex.Data;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ONAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)NavigationMesh_FieldIndex.ONAM;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)NavigationMesh_FieldIndex.PNAM;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)NavigationMesh_FieldIndex.NNAM;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class NavigationMeshBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class NavigationMeshBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        INavigationMeshGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => NavigationMesh_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => NavigationMesh_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NavigationMeshCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NavigationMeshSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NavigationMeshCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NavigationMeshBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NavigationMeshBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(INavigationMesh);

        public NavigationMesh.MajorFlag MajorFlags => (NavigationMesh.MajorFlag)this.MajorRecordFlagsRaw;

        #region Data
        private int? _DataLengthOverride;
        private RangeInt32? _DataLocation;
        public INavigationMeshDataGetter? Data => _DataLocation.HasValue ? NavigationMeshDataBinaryOverlay.NavigationMeshDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_DataLengthOverride)) : default;
        #endregion
        #region ONAM
        private int? _ONAMLocation;
        public ReadOnlyMemorySlice<Byte>? ONAM => _ONAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ONAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region PNAM
        private int? _PNAMLocation;
        public ReadOnlyMemorySlice<Byte>? PNAM => _PNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _PNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region NNAM
        private int? _NNAMLocation;
        public ReadOnlyMemorySlice<Byte>? NNAM => _NNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NavigationMeshBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INavigationMeshGetter NavigationMeshFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NavigationMeshBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static INavigationMeshGetter NavigationMeshFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NavigationMeshFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NVNM:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _DataLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)NavigationMesh_FieldIndex.Data;
                }
                case RecordTypeInts.ONAM:
                {
                    _ONAMLocation = (stream.Position - offset);
                    return (int)NavigationMesh_FieldIndex.ONAM;
                }
                case RecordTypeInts.PNAM:
                {
                    _PNAMLocation = (stream.Position - offset);
                    return (int)NavigationMesh_FieldIndex.PNAM;
                }
                case RecordTypeInts.NNAM:
                {
                    _NNAMLocation = (stream.Position - offset);
                    return (int)NavigationMesh_FieldIndex.NNAM;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NavigationMeshMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<NavigationMesh>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not INavigationMeshGetter rhs) return false;
            return ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INavigationMeshGetter? obj)
        {
            return ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NavigationMeshCommon)((INavigationMeshGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

