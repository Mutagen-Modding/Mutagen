/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Water :
        OblivionMajorRecord,
        IEquatable<IWaterGetter>,
        ILoquiObjectSetter<Water>,
        IWaterInternal
    {
        #region Ctor
        protected Water()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Texture
        public String? Texture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWaterGetter.Texture => this.Texture;
        #endregion
        #region Opacity
        public Byte? Opacity { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IWaterGetter.Opacity => this.Opacity;
        #endregion
        #region Flags
        public Water.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Water.Flag? IWaterGetter.Flags => this.Flags;
        #endregion
        #region MaterialID
        public String? MaterialID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IWaterGetter.MaterialID => this.MaterialID;
        #endregion
        #region Sound
        private readonly IFormLinkNullable<ISoundGetter> _Sound = new FormLinkNullable<ISoundGetter>();
        public IFormLinkNullable<ISoundGetter> Sound
        {
            get => _Sound;
            set => _Sound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundGetter> IWaterGetter.Sound => this.Sound;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WaterData? _Data;
        public WaterData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWaterDataGetter? IWaterGetter.Data => this.Data;
        #endregion
        #region RelatedWaters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RelatedWaters? _RelatedWaters;
        public RelatedWaters? RelatedWaters
        {
            get => _RelatedWaters;
            set => _RelatedWaters = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRelatedWatersGetter? IWaterGetter.RelatedWaters => this.RelatedWaters;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WaterMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Texture = initialValue;
                this.Opacity = initialValue;
                this.Flags = initialValue;
                this.MaterialID = initialValue;
                this.Sound = initialValue;
                this.Data = new MaskItem<TItem, WaterData.Mask<TItem>?>(initialValue, new WaterData.Mask<TItem>(initialValue));
                this.RelatedWaters = new MaskItem<TItem, RelatedWaters.Mask<TItem>?>(initialValue, new RelatedWaters.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Texture,
                TItem Opacity,
                TItem Flags,
                TItem MaterialID,
                TItem Sound,
                TItem Data,
                TItem RelatedWaters)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Texture = Texture;
                this.Opacity = Opacity;
                this.Flags = Flags;
                this.MaterialID = MaterialID;
                this.Sound = Sound;
                this.Data = new MaskItem<TItem, WaterData.Mask<TItem>?>(Data, new WaterData.Mask<TItem>(Data));
                this.RelatedWaters = new MaskItem<TItem, RelatedWaters.Mask<TItem>?>(RelatedWaters, new RelatedWaters.Mask<TItem>(RelatedWaters));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Texture;
            public TItem Opacity;
            public TItem Flags;
            public TItem MaterialID;
            public TItem Sound;
            public MaskItem<TItem, WaterData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, RelatedWaters.Mask<TItem>?>? RelatedWaters { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Texture, rhs.Texture)) return false;
                if (!object.Equals(this.Opacity, rhs.Opacity)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.MaterialID, rhs.MaterialID)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.RelatedWaters, rhs.RelatedWaters)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Texture);
                hash.Add(this.Opacity);
                hash.Add(this.Flags);
                hash.Add(this.MaterialID);
                hash.Add(this.Sound);
                hash.Add(this.Data);
                hash.Add(this.RelatedWaters);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Texture)) return false;
                if (!eval(this.Opacity)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.MaterialID)) return false;
                if (!eval(this.Sound)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (RelatedWaters != null)
                {
                    if (!eval(this.RelatedWaters.Overall)) return false;
                    if (this.RelatedWaters.Specific != null && !this.RelatedWaters.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Texture)) return true;
                if (eval(this.Opacity)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.MaterialID)) return true;
                if (eval(this.Sound)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (RelatedWaters != null)
                {
                    if (eval(this.RelatedWaters.Overall)) return true;
                    if (this.RelatedWaters.Specific != null && this.RelatedWaters.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Water.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Texture = eval(this.Texture);
                obj.Opacity = eval(this.Opacity);
                obj.Flags = eval(this.Flags);
                obj.MaterialID = eval(this.MaterialID);
                obj.Sound = eval(this.Sound);
                obj.Data = this.Data == null ? null : new MaskItem<R, WaterData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.RelatedWaters = this.RelatedWaters == null ? null : new MaskItem<R, RelatedWaters.Mask<R>?>(eval(this.RelatedWaters.Overall), this.RelatedWaters.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Water.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Water.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Water.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Texture ?? true)
                    {
                        sb.AppendItem(Texture, "Texture");
                    }
                    if (printMask?.Opacity ?? true)
                    {
                        sb.AppendItem(Opacity, "Opacity");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.MaterialID ?? true)
                    {
                        sb.AppendItem(MaterialID, "MaterialID");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        sb.AppendItem(Sound, "Sound");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if (printMask?.RelatedWaters?.Overall ?? true)
                    {
                        RelatedWaters?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Texture;
            public Exception? Opacity;
            public Exception? Flags;
            public Exception? MaterialID;
            public Exception? Sound;
            public MaskItem<Exception?, WaterData.ErrorMask?>? Data;
            public MaskItem<Exception?, RelatedWaters.ErrorMask?>? RelatedWaters;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Water_FieldIndex enu = (Water_FieldIndex)index;
                switch (enu)
                {
                    case Water_FieldIndex.Texture:
                        return Texture;
                    case Water_FieldIndex.Opacity:
                        return Opacity;
                    case Water_FieldIndex.Flags:
                        return Flags;
                    case Water_FieldIndex.MaterialID:
                        return MaterialID;
                    case Water_FieldIndex.Sound:
                        return Sound;
                    case Water_FieldIndex.Data:
                        return Data;
                    case Water_FieldIndex.RelatedWaters:
                        return RelatedWaters;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Water_FieldIndex enu = (Water_FieldIndex)index;
                switch (enu)
                {
                    case Water_FieldIndex.Texture:
                        this.Texture = ex;
                        break;
                    case Water_FieldIndex.Opacity:
                        this.Opacity = ex;
                        break;
                    case Water_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Water_FieldIndex.MaterialID:
                        this.MaterialID = ex;
                        break;
                    case Water_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    case Water_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, WaterData.ErrorMask?>(ex, null);
                        break;
                    case Water_FieldIndex.RelatedWaters:
                        this.RelatedWaters = new MaskItem<Exception?, RelatedWaters.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Water_FieldIndex enu = (Water_FieldIndex)index;
                switch (enu)
                {
                    case Water_FieldIndex.Texture:
                        this.Texture = (Exception?)obj;
                        break;
                    case Water_FieldIndex.Opacity:
                        this.Opacity = (Exception?)obj;
                        break;
                    case Water_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Water_FieldIndex.MaterialID:
                        this.MaterialID = (Exception?)obj;
                        break;
                    case Water_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    case Water_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, WaterData.ErrorMask?>?)obj;
                        break;
                    case Water_FieldIndex.RelatedWaters:
                        this.RelatedWaters = (MaskItem<Exception?, RelatedWaters.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Texture != null) return true;
                if (Opacity != null) return true;
                if (Flags != null) return true;
                if (MaterialID != null) return true;
                if (Sound != null) return true;
                if (Data != null) return true;
                if (RelatedWaters != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Texture, "Texture");
                }
                {
                    sb.AppendItem(Opacity, "Opacity");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(MaterialID, "MaterialID");
                }
                {
                    sb.AppendItem(Sound, "Sound");
                }
                Data?.Print(sb);
                RelatedWaters?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Texture = this.Texture.Combine(rhs.Texture);
                ret.Opacity = this.Opacity.Combine(rhs.Opacity);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.MaterialID = this.MaterialID.Combine(rhs.MaterialID);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.RelatedWaters = this.RelatedWaters.Combine(rhs.RelatedWaters, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Texture;
            public bool Opacity;
            public bool Flags;
            public bool MaterialID;
            public bool Sound;
            public WaterData.TranslationMask? Data;
            public RelatedWaters.TranslationMask? RelatedWaters;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Texture = defaultOn;
                this.Opacity = defaultOn;
                this.Flags = defaultOn;
                this.MaterialID = defaultOn;
                this.Sound = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Texture, null));
                ret.Add((Opacity, null));
                ret.Add((Flags, null));
                ret.Add((MaterialID, null));
                ret.Add((Sound, null));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((RelatedWaters != null ? RelatedWaters.OnOverall : DefaultOn, RelatedWaters?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Water_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WaterCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WaterSetterCommon.Instance.RemapLinks(this, mapping);
        public Water(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Water(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Water(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Water(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Water>.ToString(this);
        }

        protected override Type LinkType => typeof(IWater);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWaterGetter rhs) return false;
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWaterGetter? obj)
        {
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WaterCommon)((IWaterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WaterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WaterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Water CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Water();
            ((WaterSetterCommon)((IWaterGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Water item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((WaterSetterCommon)((IWaterGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Water GetNew()
        {
            return new Water();
        }

    }
    #endregion

    #region Interface
    public partial interface IWater :
        IFormLinkContainer,
        ILoquiObjectSetter<IWaterInternal>,
        IOblivionMajorRecordInternal,
        IWaterGetter
    {
        new String? Texture { get; set; }
        new Byte? Opacity { get; set; }
        new Water.Flag? Flags { get; set; }
        new String? MaterialID { get; set; }
        new IFormLinkNullable<ISoundGetter> Sound { get; set; }
        new WaterData? Data { get; set; }
        new RelatedWaters? RelatedWaters { get; set; }
    }

    public partial interface IWaterInternal :
        IOblivionMajorRecordInternal,
        IWater,
        IWaterGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.WATR)]
    public partial interface IWaterGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IWaterGetter>,
        IMapsToGetter<IWaterGetter>
    {
        static new ILoquiRegistration StaticRegistration => Water_Registration.Instance;
        String? Texture { get; }
        Byte? Opacity { get; }
        Water.Flag? Flags { get; }
        String? MaterialID { get; }
        IFormLinkNullableGetter<ISoundGetter> Sound { get; }
        IWaterDataGetter? Data { get; }
        IRelatedWatersGetter? RelatedWaters { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WaterMixIn
    {
        public static void Clear(this IWaterInternal item)
        {
            ((WaterSetterCommon)((IWaterGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Water.Mask<bool> GetEqualsMask(
            this IWaterGetter item,
            IWaterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IWaterGetter item,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IWaterGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWaterGetter item,
            IWaterGetter rhs,
            Water.TranslationMask? equalsMask = null)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWaterInternal lhs,
            IWaterGetter rhs,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WaterSetterTranslationCommon)((IWaterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Water.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWaterInternal lhs,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WaterSetterTranslationCommon)((IWaterGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Water DeepCopy(
            this IWaterGetter item,
            Water.TranslationMask? copyMask = null)
        {
            return ((WaterSetterTranslationCommon)((IWaterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Water DeepCopy(
            this IWaterGetter item,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? copyMask = null)
        {
            return ((WaterSetterTranslationCommon)((IWaterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Water DeepCopy(
            this IWaterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WaterSetterTranslationCommon)((IWaterGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Water Duplicate(
            this IWaterGetter item,
            FormKey formKey,
            Water.TranslationMask? copyMask = null)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Water Duplicate(
            this IWaterGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((WaterCommon)((IWaterGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWaterInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((WaterSetterCommon)((IWaterGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum Water_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Texture = 5,
        Opacity = 6,
        Flags = 7,
        MaterialID = 8,
        Sound = 9,
        Data = 10,
        RelatedWaters = 11,
    }
    #endregion

    #region Registration
    internal partial class Water_Registration : ILoquiRegistration
    {
        public static readonly Water_Registration Instance = new Water_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(Water.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Water.ErrorMask);

        public static readonly Type ClassType = typeof(Water);

        public static readonly Type GetterType = typeof(IWaterGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWater);

        public static readonly Type? InternalSetterType = typeof(IWaterInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Water";

        public const string Name = "Water";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WATR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.WATR);
            var all = RecordCollection.Factory(
                RecordTypes.WATR,
                RecordTypes.TNAM,
                RecordTypes.ANAM,
                RecordTypes.FNAM,
                RecordTypes.MNAM,
                RecordTypes.SNAM,
                RecordTypes.DATA,
                RecordTypes.GNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WaterBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WaterSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly WaterSetterCommon Instance = new WaterSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWaterInternal item)
        {
            ClearPartial();
            item.Texture = default;
            item.Opacity = default;
            item.Flags = default;
            item.MaterialID = default;
            item.Sound.Clear();
            item.Data = null;
            item.RelatedWaters = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IWaterInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWaterInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWater obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Sound.Relink(mapping);
            obj.RelatedWaters?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWaterInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IWaterInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WaterBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WaterBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Water)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Water)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class WaterCommon : OblivionMajorRecordCommon
    {
        public new static readonly WaterCommon Instance = new WaterCommon();

        public Water.Mask<bool> GetEqualsMask(
            IWaterGetter item,
            IWaterGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Water.Mask<bool>(false);
            ((WaterCommon)((IWaterGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWaterGetter item,
            IWaterGetter rhs,
            Water.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Texture = string.Equals(item.Texture, rhs.Texture);
            ret.Opacity = item.Opacity == rhs.Opacity;
            ret.Flags = item.Flags == rhs.Flags;
            ret.MaterialID = string.Equals(item.MaterialID, rhs.MaterialID);
            ret.Sound = item.Sound.Equals(rhs.Sound);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.RelatedWaters = EqualsMaskHelper.EqualsHelper(
                item.RelatedWaters,
                rhs.RelatedWaters,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IWaterGetter item,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IWaterGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Water.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Water =>");
            }
            else
            {
                sb.AppendLine($"{name} (Water) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IWaterGetter item,
            StructuredStringBuilder sb,
            Water.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Texture ?? true)
                && item.Texture is {} TextureItem)
            {
                sb.AppendItem(TextureItem, "Texture");
            }
            if ((printMask?.Opacity ?? true)
                && item.Opacity is {} OpacityItem)
            {
                sb.AppendItem(OpacityItem, "Opacity");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.MaterialID ?? true)
                && item.MaterialID is {} MaterialIDItem)
            {
                sb.AppendItem(MaterialIDItem, "MaterialID");
            }
            if (printMask?.Sound ?? true)
            {
                sb.AppendItem(item.Sound.FormKeyNullable, "Sound");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if ((printMask?.RelatedWaters?.Overall ?? true)
                && item.RelatedWaters is {} RelatedWatersItem)
            {
                RelatedWatersItem?.Print(sb, "RelatedWaters");
            }
        }
        
        public static Water_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Water_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Water_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Water_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Water_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Water_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWaterGetter? lhs,
            IWaterGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.Texture) ?? true))
            {
                if (!string.Equals(lhs.Texture, rhs.Texture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.Opacity) ?? true))
            {
                if (lhs.Opacity != rhs.Opacity) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.MaterialID) ?? true))
            {
                if (!string.Equals(lhs.MaterialID, rhs.MaterialID)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.Sound) ?? true))
            {
                if (!lhs.Sound.Equals(rhs.Sound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((WaterDataCommon)((IWaterDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)Water_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Water_FieldIndex.RelatedWaters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.RelatedWaters, rhs.RelatedWaters, out var lhsRelatedWaters, out var rhsRelatedWaters, out var isRelatedWatersEqual))
                {
                    if (!((RelatedWatersCommon)((IRelatedWatersGetter)lhsRelatedWaters).CommonInstance()!).Equals(lhsRelatedWaters, rhsRelatedWaters, equalsMask?.GetSubCrystal((int)Water_FieldIndex.RelatedWaters))) return false;
                }
                else if (!isRelatedWatersEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWaterGetter?)lhs,
                rhs: rhs as IWaterGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWaterGetter?)lhs,
                rhs: rhs as IWaterGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IWaterGetter item)
        {
            var hash = new HashCode();
            if (item.Texture is {} Textureitem)
            {
                hash.Add(Textureitem);
            }
            if (item.Opacity is {} Opacityitem)
            {
                hash.Add(Opacityitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.MaterialID is {} MaterialIDitem)
            {
                hash.Add(MaterialIDitem);
            }
            hash.Add(item.Sound);
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            if (item.RelatedWaters is {} RelatedWatersitem)
            {
                hash.Add(RelatedWatersitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IWaterGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWaterGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Water.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IWaterGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Sound, out var SoundInfo))
            {
                yield return SoundInfo;
            }
            if (obj.RelatedWaters is {} RelatedWatersItems)
            {
                foreach (var item in RelatedWatersItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Water Duplicate(
            IWaterGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Water(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWaterGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWaterGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class WaterSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly WaterSetterTranslationCommon Instance = new WaterSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWaterInternal item,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IWater item,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Texture) ?? true))
            {
                item.Texture = rhs.Texture;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Opacity) ?? true))
            {
                item.Opacity = rhs.Opacity;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.MaterialID) ?? true))
            {
                item.MaterialID = rhs.MaterialID;
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Sound) ?? true))
            {
                item.Sound.SetTo(rhs.Sound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Water_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Water_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Water_FieldIndex.RelatedWaters) ?? true))
            {
                errorMask?.PushIndex((int)Water_FieldIndex.RelatedWaters);
                try
                {
                    if(rhs.RelatedWaters is {} rhsRelatedWaters)
                    {
                        item.RelatedWaters = rhsRelatedWaters.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Water_FieldIndex.RelatedWaters));
                    }
                    else
                    {
                        item.RelatedWaters = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IWater item,
            IWaterGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWaterInternal)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWater)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWaterInternal)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWater)item,
                rhs: (IWaterGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Water DeepCopy(
            IWaterGetter item,
            Water.TranslationMask? copyMask = null)
        {
            Water ret = (Water)((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetNew();
            ((WaterSetterTranslationCommon)((IWaterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Water DeepCopy(
            IWaterGetter item,
            out Water.ErrorMask errorMask,
            Water.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Water ret = (Water)((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetNew();
            ((WaterSetterTranslationCommon)((IWaterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Water.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Water DeepCopy(
            IWaterGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Water ret = (Water)((WaterCommon)((IWaterGetter)item).CommonInstance()!).GetNew();
            ((WaterSetterTranslationCommon)((IWaterGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Water
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Water_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Water_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WaterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WaterSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WaterSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class WaterBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly WaterBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IWaterGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Texture,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM),
                binaryType: StringBinaryType.NullTerminate);
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Opacity,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            EnumBinaryTranslation<Water.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaterialID,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Sound,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            WaterBinaryWriteTranslation.WriteBinaryData(
                writer: writer,
                item: item);
            if (item.RelatedWaters is {} RelatedWatersItem)
            {
                ((RelatedWatersBinaryWriteTranslation)((IBinaryItem)RelatedWatersItem).BinaryWriteTranslator).Write(
                    item: RelatedWatersItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public static partial void WriteBinaryDataCustom(
            MutagenWriter writer,
            IWaterGetter item);

        public static void WriteBinaryData(
            MutagenWriter writer,
            IWaterGetter item)
        {
            WriteBinaryDataCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IWaterGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.WATR,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IWaterGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWaterGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWaterGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WaterBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly WaterBinaryCreateTranslation Instance = new WaterBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WATR;
        public static ParseResult FillBinaryRecordTypes(
            IWaterInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Texture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Water_FieldIndex.Texture;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Opacity = frame.ReadUInt8();
                    return (int)Water_FieldIndex.Opacity;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Water.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Water_FieldIndex.Flags;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaterialID = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Water_FieldIndex.MaterialID;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Sound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Water_FieldIndex.Sound;
                }
                case RecordTypeInts.DATA:
                {
                    WaterBinaryCreateTranslation.FillBinaryDataCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Water_FieldIndex.Data;
                }
                case RecordTypeInts.GNAM:
                {
                    item.RelatedWaters = Mutagen.Bethesda.Oblivion.RelatedWaters.CreateFromBinary(frame: frame);
                    return (int)Water_FieldIndex.RelatedWaters;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryDataCustom(
            MutagenFrame frame,
            IWaterInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class WaterBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class WaterBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IWaterGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Water_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Water_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WaterCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WaterSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WaterCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WaterBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WaterBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IWater);


        #region Texture
        private int? _TextureLocation;
        public String? Texture => _TextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Opacity
        private int? _OpacityLocation;
        public Byte? Opacity => _OpacityLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _OpacityLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Water.Flag? Flags => _FlagsLocation.HasValue ? (Water.Flag)HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(Water.Flag?);
        #endregion
        #region MaterialID
        private int? _MaterialIDLocation;
        public String? MaterialID => _MaterialIDLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaterialIDLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Sound
        private int? _SoundLocation;
        public IFormLinkNullableGetter<ISoundGetter> Sound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundGetter>(_package, _recordData, _SoundLocation);
        #endregion
        #region Data
        partial void DataCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset);
        public partial IWaterDataGetter? GetDataCustom();
        public IWaterDataGetter? Data => GetDataCustom();
        #endregion
        #region RelatedWaters
        private RangeInt32? _RelatedWatersLocation;
        public IRelatedWatersGetter? RelatedWaters => _RelatedWatersLocation.HasValue ? RelatedWatersBinaryOverlay.RelatedWatersFactory(_recordData.Slice(_RelatedWatersLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WaterBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IWaterGetter WaterFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new WaterBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IWaterGetter WaterFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return WaterFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TNAM:
                {
                    _TextureLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.Texture;
                }
                case RecordTypeInts.ANAM:
                {
                    _OpacityLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.Opacity;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.Flags;
                }
                case RecordTypeInts.MNAM:
                {
                    _MaterialIDLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.MaterialID;
                }
                case RecordTypeInts.SNAM:
                {
                    _SoundLocation = (stream.Position - offset);
                    return (int)Water_FieldIndex.Sound;
                }
                case RecordTypeInts.DATA:
                {
                    DataCustomParse(
                        stream,
                        finalPos,
                        offset);
                    return (int)Water_FieldIndex.Data;
                }
                case RecordTypeInts.GNAM:
                {
                    _RelatedWatersLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Water_FieldIndex.RelatedWaters;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WaterMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Water>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWaterGetter rhs) return false;
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWaterGetter? obj)
        {
            return ((WaterCommon)((IWaterGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WaterCommon)((IWaterGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

