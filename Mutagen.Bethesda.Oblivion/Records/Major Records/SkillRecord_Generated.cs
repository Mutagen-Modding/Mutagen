/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class SkillRecord :
        OblivionMajorRecord,
        IEquatable<ISkillRecordGetter>,
        ILoquiObjectSetter<SkillRecord>,
        ISkillRecordInternal
    {
        #region Ctor
        protected SkillRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Skill
        public ActorValue? Skill { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ActorValue? ISkillRecordGetter.Skill => this.Skill;
        #endregion
        #region Description
        public String? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.Description => this.Description;
        #endregion
        #region Icon
        public String? Icon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.Icon => this.Icon;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkillData? _Data;
        public SkillData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkillDataGetter? ISkillRecordGetter.Data => this.Data;
        #endregion
        #region ApprenticeText
        public String? ApprenticeText { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.ApprenticeText => this.ApprenticeText;
        #endregion
        #region JourneymanText
        public String? JourneymanText { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.JourneymanText => this.JourneymanText;
        #endregion
        #region ExpertText
        public String? ExpertText { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.ExpertText => this.ExpertText;
        #endregion
        #region MasterText
        public String? MasterText { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ISkillRecordGetter.MasterText => this.MasterText;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SkillRecordMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Skill = initialValue;
                this.Description = initialValue;
                this.Icon = initialValue;
                this.Data = new MaskItem<TItem, SkillData.Mask<TItem>?>(initialValue, new SkillData.Mask<TItem>(initialValue));
                this.ApprenticeText = initialValue;
                this.JourneymanText = initialValue;
                this.ExpertText = initialValue;
                this.MasterText = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Skill,
                TItem Description,
                TItem Icon,
                TItem Data,
                TItem ApprenticeText,
                TItem JourneymanText,
                TItem ExpertText,
                TItem MasterText)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Skill = Skill;
                this.Description = Description;
                this.Icon = Icon;
                this.Data = new MaskItem<TItem, SkillData.Mask<TItem>?>(Data, new SkillData.Mask<TItem>(Data));
                this.ApprenticeText = ApprenticeText;
                this.JourneymanText = JourneymanText;
                this.ExpertText = ExpertText;
                this.MasterText = MasterText;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Skill;
            public TItem Description;
            public TItem Icon;
            public MaskItem<TItem, SkillData.Mask<TItem>?>? Data { get; set; }
            public TItem ApprenticeText;
            public TItem JourneymanText;
            public TItem ExpertText;
            public TItem MasterText;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Skill, rhs.Skill)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.ApprenticeText, rhs.ApprenticeText)) return false;
                if (!object.Equals(this.JourneymanText, rhs.JourneymanText)) return false;
                if (!object.Equals(this.ExpertText, rhs.ExpertText)) return false;
                if (!object.Equals(this.MasterText, rhs.MasterText)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Skill);
                hash.Add(this.Description);
                hash.Add(this.Icon);
                hash.Add(this.Data);
                hash.Add(this.ApprenticeText);
                hash.Add(this.JourneymanText);
                hash.Add(this.ExpertText);
                hash.Add(this.MasterText);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Skill)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Icon)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!eval(this.ApprenticeText)) return false;
                if (!eval(this.JourneymanText)) return false;
                if (!eval(this.ExpertText)) return false;
                if (!eval(this.MasterText)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Skill)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.Icon)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (eval(this.ApprenticeText)) return true;
                if (eval(this.JourneymanText)) return true;
                if (eval(this.ExpertText)) return true;
                if (eval(this.MasterText)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SkillRecord.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Skill = eval(this.Skill);
                obj.Description = eval(this.Description);
                obj.Icon = eval(this.Icon);
                obj.Data = this.Data == null ? null : new MaskItem<R, SkillData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.ApprenticeText = eval(this.ApprenticeText);
                obj.JourneymanText = eval(this.JourneymanText);
                obj.ExpertText = eval(this.ExpertText);
                obj.MasterText = eval(this.MasterText);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SkillRecord.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SkillRecord.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SkillRecord.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Skill ?? true)
                    {
                        sb.AppendItem(Skill, "Skill");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if (printMask?.Icon ?? true)
                    {
                        sb.AppendItem(Icon, "Icon");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if (printMask?.ApprenticeText ?? true)
                    {
                        sb.AppendItem(ApprenticeText, "ApprenticeText");
                    }
                    if (printMask?.JourneymanText ?? true)
                    {
                        sb.AppendItem(JourneymanText, "JourneymanText");
                    }
                    if (printMask?.ExpertText ?? true)
                    {
                        sb.AppendItem(ExpertText, "ExpertText");
                    }
                    if (printMask?.MasterText ?? true)
                    {
                        sb.AppendItem(MasterText, "MasterText");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Skill;
            public Exception? Description;
            public Exception? Icon;
            public MaskItem<Exception?, SkillData.ErrorMask?>? Data;
            public Exception? ApprenticeText;
            public Exception? JourneymanText;
            public Exception? ExpertText;
            public Exception? MasterText;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
                switch (enu)
                {
                    case SkillRecord_FieldIndex.Skill:
                        return Skill;
                    case SkillRecord_FieldIndex.Description:
                        return Description;
                    case SkillRecord_FieldIndex.Icon:
                        return Icon;
                    case SkillRecord_FieldIndex.Data:
                        return Data;
                    case SkillRecord_FieldIndex.ApprenticeText:
                        return ApprenticeText;
                    case SkillRecord_FieldIndex.JourneymanText:
                        return JourneymanText;
                    case SkillRecord_FieldIndex.ExpertText:
                        return ExpertText;
                    case SkillRecord_FieldIndex.MasterText:
                        return MasterText;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
                switch (enu)
                {
                    case SkillRecord_FieldIndex.Skill:
                        this.Skill = ex;
                        break;
                    case SkillRecord_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case SkillRecord_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case SkillRecord_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, SkillData.ErrorMask?>(ex, null);
                        break;
                    case SkillRecord_FieldIndex.ApprenticeText:
                        this.ApprenticeText = ex;
                        break;
                    case SkillRecord_FieldIndex.JourneymanText:
                        this.JourneymanText = ex;
                        break;
                    case SkillRecord_FieldIndex.ExpertText:
                        this.ExpertText = ex;
                        break;
                    case SkillRecord_FieldIndex.MasterText:
                        this.MasterText = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SkillRecord_FieldIndex enu = (SkillRecord_FieldIndex)index;
                switch (enu)
                {
                    case SkillRecord_FieldIndex.Skill:
                        this.Skill = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, SkillData.ErrorMask?>?)obj;
                        break;
                    case SkillRecord_FieldIndex.ApprenticeText:
                        this.ApprenticeText = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.JourneymanText:
                        this.JourneymanText = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.ExpertText:
                        this.ExpertText = (Exception?)obj;
                        break;
                    case SkillRecord_FieldIndex.MasterText:
                        this.MasterText = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Skill != null) return true;
                if (Description != null) return true;
                if (Icon != null) return true;
                if (Data != null) return true;
                if (ApprenticeText != null) return true;
                if (JourneymanText != null) return true;
                if (ExpertText != null) return true;
                if (MasterText != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Skill, "Skill");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                {
                    sb.AppendItem(Icon, "Icon");
                }
                Data?.Print(sb);
                {
                    sb.AppendItem(ApprenticeText, "ApprenticeText");
                }
                {
                    sb.AppendItem(JourneymanText, "JourneymanText");
                }
                {
                    sb.AppendItem(ExpertText, "ExpertText");
                }
                {
                    sb.AppendItem(MasterText, "MasterText");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Skill = this.Skill.Combine(rhs.Skill);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.ApprenticeText = this.ApprenticeText.Combine(rhs.ApprenticeText);
                ret.JourneymanText = this.JourneymanText.Combine(rhs.JourneymanText);
                ret.ExpertText = this.ExpertText.Combine(rhs.ExpertText);
                ret.MasterText = this.MasterText.Combine(rhs.MasterText);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Skill;
            public bool Description;
            public bool Icon;
            public SkillData.TranslationMask? Data;
            public bool ApprenticeText;
            public bool JourneymanText;
            public bool ExpertText;
            public bool MasterText;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Skill = defaultOn;
                this.Description = defaultOn;
                this.Icon = defaultOn;
                this.ApprenticeText = defaultOn;
                this.JourneymanText = defaultOn;
                this.ExpertText = defaultOn;
                this.MasterText = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Skill, null));
                ret.Add((Description, null));
                ret.Add((Icon, null));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((ApprenticeText, null));
                ret.Add((JourneymanText, null));
                ret.Add((ExpertText, null));
                ret.Add((MasterText, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SkillRecord_Registration.TriggeringRecordType;
        public SkillRecord(
            FormKey formKey,
            OblivionRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private SkillRecord(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public SkillRecord(IOblivionMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.OblivionRelease)
        {
        }

        public SkillRecord(IOblivionMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.OblivionRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SkillRecord>.ToString(this);
        }

        protected override Type LinkType => typeof(ISkillRecord);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISkillRecordGetter rhs) return false;
            return ((SkillRecordCommon)((ISkillRecordGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISkillRecordGetter? obj)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SkillRecordCommon)((ISkillRecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SkillRecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SkillRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SkillRecord CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SkillRecord();
            ((SkillRecordSetterCommon)((ISkillRecordGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SkillRecord item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SkillRecordSetterCommon)((ISkillRecordGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SkillRecord GetNew()
        {
            return new SkillRecord();
        }

    }
    #endregion

    #region Interface
    public partial interface ISkillRecord :
        ILoquiObjectSetter<ISkillRecordInternal>,
        IOblivionMajorRecordInternal,
        ISkillRecordGetter
    {
        new ActorValue? Skill { get; set; }
        new String? Description { get; set; }
        new String? Icon { get; set; }
        new SkillData? Data { get; set; }
        new String? ApprenticeText { get; set; }
        new String? JourneymanText { get; set; }
        new String? ExpertText { get; set; }
        new String? MasterText { get; set; }
    }

    public partial interface ISkillRecordInternal :
        IOblivionMajorRecordInternal,
        ISkillRecord,
        ISkillRecordGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.SKIL)]
    public partial interface ISkillRecordGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<ISkillRecordGetter>,
        IMapsToGetter<ISkillRecordGetter>
    {
        static new ILoquiRegistration StaticRegistration => SkillRecord_Registration.Instance;
        ActorValue? Skill { get; }
        String? Description { get; }
        String? Icon { get; }
        ISkillDataGetter? Data { get; }
        String? ApprenticeText { get; }
        String? JourneymanText { get; }
        String? ExpertText { get; }
        String? MasterText { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SkillRecordMixIn
    {
        public static void Clear(this ISkillRecordInternal item)
        {
            ((SkillRecordSetterCommon)((ISkillRecordGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SkillRecord.Mask<bool> GetEqualsMask(
            this ISkillRecordGetter item,
            ISkillRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISkillRecordGetter item,
            string? name = null,
            SkillRecord.Mask<bool>? printMask = null)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISkillRecordGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SkillRecord.Mask<bool>? printMask = null)
        {
            ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISkillRecordGetter item,
            ISkillRecordGetter rhs,
            SkillRecord.TranslationMask? equalsMask = null)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISkillRecordInternal lhs,
            ISkillRecordGetter rhs,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SkillRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISkillRecordInternal lhs,
            ISkillRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SkillRecord DeepCopy(
            this ISkillRecordGetter item,
            SkillRecord.TranslationMask? copyMask = null)
        {
            return ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SkillRecord DeepCopy(
            this ISkillRecordGetter item,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? copyMask = null)
        {
            return ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SkillRecord DeepCopy(
            this ISkillRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SkillRecord Duplicate(
            this ISkillRecordGetter item,
            FormKey formKey,
            SkillRecord.TranslationMask? copyMask = null)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SkillRecord Duplicate(
            this ISkillRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISkillRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SkillRecordSetterCommon)((ISkillRecordGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum SkillRecord_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Skill = 5,
        Description = 6,
        Icon = 7,
        Data = 8,
        ApprenticeText = 9,
        JourneymanText = 10,
        ExpertText = 11,
        MasterText = 12,
    }
    #endregion

    #region Registration
    internal partial class SkillRecord_Registration : ILoquiRegistration
    {
        public static readonly SkillRecord_Registration Instance = new SkillRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(SkillRecord.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkillRecord.ErrorMask);

        public static readonly Type ClassType = typeof(SkillRecord);

        public static readonly Type GetterType = typeof(ISkillRecordGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkillRecord);

        public static readonly Type? InternalSetterType = typeof(ISkillRecordInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.SkillRecord";

        public const string Name = "SkillRecord";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SKIL;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SKIL);
            var all = RecordCollection.Factory(
                RecordTypes.SKIL,
                RecordTypes.INDX,
                RecordTypes.DESC,
                RecordTypes.ICON,
                RecordTypes.DATA,
                RecordTypes.ANAM,
                RecordTypes.JNAM,
                RecordTypes.ENAM,
                RecordTypes.MNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SkillRecordBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SkillRecordSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly SkillRecordSetterCommon Instance = new SkillRecordSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISkillRecordInternal item)
        {
            ClearPartial();
            item.Skill = default;
            item.Description = default;
            item.Icon = default;
            item.Data = null;
            item.ApprenticeText = default;
            item.JourneymanText = default;
            item.ExpertText = default;
            item.MasterText = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ISkillRecordInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISkillRecordInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISkillRecord obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISkillRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISkillRecordInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SkillRecordBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SkillRecordBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SkillRecord)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SkillRecord)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SkillRecordCommon : OblivionMajorRecordCommon
    {
        public new static readonly SkillRecordCommon Instance = new SkillRecordCommon();

        public SkillRecord.Mask<bool> GetEqualsMask(
            ISkillRecordGetter item,
            ISkillRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkillRecord.Mask<bool>(false);
            ((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISkillRecordGetter item,
            ISkillRecordGetter rhs,
            SkillRecord.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Skill = item.Skill == rhs.Skill;
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ApprenticeText = string.Equals(item.ApprenticeText, rhs.ApprenticeText);
            ret.JourneymanText = string.Equals(item.JourneymanText, rhs.JourneymanText);
            ret.ExpertText = string.Equals(item.ExpertText, rhs.ExpertText);
            ret.MasterText = string.Equals(item.MasterText, rhs.MasterText);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISkillRecordGetter item,
            string? name = null,
            SkillRecord.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISkillRecordGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SkillRecord.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SkillRecord =>");
            }
            else
            {
                sb.AppendLine($"{name} (SkillRecord) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISkillRecordGetter item,
            StructuredStringBuilder sb,
            SkillRecord.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Skill ?? true)
                && item.Skill is {} SkillItem)
            {
                sb.AppendItem(SkillItem, "Skill");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon is {} IconItem)
            {
                sb.AppendItem(IconItem, "Icon");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if ((printMask?.ApprenticeText ?? true)
                && item.ApprenticeText is {} ApprenticeTextItem)
            {
                sb.AppendItem(ApprenticeTextItem, "ApprenticeText");
            }
            if ((printMask?.JourneymanText ?? true)
                && item.JourneymanText is {} JourneymanTextItem)
            {
                sb.AppendItem(JourneymanTextItem, "JourneymanText");
            }
            if ((printMask?.ExpertText ?? true)
                && item.ExpertText is {} ExpertTextItem)
            {
                sb.AppendItem(ExpertTextItem, "ExpertText");
            }
            if ((printMask?.MasterText ?? true)
                && item.MasterText is {} MasterTextItem)
            {
                sb.AppendItem(MasterTextItem, "MasterText");
            }
        }
        
        public static SkillRecord_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (SkillRecord_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (SkillRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SkillRecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SkillRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SkillRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISkillRecordGetter? lhs,
            ISkillRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Skill) ?? true))
            {
                if (lhs.Skill != rhs.Skill) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Description) ?? true))
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Icon) ?? true))
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((SkillDataCommon)((ISkillDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)SkillRecord_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.ApprenticeText) ?? true))
            {
                if (!string.Equals(lhs.ApprenticeText, rhs.ApprenticeText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.JourneymanText) ?? true))
            {
                if (!string.Equals(lhs.JourneymanText, rhs.JourneymanText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.ExpertText) ?? true))
            {
                if (!string.Equals(lhs.ExpertText, rhs.ExpertText)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.MasterText) ?? true))
            {
                if (!string.Equals(lhs.MasterText, rhs.MasterText)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISkillRecordGetter?)lhs,
                rhs: rhs as ISkillRecordGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISkillRecordGetter?)lhs,
                rhs: rhs as ISkillRecordGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISkillRecordGetter item)
        {
            var hash = new HashCode();
            if (item.Skill is {} Skillitem)
            {
                hash.Add(Skillitem);
            }
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            if (item.Icon is {} Iconitem)
            {
                hash.Add(Iconitem);
            }
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            if (item.ApprenticeText is {} ApprenticeTextitem)
            {
                hash.Add(ApprenticeTextitem);
            }
            if (item.JourneymanText is {} JourneymanTextitem)
            {
                hash.Add(JourneymanTextitem);
            }
            if (item.ExpertText is {} ExpertTextitem)
            {
                hash.Add(ExpertTextitem);
            }
            if (item.MasterText is {} MasterTextitem)
            {
                hash.Add(MasterTextitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ISkillRecordGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISkillRecordGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SkillRecord.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISkillRecordGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public SkillRecord Duplicate(
            ISkillRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SkillRecord(formKey, default(OblivionRelease));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISkillRecordGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISkillRecordGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SkillRecordSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly SkillRecordSetterTranslationCommon Instance = new SkillRecordSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISkillRecordInternal item,
            ISkillRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISkillRecord item,
            ISkillRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Skill) ?? true))
            {
                item.Skill = rhs.Skill;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)SkillRecord_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SkillRecord_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.ApprenticeText) ?? true))
            {
                item.ApprenticeText = rhs.ApprenticeText;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.JourneymanText) ?? true))
            {
                item.JourneymanText = rhs.JourneymanText;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.ExpertText) ?? true))
            {
                item.ExpertText = rhs.ExpertText;
            }
            if ((copyMask?.GetShouldTranslate((int)SkillRecord_FieldIndex.MasterText) ?? true))
            {
                item.MasterText = rhs.MasterText;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISkillRecord item,
            ISkillRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISkillRecordInternal)item,
                rhs: (ISkillRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISkillRecord)item,
                rhs: (ISkillRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISkillRecordInternal)item,
                rhs: (ISkillRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISkillRecord)item,
                rhs: (ISkillRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SkillRecord DeepCopy(
            ISkillRecordGetter item,
            SkillRecord.TranslationMask? copyMask = null)
        {
            SkillRecord ret = (SkillRecord)((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).GetNew();
            ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SkillRecord DeepCopy(
            ISkillRecordGetter item,
            out SkillRecord.ErrorMask errorMask,
            SkillRecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SkillRecord ret = (SkillRecord)((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).GetNew();
            ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SkillRecord.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SkillRecord DeepCopy(
            ISkillRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SkillRecord ret = (SkillRecord)((SkillRecordCommon)((ISkillRecordGetter)item).CommonInstance()!).GetNew();
            ((SkillRecordSetterTranslationCommon)((ISkillRecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class SkillRecord
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkillRecord_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SkillRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SkillRecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SkillRecordSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SkillRecordSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class SkillRecordBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SkillRecordBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISkillRecordGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Skill,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.INDX));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Data is {} DataItem)
            {
                ((SkillDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ApprenticeText,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.JourneymanText,
                header: translationParams.ConvertToCustom(RecordTypes.JNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ExpertText,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MasterText,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            ISkillRecordGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SKIL,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISkillRecordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISkillRecordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISkillRecordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SkillRecordBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly SkillRecordBinaryCreateTranslation Instance = new SkillRecordBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SKIL;
        public static ParseResult FillBinaryRecordTypes(
            ISkillRecordInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.INDX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Skill = EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)SkillRecord_FieldIndex.Skill;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SkillRecord_FieldIndex.Description;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Icon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SkillRecord_FieldIndex.Icon;
                }
                case RecordTypeInts.DATA:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.SkillData.CreateFromBinary(frame: frame);
                    return (int)SkillRecord_FieldIndex.Data;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ApprenticeText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SkillRecord_FieldIndex.ApprenticeText;
                }
                case RecordTypeInts.JNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.JourneymanText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SkillRecord_FieldIndex.JourneymanText;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ExpertText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SkillRecord_FieldIndex.ExpertText;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MasterText = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SkillRecord_FieldIndex.MasterText;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class SkillRecordBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class SkillRecordBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ISkillRecordGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkillRecord_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SkillRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SkillRecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SkillRecordSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SkillRecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SkillRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISkillRecord);


        #region Skill
        private int? _SkillLocation;
        public ActorValue? Skill => EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.ParseRecordNullable(_SkillLocation, _recordData, _package, 4);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IconLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Data
        private RangeInt32? _DataLocation;
        public ISkillDataGetter? Data => _DataLocation.HasValue ? SkillDataBinaryOverlay.SkillDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        #region ApprenticeText
        private int? _ApprenticeTextLocation;
        public String? ApprenticeText => _ApprenticeTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ApprenticeTextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region JourneymanText
        private int? _JourneymanTextLocation;
        public String? JourneymanText => _JourneymanTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _JourneymanTextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region ExpertText
        private int? _ExpertTextLocation;
        public String? ExpertText => _ExpertTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ExpertTextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region MasterText
        private int? _MasterTextLocation;
        public String? MasterText => _MasterTextLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MasterTextLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SkillRecordBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISkillRecordGetter SkillRecordFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SkillRecordBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISkillRecordGetter SkillRecordFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SkillRecordFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.INDX:
                {
                    _SkillLocation = (stream.Position - offset);
                    return (int)SkillRecord_FieldIndex.Skill;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)SkillRecord_FieldIndex.Description;
                }
                case RecordTypeInts.ICON:
                {
                    _IconLocation = (stream.Position - offset);
                    return (int)SkillRecord_FieldIndex.Icon;
                }
                case RecordTypeInts.DATA:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)SkillRecord_FieldIndex.Data;
                }
                case RecordTypeInts.ANAM:
                {
                    _ApprenticeTextLocation = (stream.Position - offset);
                    return (int)SkillRecord_FieldIndex.ApprenticeText;
                }
                case RecordTypeInts.JNAM:
                {
                    _JourneymanTextLocation = (stream.Position - offset);
                    return (int)SkillRecord_FieldIndex.JourneymanText;
                }
                case RecordTypeInts.ENAM:
                {
                    _ExpertTextLocation = (stream.Position - offset);
                    return (int)SkillRecord_FieldIndex.ExpertText;
                }
                case RecordTypeInts.MNAM:
                {
                    _MasterTextLocation = (stream.Position - offset);
                    return (int)SkillRecord_FieldIndex.MasterText;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SkillRecordMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SkillRecord>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISkillRecordGetter rhs) return false;
            return ((SkillRecordCommon)((ISkillRecordGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISkillRecordGetter? obj)
        {
            return ((SkillRecordCommon)((ISkillRecordGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SkillRecordCommon)((ISkillRecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

