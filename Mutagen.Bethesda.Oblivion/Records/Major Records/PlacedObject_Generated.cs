/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedObject :
        OblivionMajorRecord,
        IEquatable<IPlacedObjectGetter>,
        ILoquiObjectSetter<PlacedObject>,
        IPlacedObjectInternal
    {
        #region Ctor
        protected PlacedObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        private readonly IFormLinkNullable<IOblivionMajorRecordGetter> _Base = new FormLinkNullable<IOblivionMajorRecordGetter>();
        public IFormLinkNullable<IOblivionMajorRecordGetter> Base
        {
            get => _Base;
            set => _Base.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOblivionMajorRecordGetter> IPlacedObjectGetter.Base => this.Base;
        #endregion
        #region XPCIFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XPCIFluff;
        public MemorySlice<Byte>? XPCIFluff
        {
            get => this._XPCIFluff;
            set => this._XPCIFluff = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XPCIFluff => this.XPCIFluff;
        #endregion
        #region FULLFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FULLFluff;
        public MemorySlice<Byte>? FULLFluff
        {
            get => this._FULLFluff;
            set => this._FULLFluff = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.FULLFluff => this.FULLFluff;
        #endregion
        #region TeleportDestination
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TeleportDestination? _TeleportDestination;
        public TeleportDestination? TeleportDestination
        {
            get => _TeleportDestination;
            set => _TeleportDestination = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITeleportDestinationGetter? IPlacedObjectGetter.TeleportDestination => this.TeleportDestination;
        #endregion
        #region Lock
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LockInformation? _Lock;
        public LockInformation? Lock
        {
            get => _Lock;
            set => _Lock = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILockInformationGetter? IPlacedObjectGetter.Lock => this.Lock;
        #endregion
        #region Owner
        private readonly IFormLinkNullable<IOwnerGetter> _Owner = new FormLinkNullable<IOwnerGetter>();
        public IFormLinkNullable<IOwnerGetter> Owner
        {
            get => _Owner;
            set => _Owner.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOwnerGetter> IPlacedObjectGetter.Owner => this.Owner;
        #endregion
        #region FactionRank
        public Int32? FactionRank { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.FactionRank => this.FactionRank;
        #endregion
        #region GlobalVariable
        private readonly IFormLinkNullable<IGlobalGetter> _GlobalVariable = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> GlobalVariable
        {
            get => _GlobalVariable;
            set => _GlobalVariable.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IPlacedObjectGetter.GlobalVariable => this.GlobalVariable;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IPlacedObjectGetter.EnableParent => this.EnableParent;
        #endregion
        #region Target
        private readonly IFormLinkNullable<IPlacedGetter> _Target = new FormLinkNullable<IPlacedGetter>();
        public IFormLinkNullable<IPlacedGetter> Target
        {
            get => _Target;
            set => _Target.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedGetter> IPlacedObjectGetter.Target => this.Target;
        #endregion
        #region SpeedTreeSeed
        public Byte? SpeedTreeSeed { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IPlacedObjectGetter.SpeedTreeSeed => this.SpeedTreeSeed;
        #endregion
        #region DistantLODData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DistantLODData? _DistantLODData;
        public DistantLODData? DistantLODData
        {
            get => _DistantLODData;
            set => _DistantLODData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDistantLODDataGetter? IPlacedObjectGetter.DistantLODData => this.DistantLODData;
        #endregion
        #region Charge
        public Single? Charge { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.Charge => this.Charge;
        #endregion
        #region Health
        public Int32? Health { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.Health => this.Health;
        #endregion
        #region LevelModifier
        public Int32? LevelModifier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.LevelModifier => this.LevelModifier;
        #endregion
        #region XRTM
        private readonly IFormLinkNullable<IOblivionMajorRecordGetter> _XRTM = new FormLinkNullable<IOblivionMajorRecordGetter>();
        public IFormLinkNullable<IOblivionMajorRecordGetter> XRTM
        {
            get => _XRTM;
            set => _XRTM.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOblivionMajorRecordGetter> IPlacedObjectGetter.XRTM => this.XRTM;
        #endregion
        #region ActionFlags
        public PlacedObject.ActionFlag? ActionFlags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        PlacedObject.ActionFlag? IPlacedObjectGetter.ActionFlags => this.ActionFlags;
        #endregion
        #region Count
        public Int32? Count { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.Count => this.Count;
        #endregion
        #region MapMarker
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MapMarker? _MapMarker;
        public MapMarker? MapMarker
        {
            get => _MapMarker;
            set => _MapMarker = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMapMarkerGetter? IPlacedObjectGetter.MapMarker => this.MapMarker;
        #endregion
        #region OpenByDefault
        public Boolean OpenByDefault { get; set; } = default(Boolean);
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RagdollData;
        public MemorySlice<Byte>? RagdollData
        {
            get => this._RagdollData;
            set => this._RagdollData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.RagdollData => this.RagdollData;
        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.Scale => this.Scale;
        #endregion
        #region ContainedSoul
        private readonly IFormLinkNullable<ISoulGemGetter> _ContainedSoul = new FormLinkNullable<ISoulGemGetter>();
        public IFormLinkNullable<ISoulGemGetter> ContainedSoul
        {
            get => _ContainedSoul;
            set => _ContainedSoul.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoulGemGetter> IPlacedObjectGetter.ContainedSoul => this.ContainedSoul;
        #endregion
        #region Location
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Location? _Location;
        public Location? Location
        {
            get => _Location;
            set => _Location = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationGetter? IPlacedObjectGetter.Location => this.Location;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Base = initialValue;
                this.XPCIFluff = initialValue;
                this.FULLFluff = initialValue;
                this.TeleportDestination = new MaskItem<TItem, TeleportDestination.Mask<TItem>?>(initialValue, new TeleportDestination.Mask<TItem>(initialValue));
                this.Lock = new MaskItem<TItem, LockInformation.Mask<TItem>?>(initialValue, new LockInformation.Mask<TItem>(initialValue));
                this.Owner = initialValue;
                this.FactionRank = initialValue;
                this.GlobalVariable = initialValue;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.Target = initialValue;
                this.SpeedTreeSeed = initialValue;
                this.DistantLODData = new MaskItem<TItem, DistantLODData.Mask<TItem>?>(initialValue, new DistantLODData.Mask<TItem>(initialValue));
                this.Charge = initialValue;
                this.Health = initialValue;
                this.LevelModifier = initialValue;
                this.XRTM = initialValue;
                this.ActionFlags = initialValue;
                this.Count = initialValue;
                this.MapMarker = new MaskItem<TItem, MapMarker.Mask<TItem>?>(initialValue, new MapMarker.Mask<TItem>(initialValue));
                this.OpenByDefault = initialValue;
                this.RagdollData = initialValue;
                this.Scale = initialValue;
                this.ContainedSoul = initialValue;
                this.Location = new MaskItem<TItem, Location.Mask<TItem>?>(initialValue, new Location.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Base,
                TItem XPCIFluff,
                TItem FULLFluff,
                TItem TeleportDestination,
                TItem Lock,
                TItem Owner,
                TItem FactionRank,
                TItem GlobalVariable,
                TItem EnableParent,
                TItem Target,
                TItem SpeedTreeSeed,
                TItem DistantLODData,
                TItem Charge,
                TItem Health,
                TItem LevelModifier,
                TItem XRTM,
                TItem ActionFlags,
                TItem Count,
                TItem MapMarker,
                TItem OpenByDefault,
                TItem RagdollData,
                TItem Scale,
                TItem ContainedSoul,
                TItem Location)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Base = Base;
                this.XPCIFluff = XPCIFluff;
                this.FULLFluff = FULLFluff;
                this.TeleportDestination = new MaskItem<TItem, TeleportDestination.Mask<TItem>?>(TeleportDestination, new TeleportDestination.Mask<TItem>(TeleportDestination));
                this.Lock = new MaskItem<TItem, LockInformation.Mask<TItem>?>(Lock, new LockInformation.Mask<TItem>(Lock));
                this.Owner = Owner;
                this.FactionRank = FactionRank;
                this.GlobalVariable = GlobalVariable;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.Target = Target;
                this.SpeedTreeSeed = SpeedTreeSeed;
                this.DistantLODData = new MaskItem<TItem, DistantLODData.Mask<TItem>?>(DistantLODData, new DistantLODData.Mask<TItem>(DistantLODData));
                this.Charge = Charge;
                this.Health = Health;
                this.LevelModifier = LevelModifier;
                this.XRTM = XRTM;
                this.ActionFlags = ActionFlags;
                this.Count = Count;
                this.MapMarker = new MaskItem<TItem, MapMarker.Mask<TItem>?>(MapMarker, new MapMarker.Mask<TItem>(MapMarker));
                this.OpenByDefault = OpenByDefault;
                this.RagdollData = RagdollData;
                this.Scale = Scale;
                this.ContainedSoul = ContainedSoul;
                this.Location = new MaskItem<TItem, Location.Mask<TItem>?>(Location, new Location.Mask<TItem>(Location));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Base;
            public TItem XPCIFluff;
            public TItem FULLFluff;
            public MaskItem<TItem, TeleportDestination.Mask<TItem>?>? TeleportDestination { get; set; }
            public MaskItem<TItem, LockInformation.Mask<TItem>?>? Lock { get; set; }
            public TItem Owner;
            public TItem FactionRank;
            public TItem GlobalVariable;
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public TItem Target;
            public TItem SpeedTreeSeed;
            public MaskItem<TItem, DistantLODData.Mask<TItem>?>? DistantLODData { get; set; }
            public TItem Charge;
            public TItem Health;
            public TItem LevelModifier;
            public TItem XRTM;
            public TItem ActionFlags;
            public TItem Count;
            public MaskItem<TItem, MapMarker.Mask<TItem>?>? MapMarker { get; set; }
            public TItem OpenByDefault;
            public TItem RagdollData;
            public TItem Scale;
            public TItem ContainedSoul;
            public MaskItem<TItem, Location.Mask<TItem>?>? Location { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.XPCIFluff, rhs.XPCIFluff)) return false;
                if (!object.Equals(this.FULLFluff, rhs.FULLFluff)) return false;
                if (!object.Equals(this.TeleportDestination, rhs.TeleportDestination)) return false;
                if (!object.Equals(this.Lock, rhs.Lock)) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.Target, rhs.Target)) return false;
                if (!object.Equals(this.SpeedTreeSeed, rhs.SpeedTreeSeed)) return false;
                if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
                if (!object.Equals(this.Charge, rhs.Charge)) return false;
                if (!object.Equals(this.Health, rhs.Health)) return false;
                if (!object.Equals(this.LevelModifier, rhs.LevelModifier)) return false;
                if (!object.Equals(this.XRTM, rhs.XRTM)) return false;
                if (!object.Equals(this.ActionFlags, rhs.ActionFlags)) return false;
                if (!object.Equals(this.Count, rhs.Count)) return false;
                if (!object.Equals(this.MapMarker, rhs.MapMarker)) return false;
                if (!object.Equals(this.OpenByDefault, rhs.OpenByDefault)) return false;
                if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.ContainedSoul, rhs.ContainedSoul)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Base);
                hash.Add(this.XPCIFluff);
                hash.Add(this.FULLFluff);
                hash.Add(this.TeleportDestination);
                hash.Add(this.Lock);
                hash.Add(this.Owner);
                hash.Add(this.FactionRank);
                hash.Add(this.GlobalVariable);
                hash.Add(this.EnableParent);
                hash.Add(this.Target);
                hash.Add(this.SpeedTreeSeed);
                hash.Add(this.DistantLODData);
                hash.Add(this.Charge);
                hash.Add(this.Health);
                hash.Add(this.LevelModifier);
                hash.Add(this.XRTM);
                hash.Add(this.ActionFlags);
                hash.Add(this.Count);
                hash.Add(this.MapMarker);
                hash.Add(this.OpenByDefault);
                hash.Add(this.RagdollData);
                hash.Add(this.Scale);
                hash.Add(this.ContainedSoul);
                hash.Add(this.Location);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Base)) return false;
                if (!eval(this.XPCIFluff)) return false;
                if (!eval(this.FULLFluff)) return false;
                if (TeleportDestination != null)
                {
                    if (!eval(this.TeleportDestination.Overall)) return false;
                    if (this.TeleportDestination.Specific != null && !this.TeleportDestination.Specific.All(eval)) return false;
                }
                if (Lock != null)
                {
                    if (!eval(this.Lock.Overall)) return false;
                    if (this.Lock.Specific != null && !this.Lock.Specific.All(eval)) return false;
                }
                if (!eval(this.Owner)) return false;
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.GlobalVariable)) return false;
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (!eval(this.Target)) return false;
                if (!eval(this.SpeedTreeSeed)) return false;
                if (DistantLODData != null)
                {
                    if (!eval(this.DistantLODData.Overall)) return false;
                    if (this.DistantLODData.Specific != null && !this.DistantLODData.Specific.All(eval)) return false;
                }
                if (!eval(this.Charge)) return false;
                if (!eval(this.Health)) return false;
                if (!eval(this.LevelModifier)) return false;
                if (!eval(this.XRTM)) return false;
                if (!eval(this.ActionFlags)) return false;
                if (!eval(this.Count)) return false;
                if (MapMarker != null)
                {
                    if (!eval(this.MapMarker.Overall)) return false;
                    if (this.MapMarker.Specific != null && !this.MapMarker.Specific.All(eval)) return false;
                }
                if (!eval(this.OpenByDefault)) return false;
                if (!eval(this.RagdollData)) return false;
                if (!eval(this.Scale)) return false;
                if (!eval(this.ContainedSoul)) return false;
                if (Location != null)
                {
                    if (!eval(this.Location.Overall)) return false;
                    if (this.Location.Specific != null && !this.Location.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Base)) return true;
                if (eval(this.XPCIFluff)) return true;
                if (eval(this.FULLFluff)) return true;
                if (TeleportDestination != null)
                {
                    if (eval(this.TeleportDestination.Overall)) return true;
                    if (this.TeleportDestination.Specific != null && this.TeleportDestination.Specific.Any(eval)) return true;
                }
                if (Lock != null)
                {
                    if (eval(this.Lock.Overall)) return true;
                    if (this.Lock.Specific != null && this.Lock.Specific.Any(eval)) return true;
                }
                if (eval(this.Owner)) return true;
                if (eval(this.FactionRank)) return true;
                if (eval(this.GlobalVariable)) return true;
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (eval(this.Target)) return true;
                if (eval(this.SpeedTreeSeed)) return true;
                if (DistantLODData != null)
                {
                    if (eval(this.DistantLODData.Overall)) return true;
                    if (this.DistantLODData.Specific != null && this.DistantLODData.Specific.Any(eval)) return true;
                }
                if (eval(this.Charge)) return true;
                if (eval(this.Health)) return true;
                if (eval(this.LevelModifier)) return true;
                if (eval(this.XRTM)) return true;
                if (eval(this.ActionFlags)) return true;
                if (eval(this.Count)) return true;
                if (MapMarker != null)
                {
                    if (eval(this.MapMarker.Overall)) return true;
                    if (this.MapMarker.Specific != null && this.MapMarker.Specific.Any(eval)) return true;
                }
                if (eval(this.OpenByDefault)) return true;
                if (eval(this.RagdollData)) return true;
                if (eval(this.Scale)) return true;
                if (eval(this.ContainedSoul)) return true;
                if (Location != null)
                {
                    if (eval(this.Location.Overall)) return true;
                    if (this.Location.Specific != null && this.Location.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Base = eval(this.Base);
                obj.XPCIFluff = eval(this.XPCIFluff);
                obj.FULLFluff = eval(this.FULLFluff);
                obj.TeleportDestination = this.TeleportDestination == null ? null : new MaskItem<R, TeleportDestination.Mask<R>?>(eval(this.TeleportDestination.Overall), this.TeleportDestination.Specific?.Translate(eval));
                obj.Lock = this.Lock == null ? null : new MaskItem<R, LockInformation.Mask<R>?>(eval(this.Lock.Overall), this.Lock.Specific?.Translate(eval));
                obj.Owner = eval(this.Owner);
                obj.FactionRank = eval(this.FactionRank);
                obj.GlobalVariable = eval(this.GlobalVariable);
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.Target = eval(this.Target);
                obj.SpeedTreeSeed = eval(this.SpeedTreeSeed);
                obj.DistantLODData = this.DistantLODData == null ? null : new MaskItem<R, DistantLODData.Mask<R>?>(eval(this.DistantLODData.Overall), this.DistantLODData.Specific?.Translate(eval));
                obj.Charge = eval(this.Charge);
                obj.Health = eval(this.Health);
                obj.LevelModifier = eval(this.LevelModifier);
                obj.XRTM = eval(this.XRTM);
                obj.ActionFlags = eval(this.ActionFlags);
                obj.Count = eval(this.Count);
                obj.MapMarker = this.MapMarker == null ? null : new MaskItem<R, MapMarker.Mask<R>?>(eval(this.MapMarker.Overall), this.MapMarker.Specific?.Translate(eval));
                obj.OpenByDefault = eval(this.OpenByDefault);
                obj.RagdollData = eval(this.RagdollData);
                obj.Scale = eval(this.Scale);
                obj.ContainedSoul = eval(this.ContainedSoul);
                obj.Location = this.Location == null ? null : new MaskItem<R, Location.Mask<R>?>(eval(this.Location.Overall), this.Location.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedObject.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedObject.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedObject.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Base ?? true)
                    {
                        sb.AppendItem(Base, "Base");
                    }
                    if (printMask?.XPCIFluff ?? true)
                    {
                        sb.AppendItem(XPCIFluff, "XPCIFluff");
                    }
                    if (printMask?.FULLFluff ?? true)
                    {
                        sb.AppendItem(FULLFluff, "FULLFluff");
                    }
                    if (printMask?.TeleportDestination?.Overall ?? true)
                    {
                        TeleportDestination?.Print(sb);
                    }
                    if (printMask?.Lock?.Overall ?? true)
                    {
                        Lock?.Print(sb);
                    }
                    if (printMask?.Owner ?? true)
                    {
                        sb.AppendItem(Owner, "Owner");
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        sb.AppendItem(FactionRank, "FactionRank");
                    }
                    if (printMask?.GlobalVariable ?? true)
                    {
                        sb.AppendItem(GlobalVariable, "GlobalVariable");
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.Print(sb);
                    }
                    if (printMask?.Target ?? true)
                    {
                        sb.AppendItem(Target, "Target");
                    }
                    if (printMask?.SpeedTreeSeed ?? true)
                    {
                        sb.AppendItem(SpeedTreeSeed, "SpeedTreeSeed");
                    }
                    if (printMask?.DistantLODData?.Overall ?? true)
                    {
                        DistantLODData?.Print(sb);
                    }
                    if (printMask?.Charge ?? true)
                    {
                        sb.AppendItem(Charge, "Charge");
                    }
                    if (printMask?.Health ?? true)
                    {
                        sb.AppendItem(Health, "Health");
                    }
                    if (printMask?.LevelModifier ?? true)
                    {
                        sb.AppendItem(LevelModifier, "LevelModifier");
                    }
                    if (printMask?.XRTM ?? true)
                    {
                        sb.AppendItem(XRTM, "XRTM");
                    }
                    if (printMask?.ActionFlags ?? true)
                    {
                        sb.AppendItem(ActionFlags, "ActionFlags");
                    }
                    if (printMask?.Count ?? true)
                    {
                        sb.AppendItem(Count, "Count");
                    }
                    if (printMask?.MapMarker?.Overall ?? true)
                    {
                        MapMarker?.Print(sb);
                    }
                    if (printMask?.OpenByDefault ?? true)
                    {
                        sb.AppendItem(OpenByDefault, "OpenByDefault");
                    }
                    if (printMask?.RagdollData ?? true)
                    {
                        sb.AppendItem(RagdollData, "RagdollData");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        sb.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.ContainedSoul ?? true)
                    {
                        sb.AppendItem(ContainedSoul, "ContainedSoul");
                    }
                    if (printMask?.Location?.Overall ?? true)
                    {
                        Location?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Base;
            public Exception? XPCIFluff;
            public Exception? FULLFluff;
            public MaskItem<Exception?, TeleportDestination.ErrorMask?>? TeleportDestination;
            public MaskItem<Exception?, LockInformation.ErrorMask?>? Lock;
            public Exception? Owner;
            public Exception? FactionRank;
            public Exception? GlobalVariable;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public Exception? Target;
            public Exception? SpeedTreeSeed;
            public MaskItem<Exception?, DistantLODData.ErrorMask?>? DistantLODData;
            public Exception? Charge;
            public Exception? Health;
            public Exception? LevelModifier;
            public Exception? XRTM;
            public Exception? ActionFlags;
            public Exception? Count;
            public MaskItem<Exception?, MapMarker.ErrorMask?>? MapMarker;
            public Exception? OpenByDefault;
            public Exception? RagdollData;
            public Exception? Scale;
            public Exception? ContainedSoul;
            public MaskItem<Exception?, Location.ErrorMask?>? Location;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.Base:
                        return Base;
                    case PlacedObject_FieldIndex.XPCIFluff:
                        return XPCIFluff;
                    case PlacedObject_FieldIndex.FULLFluff:
                        return FULLFluff;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        return TeleportDestination;
                    case PlacedObject_FieldIndex.Lock:
                        return Lock;
                    case PlacedObject_FieldIndex.Owner:
                        return Owner;
                    case PlacedObject_FieldIndex.FactionRank:
                        return FactionRank;
                    case PlacedObject_FieldIndex.GlobalVariable:
                        return GlobalVariable;
                    case PlacedObject_FieldIndex.EnableParent:
                        return EnableParent;
                    case PlacedObject_FieldIndex.Target:
                        return Target;
                    case PlacedObject_FieldIndex.SpeedTreeSeed:
                        return SpeedTreeSeed;
                    case PlacedObject_FieldIndex.DistantLODData:
                        return DistantLODData;
                    case PlacedObject_FieldIndex.Charge:
                        return Charge;
                    case PlacedObject_FieldIndex.Health:
                        return Health;
                    case PlacedObject_FieldIndex.LevelModifier:
                        return LevelModifier;
                    case PlacedObject_FieldIndex.XRTM:
                        return XRTM;
                    case PlacedObject_FieldIndex.ActionFlags:
                        return ActionFlags;
                    case PlacedObject_FieldIndex.Count:
                        return Count;
                    case PlacedObject_FieldIndex.MapMarker:
                        return MapMarker;
                    case PlacedObject_FieldIndex.OpenByDefault:
                        return OpenByDefault;
                    case PlacedObject_FieldIndex.RagdollData:
                        return RagdollData;
                    case PlacedObject_FieldIndex.Scale:
                        return Scale;
                    case PlacedObject_FieldIndex.ContainedSoul:
                        return ContainedSoul;
                    case PlacedObject_FieldIndex.Location:
                        return Location;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.Base:
                        this.Base = ex;
                        break;
                    case PlacedObject_FieldIndex.XPCIFluff:
                        this.XPCIFluff = ex;
                        break;
                    case PlacedObject_FieldIndex.FULLFluff:
                        this.FULLFluff = ex;
                        break;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        this.TeleportDestination = new MaskItem<Exception?, TeleportDestination.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Lock:
                        this.Lock = new MaskItem<Exception?, LockInformation.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case PlacedObject_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case PlacedObject_FieldIndex.GlobalVariable:
                        this.GlobalVariable = ex;
                        break;
                    case PlacedObject_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Target:
                        this.Target = ex;
                        break;
                    case PlacedObject_FieldIndex.SpeedTreeSeed:
                        this.SpeedTreeSeed = ex;
                        break;
                    case PlacedObject_FieldIndex.DistantLODData:
                        this.DistantLODData = new MaskItem<Exception?, DistantLODData.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Charge:
                        this.Charge = ex;
                        break;
                    case PlacedObject_FieldIndex.Health:
                        this.Health = ex;
                        break;
                    case PlacedObject_FieldIndex.LevelModifier:
                        this.LevelModifier = ex;
                        break;
                    case PlacedObject_FieldIndex.XRTM:
                        this.XRTM = ex;
                        break;
                    case PlacedObject_FieldIndex.ActionFlags:
                        this.ActionFlags = ex;
                        break;
                    case PlacedObject_FieldIndex.Count:
                        this.Count = ex;
                        break;
                    case PlacedObject_FieldIndex.MapMarker:
                        this.MapMarker = new MaskItem<Exception?, MapMarker.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.OpenByDefault:
                        this.OpenByDefault = ex;
                        break;
                    case PlacedObject_FieldIndex.RagdollData:
                        this.RagdollData = ex;
                        break;
                    case PlacedObject_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case PlacedObject_FieldIndex.ContainedSoul:
                        this.ContainedSoul = ex;
                        break;
                    case PlacedObject_FieldIndex.Location:
                        this.Location = new MaskItem<Exception?, Location.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.Base:
                        this.Base = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XPCIFluff:
                        this.XPCIFluff = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.FULLFluff:
                        this.FULLFluff = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        this.TeleportDestination = (MaskItem<Exception?, TeleportDestination.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Lock:
                        this.Lock = (MaskItem<Exception?, LockInformation.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Owner:
                        this.Owner = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.FactionRank:
                        this.FactionRank = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.GlobalVariable:
                        this.GlobalVariable = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Target:
                        this.Target = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.SpeedTreeSeed:
                        this.SpeedTreeSeed = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.DistantLODData:
                        this.DistantLODData = (MaskItem<Exception?, DistantLODData.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Charge:
                        this.Charge = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Health:
                        this.Health = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LevelModifier:
                        this.LevelModifier = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XRTM:
                        this.XRTM = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.ActionFlags:
                        this.ActionFlags = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Count:
                        this.Count = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.MapMarker:
                        this.MapMarker = (MaskItem<Exception?, MapMarker.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.OpenByDefault:
                        this.OpenByDefault = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.RagdollData:
                        this.RagdollData = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.ContainedSoul:
                        this.ContainedSoul = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Location:
                        this.Location = (MaskItem<Exception?, Location.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Base != null) return true;
                if (XPCIFluff != null) return true;
                if (FULLFluff != null) return true;
                if (TeleportDestination != null) return true;
                if (Lock != null) return true;
                if (Owner != null) return true;
                if (FactionRank != null) return true;
                if (GlobalVariable != null) return true;
                if (EnableParent != null) return true;
                if (Target != null) return true;
                if (SpeedTreeSeed != null) return true;
                if (DistantLODData != null) return true;
                if (Charge != null) return true;
                if (Health != null) return true;
                if (LevelModifier != null) return true;
                if (XRTM != null) return true;
                if (ActionFlags != null) return true;
                if (Count != null) return true;
                if (MapMarker != null) return true;
                if (OpenByDefault != null) return true;
                if (RagdollData != null) return true;
                if (Scale != null) return true;
                if (ContainedSoul != null) return true;
                if (Location != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Base, "Base");
                }
                {
                    sb.AppendItem(XPCIFluff, "XPCIFluff");
                }
                {
                    sb.AppendItem(FULLFluff, "FULLFluff");
                }
                TeleportDestination?.Print(sb);
                Lock?.Print(sb);
                {
                    sb.AppendItem(Owner, "Owner");
                }
                {
                    sb.AppendItem(FactionRank, "FactionRank");
                }
                {
                    sb.AppendItem(GlobalVariable, "GlobalVariable");
                }
                EnableParent?.Print(sb);
                {
                    sb.AppendItem(Target, "Target");
                }
                {
                    sb.AppendItem(SpeedTreeSeed, "SpeedTreeSeed");
                }
                DistantLODData?.Print(sb);
                {
                    sb.AppendItem(Charge, "Charge");
                }
                {
                    sb.AppendItem(Health, "Health");
                }
                {
                    sb.AppendItem(LevelModifier, "LevelModifier");
                }
                {
                    sb.AppendItem(XRTM, "XRTM");
                }
                {
                    sb.AppendItem(ActionFlags, "ActionFlags");
                }
                {
                    sb.AppendItem(Count, "Count");
                }
                MapMarker?.Print(sb);
                {
                    sb.AppendItem(OpenByDefault, "OpenByDefault");
                }
                {
                    sb.AppendItem(RagdollData, "RagdollData");
                }
                {
                    sb.AppendItem(Scale, "Scale");
                }
                {
                    sb.AppendItem(ContainedSoul, "ContainedSoul");
                }
                Location?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Base = this.Base.Combine(rhs.Base);
                ret.XPCIFluff = this.XPCIFluff.Combine(rhs.XPCIFluff);
                ret.FULLFluff = this.FULLFluff.Combine(rhs.FULLFluff);
                ret.TeleportDestination = this.TeleportDestination.Combine(rhs.TeleportDestination, (l, r) => l.Combine(r));
                ret.Lock = this.Lock.Combine(rhs.Lock, (l, r) => l.Combine(r));
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.Target = this.Target.Combine(rhs.Target);
                ret.SpeedTreeSeed = this.SpeedTreeSeed.Combine(rhs.SpeedTreeSeed);
                ret.DistantLODData = this.DistantLODData.Combine(rhs.DistantLODData, (l, r) => l.Combine(r));
                ret.Charge = this.Charge.Combine(rhs.Charge);
                ret.Health = this.Health.Combine(rhs.Health);
                ret.LevelModifier = this.LevelModifier.Combine(rhs.LevelModifier);
                ret.XRTM = this.XRTM.Combine(rhs.XRTM);
                ret.ActionFlags = this.ActionFlags.Combine(rhs.ActionFlags);
                ret.Count = this.Count.Combine(rhs.Count);
                ret.MapMarker = this.MapMarker.Combine(rhs.MapMarker, (l, r) => l.Combine(r));
                ret.OpenByDefault = this.OpenByDefault.Combine(rhs.OpenByDefault);
                ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.ContainedSoul = this.ContainedSoul.Combine(rhs.ContainedSoul);
                ret.Location = this.Location.Combine(rhs.Location, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Base;
            public bool XPCIFluff;
            public bool FULLFluff;
            public TeleportDestination.TranslationMask? TeleportDestination;
            public LockInformation.TranslationMask? Lock;
            public bool Owner;
            public bool FactionRank;
            public bool GlobalVariable;
            public EnableParent.TranslationMask? EnableParent;
            public bool Target;
            public bool SpeedTreeSeed;
            public DistantLODData.TranslationMask? DistantLODData;
            public bool Charge;
            public bool Health;
            public bool LevelModifier;
            public bool XRTM;
            public bool ActionFlags;
            public bool Count;
            public MapMarker.TranslationMask? MapMarker;
            public bool OpenByDefault;
            public bool RagdollData;
            public bool Scale;
            public bool ContainedSoul;
            public Location.TranslationMask? Location;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Base = defaultOn;
                this.XPCIFluff = defaultOn;
                this.FULLFluff = defaultOn;
                this.Owner = defaultOn;
                this.FactionRank = defaultOn;
                this.GlobalVariable = defaultOn;
                this.Target = defaultOn;
                this.SpeedTreeSeed = defaultOn;
                this.Charge = defaultOn;
                this.Health = defaultOn;
                this.LevelModifier = defaultOn;
                this.XRTM = defaultOn;
                this.ActionFlags = defaultOn;
                this.Count = defaultOn;
                this.OpenByDefault = defaultOn;
                this.RagdollData = defaultOn;
                this.Scale = defaultOn;
                this.ContainedSoul = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Base, null));
                ret.Add((XPCIFluff, null));
                ret.Add((FULLFluff, null));
                ret.Add((TeleportDestination != null ? TeleportDestination.OnOverall : DefaultOn, TeleportDestination?.GetCrystal()));
                ret.Add((Lock != null ? Lock.OnOverall : DefaultOn, Lock?.GetCrystal()));
                ret.Add((Owner, null));
                ret.Add((FactionRank, null));
                ret.Add((GlobalVariable, null));
                ret.Add((EnableParent != null ? EnableParent.OnOverall : DefaultOn, EnableParent?.GetCrystal()));
                ret.Add((Target, null));
                ret.Add((SpeedTreeSeed, null));
                ret.Add((DistantLODData != null ? DistantLODData.OnOverall : DefaultOn, DistantLODData?.GetCrystal()));
                ret.Add((Charge, null));
                ret.Add((Health, null));
                ret.Add((LevelModifier, null));
                ret.Add((XRTM, null));
                ret.Add((ActionFlags, null));
                ret.Add((Count, null));
                ret.Add((MapMarker != null ? MapMarker.OnOverall : DefaultOn, MapMarker?.GetCrystal()));
                ret.Add((OpenByDefault, null));
                ret.Add((RagdollData, null));
                ret.Add((Scale, null));
                ret.Add((ContainedSoul, null));
                ret.Add((Location != null ? Location.OnOverall : DefaultOn, Location?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PlacedObject_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedObjectCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedObjectSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedObject(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private PlacedObject(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public PlacedObject(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public PlacedObject(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedObject>.ToString(this);
        }

        protected override Type LinkType => typeof(IPlacedObject);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedObjectGetter rhs) return false;
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedObjectGetter? obj)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlacedObject CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedObject();
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedObject item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedObject GetNew()
        {
            return new PlacedObject();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedObject :
        IFormLinkContainer,
        ILoquiObjectSetter<IPlacedObjectInternal>,
        IOblivionMajorRecordInternal,
        IPlaced,
        IPlacedObjectGetter
    {
        new IFormLinkNullable<IOblivionMajorRecordGetter> Base { get; set; }
        new MemorySlice<Byte>? XPCIFluff { get; set; }
        new MemorySlice<Byte>? FULLFluff { get; set; }
        new TeleportDestination? TeleportDestination { get; set; }
        new LockInformation? Lock { get; set; }
        new IFormLinkNullable<IOwnerGetter> Owner { get; set; }
        new Int32? FactionRank { get; set; }
        new IFormLinkNullable<IGlobalGetter> GlobalVariable { get; set; }
        new EnableParent? EnableParent { get; set; }
        new IFormLinkNullable<IPlacedGetter> Target { get; set; }
        new Byte? SpeedTreeSeed { get; set; }
        new DistantLODData? DistantLODData { get; set; }
        new Single? Charge { get; set; }
        new Int32? Health { get; set; }
        new Int32? LevelModifier { get; set; }
        new IFormLinkNullable<IOblivionMajorRecordGetter> XRTM { get; set; }
        new PlacedObject.ActionFlag? ActionFlags { get; set; }
        new Int32? Count { get; set; }
        new MapMarker? MapMarker { get; set; }
        new Boolean OpenByDefault { get; set; }
        new MemorySlice<Byte>? RagdollData { get; set; }
        new Single? Scale { get; set; }
        new IFormLinkNullable<ISoulGemGetter> ContainedSoul { get; set; }
        new Location? Location { get; set; }
    }

    public partial interface IPlacedObjectInternal :
        IOblivionMajorRecordInternal,
        IPlacedObject,
        IPlacedObjectGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.REFR)]
    public partial interface IPlacedObjectGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPlacedObjectGetter>,
        IMapsToGetter<IPlacedObjectGetter>,
        IPlacedGetter
    {
        static new ILoquiRegistration StaticRegistration => PlacedObject_Registration.Instance;
        IFormLinkNullableGetter<IOblivionMajorRecordGetter> Base { get; }
        ReadOnlyMemorySlice<Byte>? XPCIFluff { get; }
        ReadOnlyMemorySlice<Byte>? FULLFluff { get; }
        ITeleportDestinationGetter? TeleportDestination { get; }
        ILockInformationGetter? Lock { get; }
        IFormLinkNullableGetter<IOwnerGetter> Owner { get; }
        Int32? FactionRank { get; }
        IFormLinkNullableGetter<IGlobalGetter> GlobalVariable { get; }
        IEnableParentGetter? EnableParent { get; }
        IFormLinkNullableGetter<IPlacedGetter> Target { get; }
        Byte? SpeedTreeSeed { get; }
        IDistantLODDataGetter? DistantLODData { get; }
        Single? Charge { get; }
        Int32? Health { get; }
        Int32? LevelModifier { get; }
        IFormLinkNullableGetter<IOblivionMajorRecordGetter> XRTM { get; }
        PlacedObject.ActionFlag? ActionFlags { get; }
        Int32? Count { get; }
        IMapMarkerGetter? MapMarker { get; }
        Boolean OpenByDefault { get; }
        ReadOnlyMemorySlice<Byte>? RagdollData { get; }
        Single? Scale { get; }
        IFormLinkNullableGetter<ISoulGemGetter> ContainedSoul { get; }
        ILocationGetter? Location { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedObjectMixIn
    {
        public static void Clear(this IPlacedObjectInternal item)
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedObject.Mask<bool> GetEqualsMask(
            this IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedObjectGetter item,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            PlacedObject.TranslationMask? equalsMask = null)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedObjectInternal lhs,
            IPlacedObjectGetter rhs,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedObjectInternal lhs,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedObject Duplicate(
            this IPlacedObjectGetter item,
            FormKey formKey,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static PlacedObject Duplicate(
            this IPlacedObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedObjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum PlacedObject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Base = 5,
        XPCIFluff = 6,
        FULLFluff = 7,
        TeleportDestination = 8,
        Lock = 9,
        Owner = 10,
        FactionRank = 11,
        GlobalVariable = 12,
        EnableParent = 13,
        Target = 14,
        SpeedTreeSeed = 15,
        DistantLODData = 16,
        Charge = 17,
        Health = 18,
        LevelModifier = 19,
        XRTM = 20,
        ActionFlags = 21,
        Count = 22,
        MapMarker = 23,
        OpenByDefault = 24,
        RagdollData = 25,
        Scale = 26,
        ContainedSoul = 27,
        Location = 28,
    }
    #endregion

    #region Registration
    internal partial class PlacedObject_Registration : ILoquiRegistration
    {
        public static readonly PlacedObject_Registration Instance = new PlacedObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 24;

        public const ushort FieldCount = 29;

        public static readonly Type MaskType = typeof(PlacedObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedObject.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedObject);

        public static readonly Type GetterType = typeof(IPlacedObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedObject);

        public static readonly Type? InternalSetterType = typeof(IPlacedObjectInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedObject";

        public const string Name = "PlacedObject";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.REFR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.REFR);
            var all = RecordCollection.Factory(
                RecordTypes.REFR,
                RecordTypes.NAME,
                RecordTypes.XPCI,
                RecordTypes.FULL,
                RecordTypes.XTEL,
                RecordTypes.XLOC,
                RecordTypes.XOWN,
                RecordTypes.XRNK,
                RecordTypes.XGLB,
                RecordTypes.XESP,
                RecordTypes.XTRG,
                RecordTypes.XSED,
                RecordTypes.XLOD,
                RecordTypes.XCHG,
                RecordTypes.XHLT,
                RecordTypes.XLCM,
                RecordTypes.XRTM,
                RecordTypes.XACT,
                RecordTypes.XCNT,
                RecordTypes.XMRK,
                RecordTypes.ONAM,
                RecordTypes.XRGD,
                RecordTypes.XSCL,
                RecordTypes.XSOL,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedObjectSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly PlacedObjectSetterCommon Instance = new PlacedObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedObjectInternal item)
        {
            ClearPartial();
            item.Base.Clear();
            item.XPCIFluff = default;
            item.FULLFluff = default;
            item.TeleportDestination = null;
            item.Lock = null;
            item.Owner.Clear();
            item.FactionRank = default;
            item.GlobalVariable.Clear();
            item.EnableParent = null;
            item.Target.Clear();
            item.SpeedTreeSeed = default;
            item.DistantLODData = null;
            item.Charge = default;
            item.Health = default;
            item.LevelModifier = default;
            item.XRTM.Clear();
            item.ActionFlags = default;
            item.Count = default;
            item.MapMarker = null;
            item.OpenByDefault = default(Boolean);
            item.RagdollData = default;
            item.Scale = default;
            item.ContainedSoul.Clear();
            item.Location = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedObject obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Base.Relink(mapping);
            obj.TeleportDestination?.RemapLinks(mapping);
            obj.Lock?.RemapLinks(mapping);
            obj.Owner.Relink(mapping);
            obj.GlobalVariable.Relink(mapping);
            obj.EnableParent?.RemapLinks(mapping);
            obj.Target.Relink(mapping);
            obj.XRTM.Relink(mapping);
            obj.ContainedSoul.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedObjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IPlacedObjectInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedObjectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedObjectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedObject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedObject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlacedObjectCommon : OblivionMajorRecordCommon
    {
        public new static readonly PlacedObjectCommon Instance = new PlacedObjectCommon();

        public PlacedObject.Mask<bool> GetEqualsMask(
            IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedObject.Mask<bool>(false);
            ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            PlacedObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Base = item.Base.Equals(rhs.Base);
            ret.XPCIFluff = MemorySliceExt.SequenceEqual(item.XPCIFluff, rhs.XPCIFluff);
            ret.FULLFluff = MemorySliceExt.SequenceEqual(item.FULLFluff, rhs.FULLFluff);
            ret.TeleportDestination = EqualsMaskHelper.EqualsHelper(
                item.TeleportDestination,
                rhs.TeleportDestination,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Lock = EqualsMaskHelper.EqualsHelper(
                item.Lock,
                rhs.Lock,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Owner = item.Owner.Equals(rhs.Owner);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.GlobalVariable = item.GlobalVariable.Equals(rhs.GlobalVariable);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Target = item.Target.Equals(rhs.Target);
            ret.SpeedTreeSeed = item.SpeedTreeSeed == rhs.SpeedTreeSeed;
            ret.DistantLODData = EqualsMaskHelper.EqualsHelper(
                item.DistantLODData,
                rhs.DistantLODData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Charge = item.Charge.EqualsWithin(rhs.Charge);
            ret.Health = item.Health == rhs.Health;
            ret.LevelModifier = item.LevelModifier == rhs.LevelModifier;
            ret.XRTM = item.XRTM.Equals(rhs.XRTM);
            ret.ActionFlags = item.ActionFlags == rhs.ActionFlags;
            ret.Count = item.Count == rhs.Count;
            ret.MapMarker = EqualsMaskHelper.EqualsHelper(
                item.MapMarker,
                rhs.MapMarker,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.OpenByDefault = item.OpenByDefault == rhs.OpenByDefault;
            ret.RagdollData = MemorySliceExt.SequenceEqual(item.RagdollData, rhs.RagdollData);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.ContainedSoul = item.ContainedSoul.Equals(rhs.ContainedSoul);
            ret.Location = EqualsMaskHelper.EqualsHelper(
                item.Location,
                rhs.Location,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlacedObjectGetter item,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedObject =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedObject) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedObjectGetter item,
            StructuredStringBuilder sb,
            PlacedObject.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Base ?? true)
            {
                sb.AppendItem(item.Base.FormKeyNullable, "Base");
            }
            if ((printMask?.XPCIFluff ?? true)
                && item.XPCIFluff is {} XPCIFluffItem)
            {
                sb.AppendLine($"XPCIFluff => {SpanExt.ToHexString(XPCIFluffItem)}");
            }
            if ((printMask?.FULLFluff ?? true)
                && item.FULLFluff is {} FULLFluffItem)
            {
                sb.AppendLine($"FULLFluff => {SpanExt.ToHexString(FULLFluffItem)}");
            }
            if ((printMask?.TeleportDestination?.Overall ?? true)
                && item.TeleportDestination is {} TeleportDestinationItem)
            {
                TeleportDestinationItem?.Print(sb, "TeleportDestination");
            }
            if ((printMask?.Lock?.Overall ?? true)
                && item.Lock is {} LockItem)
            {
                LockItem?.Print(sb, "Lock");
            }
            if (printMask?.Owner ?? true)
            {
                sb.AppendItem(item.Owner.FormKeyNullable, "Owner");
            }
            if ((printMask?.FactionRank ?? true)
                && item.FactionRank is {} FactionRankItem)
            {
                sb.AppendItem(FactionRankItem, "FactionRank");
            }
            if (printMask?.GlobalVariable ?? true)
            {
                sb.AppendItem(item.GlobalVariable.FormKeyNullable, "GlobalVariable");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent is {} EnableParentItem)
            {
                EnableParentItem?.Print(sb, "EnableParent");
            }
            if (printMask?.Target ?? true)
            {
                sb.AppendItem(item.Target.FormKeyNullable, "Target");
            }
            if ((printMask?.SpeedTreeSeed ?? true)
                && item.SpeedTreeSeed is {} SpeedTreeSeedItem)
            {
                sb.AppendItem(SpeedTreeSeedItem, "SpeedTreeSeed");
            }
            if ((printMask?.DistantLODData?.Overall ?? true)
                && item.DistantLODData is {} DistantLODDataItem)
            {
                DistantLODDataItem?.Print(sb, "DistantLODData");
            }
            if ((printMask?.Charge ?? true)
                && item.Charge is {} ChargeItem)
            {
                sb.AppendItem(ChargeItem, "Charge");
            }
            if ((printMask?.Health ?? true)
                && item.Health is {} HealthItem)
            {
                sb.AppendItem(HealthItem, "Health");
            }
            if ((printMask?.LevelModifier ?? true)
                && item.LevelModifier is {} LevelModifierItem)
            {
                sb.AppendItem(LevelModifierItem, "LevelModifier");
            }
            if (printMask?.XRTM ?? true)
            {
                sb.AppendItem(item.XRTM.FormKeyNullable, "XRTM");
            }
            if ((printMask?.ActionFlags ?? true)
                && item.ActionFlags is {} ActionFlagsItem)
            {
                sb.AppendItem(ActionFlagsItem, "ActionFlags");
            }
            if ((printMask?.Count ?? true)
                && item.Count is {} CountItem)
            {
                sb.AppendItem(CountItem, "Count");
            }
            if ((printMask?.MapMarker?.Overall ?? true)
                && item.MapMarker is {} MapMarkerItem)
            {
                MapMarkerItem?.Print(sb, "MapMarker");
            }
            if (printMask?.OpenByDefault ?? true)
            {
                sb.AppendItem(item.OpenByDefault, "OpenByDefault");
            }
            if ((printMask?.RagdollData ?? true)
                && item.RagdollData is {} RagdollDataItem)
            {
                sb.AppendLine($"RagdollData => {SpanExt.ToHexString(RagdollDataItem)}");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale is {} ScaleItem)
            {
                sb.AppendItem(ScaleItem, "Scale");
            }
            if (printMask?.ContainedSoul ?? true)
            {
                sb.AppendItem(item.ContainedSoul.FormKeyNullable, "ContainedSoul");
            }
            if ((printMask?.Location?.Overall ?? true)
                && item.Location is {} LocationItem)
            {
                LocationItem?.Print(sb, "Location");
            }
        }
        
        public static PlacedObject_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new PlacedObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedObjectGetter? lhs,
            IPlacedObjectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Base) ?? true))
            {
                if (!lhs.Base.Equals(rhs.Base)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XPCIFluff) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.XPCIFluff, rhs.XPCIFluff)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FULLFluff) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FULLFluff, rhs.FULLFluff)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportDestination) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TeleportDestination, rhs.TeleportDestination, out var lhsTeleportDestination, out var rhsTeleportDestination, out var isTeleportDestinationEqual))
                {
                    if (!((TeleportDestinationCommon)((ITeleportDestinationGetter)lhsTeleportDestination).CommonInstance()!).Equals(lhsTeleportDestination, rhsTeleportDestination, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination))) return false;
                }
                else if (!isTeleportDestinationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Lock) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Lock, rhs.Lock, out var lhsLock, out var rhsLock, out var isLockEqual))
                {
                    if (!((LockInformationCommon)((ILockInformationGetter)lhsLock).CommonInstance()!).Equals(lhsLock, rhsLock, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock))) return false;
                }
                else if (!isLockEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Owner) ?? true))
            {
                if (!lhs.Owner.Equals(rhs.Owner)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FactionRank) ?? true))
            {
                if (lhs.FactionRank != rhs.FactionRank) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.GlobalVariable) ?? true))
            {
                if (!lhs.GlobalVariable.Equals(rhs.GlobalVariable)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EnableParent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EnableParent, rhs.EnableParent, out var lhsEnableParent, out var rhsEnableParent, out var isEnableParentEqual))
                {
                    if (!((EnableParentCommon)((IEnableParentGetter)lhsEnableParent).CommonInstance()!).Equals(lhsEnableParent, rhsEnableParent, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent))) return false;
                }
                else if (!isEnableParentEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Target) ?? true))
            {
                if (!lhs.Target.Equals(rhs.Target)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.SpeedTreeSeed) ?? true))
            {
                if (lhs.SpeedTreeSeed != rhs.SpeedTreeSeed) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DistantLODData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DistantLODData, rhs.DistantLODData, out var lhsDistantLODData, out var rhsDistantLODData, out var isDistantLODDataEqual))
                {
                    if (!((DistantLODDataCommon)((IDistantLODDataGetter)lhsDistantLODData).CommonInstance()!).Equals(lhsDistantLODData, rhsDistantLODData, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.DistantLODData))) return false;
                }
                else if (!isDistantLODDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Charge) ?? true))
            {
                if (!lhs.Charge.EqualsWithin(rhs.Charge)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Health) ?? true))
            {
                if (lhs.Health != rhs.Health) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LevelModifier) ?? true))
            {
                if (lhs.LevelModifier != rhs.LevelModifier) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XRTM) ?? true))
            {
                if (!lhs.XRTM.Equals(rhs.XRTM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ActionFlags) ?? true))
            {
                if (lhs.ActionFlags != rhs.ActionFlags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Count) ?? true))
            {
                if (lhs.Count != rhs.Count) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MapMarker) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MapMarker, rhs.MapMarker, out var lhsMapMarker, out var rhsMapMarker, out var isMapMarkerEqual))
                {
                    if (!((MapMarkerCommon)((IMapMarkerGetter)lhsMapMarker).CommonInstance()!).Equals(lhsMapMarker, rhsMapMarker, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker))) return false;
                }
                else if (!isMapMarkerEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.OpenByDefault) ?? true))
            {
                if (lhs.OpenByDefault != rhs.OpenByDefault) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollData) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.RagdollData, rhs.RagdollData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Scale) ?? true))
            {
                if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ContainedSoul) ?? true))
            {
                if (!lhs.ContainedSoul.Equals(rhs.ContainedSoul)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Location) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Location, rhs.Location, out var lhsLocation, out var rhsLocation, out var isLocationEqual))
                {
                    if (!((LocationCommon)((ILocationGetter)lhsLocation).CommonInstance()!).Equals(lhsLocation, rhsLocation, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Location))) return false;
                }
                else if (!isLocationEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedObjectGetter?)lhs,
                rhs: rhs as IPlacedObjectGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedObjectGetter?)lhs,
                rhs: rhs as IPlacedObjectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlacedObjectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Base);
            if (item.XPCIFluff is {} XPCIFluffItem)
            {
                hash.Add(XPCIFluffItem);
            }
            if (item.FULLFluff is {} FULLFluffItem)
            {
                hash.Add(FULLFluffItem);
            }
            if (item.TeleportDestination is {} TeleportDestinationitem)
            {
                hash.Add(TeleportDestinationitem);
            }
            if (item.Lock is {} Lockitem)
            {
                hash.Add(Lockitem);
            }
            hash.Add(item.Owner);
            if (item.FactionRank is {} FactionRankitem)
            {
                hash.Add(FactionRankitem);
            }
            hash.Add(item.GlobalVariable);
            if (item.EnableParent is {} EnableParentitem)
            {
                hash.Add(EnableParentitem);
            }
            hash.Add(item.Target);
            if (item.SpeedTreeSeed is {} SpeedTreeSeeditem)
            {
                hash.Add(SpeedTreeSeeditem);
            }
            if (item.DistantLODData is {} DistantLODDataitem)
            {
                hash.Add(DistantLODDataitem);
            }
            if (item.Charge is {} Chargeitem)
            {
                hash.Add(Chargeitem);
            }
            if (item.Health is {} Healthitem)
            {
                hash.Add(Healthitem);
            }
            if (item.LevelModifier is {} LevelModifieritem)
            {
                hash.Add(LevelModifieritem);
            }
            hash.Add(item.XRTM);
            if (item.ActionFlags is {} ActionFlagsitem)
            {
                hash.Add(ActionFlagsitem);
            }
            if (item.Count is {} Countitem)
            {
                hash.Add(Countitem);
            }
            if (item.MapMarker is {} MapMarkeritem)
            {
                hash.Add(MapMarkeritem);
            }
            hash.Add(item.OpenByDefault);
            if (item.RagdollData is {} RagdollDataItem)
            {
                hash.Add(RagdollDataItem);
            }
            if (item.Scale is {} Scaleitem)
            {
                hash.Add(Scaleitem);
            }
            hash.Add(item.ContainedSoul);
            if (item.Location is {} Locationitem)
            {
                hash.Add(Locationitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedObjectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedObjectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedObjectGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Base, out var BaseInfo))
            {
                yield return BaseInfo;
            }
            if (obj.TeleportDestination is {} TeleportDestinationItems)
            {
                foreach (var item in TeleportDestinationItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Lock is {} LockItems)
            {
                foreach (var item in LockItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Owner, out var OwnerInfo))
            {
                yield return OwnerInfo;
            }
            if (FormLinkInformation.TryFactory(obj.GlobalVariable, out var GlobalVariableInfo))
            {
                yield return GlobalVariableInfo;
            }
            if (obj.EnableParent is {} EnableParentItems)
            {
                foreach (var item in EnableParentItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Target, out var TargetInfo))
            {
                yield return TargetInfo;
            }
            if (FormLinkInformation.TryFactory(obj.XRTM, out var XRTMInfo))
            {
                yield return XRTMInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ContainedSoul, out var ContainedSoulInfo))
            {
                yield return ContainedSoulInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public PlacedObject Duplicate(
            IPlacedObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedObject(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedObjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedObjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class PlacedObjectSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly PlacedObjectSetterTranslationCommon Instance = new PlacedObjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedObjectInternal item,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedObject item,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Base) ?? true))
            {
                item.Base.SetTo(rhs.Base.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XPCIFluff) ?? true))
            {
                if(rhs.XPCIFluff is {} XPCIFluffrhs)
                {
                    item.XPCIFluff = XPCIFluffrhs.ToArray();
                }
                else
                {
                    item.XPCIFluff = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FULLFluff) ?? true))
            {
                if(rhs.FULLFluff is {} FULLFluffrhs)
                {
                    item.FULLFluff = FULLFluffrhs.ToArray();
                }
                else
                {
                    item.FULLFluff = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportDestination) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                try
                {
                    if(rhs.TeleportDestination is {} rhsTeleportDestination)
                    {
                        item.TeleportDestination = rhsTeleportDestination.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination));
                    }
                    else
                    {
                        item.TeleportDestination = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Lock) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                try
                {
                    if(rhs.Lock is {} rhsLock)
                    {
                        item.Lock = rhsLock.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock));
                    }
                    else
                    {
                        item.Lock = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Owner) ?? true))
            {
                item.Owner.SetTo(rhs.Owner.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.GlobalVariable) ?? true))
            {
                item.GlobalVariable.SetTo(rhs.GlobalVariable.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent is {} rhsEnableParent)
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Target) ?? true))
            {
                item.Target.SetTo(rhs.Target.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.SpeedTreeSeed) ?? true))
            {
                item.SpeedTreeSeed = rhs.SpeedTreeSeed;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DistantLODData) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.DistantLODData);
                try
                {
                    if(rhs.DistantLODData is {} rhsDistantLODData)
                    {
                        item.DistantLODData = rhsDistantLODData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.DistantLODData));
                    }
                    else
                    {
                        item.DistantLODData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Charge) ?? true))
            {
                item.Charge = rhs.Charge;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Health) ?? true))
            {
                item.Health = rhs.Health;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LevelModifier) ?? true))
            {
                item.LevelModifier = rhs.LevelModifier;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XRTM) ?? true))
            {
                item.XRTM.SetTo(rhs.XRTM.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ActionFlags) ?? true))
            {
                item.ActionFlags = rhs.ActionFlags;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Count) ?? true))
            {
                item.Count = rhs.Count;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MapMarker) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                try
                {
                    if(rhs.MapMarker is {} rhsMapMarker)
                    {
                        item.MapMarker = rhsMapMarker.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker));
                    }
                    else
                    {
                        item.MapMarker = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.OpenByDefault) ?? true))
            {
                item.OpenByDefault = rhs.OpenByDefault;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollData) ?? true))
            {
                if(rhs.RagdollData is {} RagdollDatarhs)
                {
                    item.RagdollData = RagdollDatarhs.ToArray();
                }
                else
                {
                    item.RagdollData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ContainedSoul) ?? true))
            {
                item.ContainedSoul.SetTo(rhs.ContainedSoul.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Location) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Location);
                try
                {
                    if(rhs.Location is {} rhsLocation)
                    {
                        item.Location = rhsLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Location));
                    }
                    else
                    {
                        item.Location = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedObject item,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObjectInternal)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObject)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObjectInternal)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObject)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            PlacedObject.TranslationMask? copyMask = null)
        {
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PlacedObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedObjectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class PlacedObjectBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlacedObjectBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPlacedObjectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Base,
                header: translationParams.ConvertToCustom(RecordTypes.NAME));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XPCIFluff,
                header: translationParams.ConvertToCustom(RecordTypes.XPCI));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FULLFluff,
                header: translationParams.ConvertToCustom(RecordTypes.FULL));
            if (item.TeleportDestination is {} TeleportDestinationItem)
            {
                ((TeleportDestinationBinaryWriteTranslation)((IBinaryItem)TeleportDestinationItem).BinaryWriteTranslator).Write(
                    item: TeleportDestinationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Lock is {} LockItem)
            {
                ((LockInformationBinaryWriteTranslation)((IBinaryItem)LockItem).BinaryWriteTranslator).Write(
                    item: LockItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Owner,
                header: translationParams.ConvertToCustom(RecordTypes.XOWN));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FactionRank,
                header: translationParams.ConvertToCustom(RecordTypes.XRNK));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlobalVariable,
                header: translationParams.ConvertToCustom(RecordTypes.XGLB));
            if (item.EnableParent is {} EnableParentItem)
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Target,
                header: translationParams.ConvertToCustom(RecordTypes.XTRG));
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.SpeedTreeSeed,
                header: translationParams.ConvertToCustom(RecordTypes.XSED));
            if (item.DistantLODData is {} DistantLODDataItem)
            {
                ((DistantLODDataBinaryWriteTranslation)((IBinaryItem)DistantLODDataItem).BinaryWriteTranslator).Write(
                    item: DistantLODDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Charge,
                header: translationParams.ConvertToCustom(RecordTypes.XCHG));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Health,
                header: translationParams.ConvertToCustom(RecordTypes.XHLT));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.LevelModifier,
                header: translationParams.ConvertToCustom(RecordTypes.XLCM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.XRTM,
                header: translationParams.ConvertToCustom(RecordTypes.XRTM));
            EnumBinaryTranslation<PlacedObject.ActionFlag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.ActionFlags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.XACT));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Count,
                header: translationParams.ConvertToCustom(RecordTypes.XCNT));
            if (item.MapMarker is {} MapMarkerItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.XMRK)) { }
                ((MapMarkerBinaryWriteTranslation)((IBinaryItem)MapMarkerItem).BinaryWriteTranslator).Write(
                    item: MapMarkerItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            PlacedObjectBinaryWriteTranslation.WriteBinaryOpenByDefault(
                writer: writer,
                item: item);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RagdollData,
                header: translationParams.ConvertToCustom(RecordTypes.XRGD));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: translationParams.ConvertToCustom(RecordTypes.XSCL));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ContainedSoul,
                header: translationParams.ConvertToCustom(RecordTypes.XSOL));
            if (item.Location is {} LocationItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.DATA))
                {
                    ((LocationBinaryWriteTranslation)((IBinaryItem)LocationItem).BinaryWriteTranslator).Write(
                        item: LocationItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public static partial void WriteBinaryOpenByDefaultCustom(
            MutagenWriter writer,
            IPlacedObjectGetter item);

        public static void WriteBinaryOpenByDefault(
            MutagenWriter writer,
            IPlacedObjectGetter item)
        {
            WriteBinaryOpenByDefaultCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedObjectGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.REFR,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedObjectBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly PlacedObjectBinaryCreateTranslation Instance = new PlacedObjectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.REFR;
        public static ParseResult FillBinaryRecordTypes(
            IPlacedObjectInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NAME:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Base.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.Base;
                }
                case RecordTypeInts.XPCI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XPCIFluff = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XPCIFluff;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FULLFluff = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.FULLFluff;
                }
                case RecordTypeInts.XTEL:
                {
                    item.TeleportDestination = Mutagen.Bethesda.Oblivion.TeleportDestination.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.TeleportDestination;
                }
                case RecordTypeInts.XLOC:
                {
                    item.Lock = Mutagen.Bethesda.Oblivion.LockInformation.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.Lock;
                }
                case RecordTypeInts.XOWN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Owner.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return (int)PlacedObject_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XGLB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GlobalVariable.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.GlobalVariable;
                }
                case RecordTypeInts.XESP:
                {
                    item.EnableParent = Mutagen.Bethesda.Oblivion.EnableParent.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XTRG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Target.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.Target;
                }
                case RecordTypeInts.XSED:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpeedTreeSeed = frame.ReadUInt8();
                    return (int)PlacedObject_FieldIndex.SpeedTreeSeed;
                }
                case RecordTypeInts.XLOD:
                {
                    item.DistantLODData = Mutagen.Bethesda.Oblivion.DistantLODData.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.DistantLODData;
                }
                case RecordTypeInts.XCHG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Charge = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.Charge;
                }
                case RecordTypeInts.XHLT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Health = frame.ReadInt32();
                    return (int)PlacedObject_FieldIndex.Health;
                }
                case RecordTypeInts.XLCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LevelModifier = frame.ReadInt32();
                    return (int)PlacedObject_FieldIndex.LevelModifier;
                }
                case RecordTypeInts.XRTM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XRTM.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.XRTM;
                }
                case RecordTypeInts.XACT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActionFlags = EnumBinaryTranslation<PlacedObject.ActionFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)PlacedObject_FieldIndex.ActionFlags;
                }
                case RecordTypeInts.XCNT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Count = frame.ReadInt32();
                    return (int)PlacedObject_FieldIndex.Count;
                }
                case RecordTypeInts.XMRK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.MapMarker = Mutagen.Bethesda.Oblivion.MapMarker.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.MapMarker;
                }
                case RecordTypeInts.ONAM:
                {
                    PlacedObjectBinaryCreateTranslation.FillBinaryOpenByDefaultCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)PlacedObject_FieldIndex.OpenByDefault;
                }
                case RecordTypeInts.XRGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XSCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.Scale;
                }
                case RecordTypeInts.XSOL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ContainedSoul.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.ContainedSoul;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.Location = Mutagen.Bethesda.Oblivion.Location.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.Location;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryOpenByDefaultCustom(
            MutagenFrame frame,
            IPlacedObjectInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class PlacedObjectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class PlacedObjectBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IPlacedObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedObjectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedObjectCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPlacedObject);


        #region Base
        private int? _BaseLocation;
        public IFormLinkNullableGetter<IOblivionMajorRecordGetter> Base => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IOblivionMajorRecordGetter>(_package, _recordData, _BaseLocation);
        #endregion
        #region XPCIFluff
        private int? _XPCIFluffLocation;
        public ReadOnlyMemorySlice<Byte>? XPCIFluff => _XPCIFluffLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XPCIFluffLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FULLFluff
        private int? _FULLFluffLocation;
        public ReadOnlyMemorySlice<Byte>? FULLFluff => _FULLFluffLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FULLFluffLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region TeleportDestination
        private RangeInt32? _TeleportDestinationLocation;
        public ITeleportDestinationGetter? TeleportDestination => _TeleportDestinationLocation.HasValue ? TeleportDestinationBinaryOverlay.TeleportDestinationFactory(_recordData.Slice(_TeleportDestinationLocation!.Value.Min), _package) : default;
        #endregion
        #region Lock
        private RangeInt32? _LockLocation;
        public ILockInformationGetter? Lock => _LockLocation.HasValue ? LockInformationBinaryOverlay.LockInformationFactory(_recordData.Slice(_LockLocation!.Value.Min), _package) : default;
        #endregion
        #region Owner
        private int? _OwnerLocation;
        public IFormLinkNullableGetter<IOwnerGetter> Owner => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IOwnerGetter>(_package, _recordData, _OwnerLocation);
        #endregion
        #region FactionRank
        private int? _FactionRankLocation;
        public Int32? FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FactionRankLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region GlobalVariable
        private int? _GlobalVariableLocation;
        public IFormLinkNullableGetter<IGlobalGetter> GlobalVariable => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _GlobalVariableLocation);
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(_recordData.Slice(_EnableParentLocation!.Value.Min), _package) : default;
        #endregion
        #region Target
        private int? _TargetLocation;
        public IFormLinkNullableGetter<IPlacedGetter> Target => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedGetter>(_package, _recordData, _TargetLocation);
        #endregion
        #region SpeedTreeSeed
        private int? _SpeedTreeSeedLocation;
        public Byte? SpeedTreeSeed => _SpeedTreeSeedLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SpeedTreeSeedLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region DistantLODData
        private RangeInt32? _DistantLODDataLocation;
        public IDistantLODDataGetter? DistantLODData => _DistantLODDataLocation.HasValue ? DistantLODDataBinaryOverlay.DistantLODDataFactory(_recordData.Slice(_DistantLODDataLocation!.Value.Min), _package) : default;
        #endregion
        #region Charge
        private int? _ChargeLocation;
        public Single? Charge => _ChargeLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ChargeLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Health
        private int? _HealthLocation;
        public Int32? Health => _HealthLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HealthLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region LevelModifier
        private int? _LevelModifierLocation;
        public Int32? LevelModifier => _LevelModifierLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LevelModifierLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region XRTM
        private int? _XRTMLocation;
        public IFormLinkNullableGetter<IOblivionMajorRecordGetter> XRTM => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IOblivionMajorRecordGetter>(_package, _recordData, _XRTMLocation);
        #endregion
        #region ActionFlags
        private int? _ActionFlagsLocation;
        public PlacedObject.ActionFlag? ActionFlags => _ActionFlagsLocation.HasValue ? (PlacedObject.ActionFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ActionFlagsLocation!.Value, _package.MetaData.Constants)) : default(PlacedObject.ActionFlag?);
        #endregion
        #region Count
        private int? _CountLocation;
        public Int32? Count => _CountLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _CountLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        public IMapMarkerGetter? MapMarker { get; private set; }
        #region OpenByDefault
        partial void OpenByDefaultCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset);
        public partial Boolean GetOpenByDefaultCustom();
        public Boolean OpenByDefault => GetOpenByDefaultCustom();
        #endregion
        #region RagdollData
        private int? _RagdollDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollData => _RagdollDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _RagdollDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region ContainedSoul
        private int? _ContainedSoulLocation;
        public IFormLinkNullableGetter<ISoulGemGetter> ContainedSoul => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoulGemGetter>(_package, _recordData, _ContainedSoulLocation);
        #endregion
        public ILocationGetter? Location { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedObjectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedObjectGetter PlacedObjectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlacedObjectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlacedObjectGetter PlacedObjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedObjectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NAME:
                {
                    _BaseLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Base;
                }
                case RecordTypeInts.XPCI:
                {
                    _XPCIFluffLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XPCIFluff;
                }
                case RecordTypeInts.FULL:
                {
                    _FULLFluffLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.FULLFluff;
                }
                case RecordTypeInts.XTEL:
                {
                    _TeleportDestinationLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.TeleportDestination;
                }
                case RecordTypeInts.XLOC:
                {
                    _LockLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.Lock;
                }
                case RecordTypeInts.XOWN:
                {
                    _OwnerLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    _FactionRankLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XGLB:
                {
                    _GlobalVariableLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.GlobalVariable;
                }
                case RecordTypeInts.XESP:
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XTRG:
                {
                    _TargetLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Target;
                }
                case RecordTypeInts.XSED:
                {
                    _SpeedTreeSeedLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.SpeedTreeSeed;
                }
                case RecordTypeInts.XLOD:
                {
                    _DistantLODDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.DistantLODData;
                }
                case RecordTypeInts.XCHG:
                {
                    _ChargeLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Charge;
                }
                case RecordTypeInts.XHLT:
                {
                    _HealthLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Health;
                }
                case RecordTypeInts.XLCM:
                {
                    _LevelModifierLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.LevelModifier;
                }
                case RecordTypeInts.XRTM:
                {
                    _XRTMLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XRTM;
                }
                case RecordTypeInts.XACT:
                {
                    _ActionFlagsLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.ActionFlags;
                }
                case RecordTypeInts.XCNT:
                {
                    _CountLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Count;
                }
                case RecordTypeInts.XMRK:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.MapMarker = MapMarkerBinaryOverlay.MapMarkerFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.MapMarker;
                }
                case RecordTypeInts.ONAM:
                {
                    OpenByDefaultCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset);
                    return (int)PlacedObject_FieldIndex.OpenByDefault;
                }
                case RecordTypeInts.XRGD:
                {
                    _RagdollDataLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XSCL:
                {
                    _ScaleLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Scale;
                }
                case RecordTypeInts.XSOL:
                {
                    _ContainedSoulLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.ContainedSoul;
                }
                case RecordTypeInts.DATA:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.Location = LocationBinaryOverlay.LocationFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.Location;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedObject>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedObjectGetter rhs) return false;
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedObjectGetter? obj)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

