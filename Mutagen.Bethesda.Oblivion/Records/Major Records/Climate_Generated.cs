/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Climate :
        OblivionMajorRecord,
        IClimateInternal,
        IEquatable<IClimateGetter>,
        ILoquiObjectSetter<Climate>
    {
        #region Ctor
        protected Climate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WeatherType>? _Weathers;
        public ExtendedList<WeatherType>? Weathers
        {
            get => this._Weathers;
            set => this._Weathers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWeatherTypeGetter>? IClimateGetter.Weathers => _Weathers;
        #endregion

        #endregion
        #region SunTexture
        public String? SunTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClimateGetter.SunTexture => this.SunTexture;
        #endregion
        #region SunGlareTexture
        public String? SunGlareTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClimateGetter.SunGlareTexture => this.SunGlareTexture;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IClimateGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ClimateData? _Data;
        public ClimateData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IClimateDataGetter? IClimateGetter.Data => this.Data;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ClimateMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Weathers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>());
                this.SunTexture = initialValue;
                this.SunGlareTexture = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Data = new MaskItem<TItem, ClimateData.Mask<TItem>?>(initialValue, new ClimateData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Weathers,
                TItem SunTexture,
                TItem SunGlareTexture,
                TItem Model,
                TItem Data)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Weathers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>?>(Weathers, Enumerable.Empty<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>());
                this.SunTexture = SunTexture;
                this.SunGlareTexture = SunGlareTexture;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Data = new MaskItem<TItem, ClimateData.Mask<TItem>?>(Data, new ClimateData.Mask<TItem>(Data));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>?>? Weathers;
            public TItem SunTexture;
            public TItem SunGlareTexture;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, ClimateData.Mask<TItem>?>? Data { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
                if (!object.Equals(this.SunTexture, rhs.SunTexture)) return false;
                if (!object.Equals(this.SunGlareTexture, rhs.SunGlareTexture)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Weathers);
                hash.Add(this.SunTexture);
                hash.Add(this.SunGlareTexture);
                hash.Add(this.Model);
                hash.Add(this.Data);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Weathers != null)
                {
                    if (!eval(this.Weathers.Overall)) return false;
                    if (this.Weathers.Specific != null)
                    {
                        foreach (var item in this.Weathers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SunTexture)) return false;
                if (!eval(this.SunGlareTexture)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Weathers != null)
                {
                    if (eval(this.Weathers.Overall)) return true;
                    if (this.Weathers.Specific != null)
                    {
                        foreach (var item in this.Weathers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SunTexture)) return true;
                if (eval(this.SunGlareTexture)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Climate.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Weathers != null)
                {
                    obj.Weathers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherType.Mask<R>?>>?>(eval(this.Weathers.Overall), Enumerable.Empty<MaskItemIndexed<R, WeatherType.Mask<R>?>>());
                    if (Weathers.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WeatherType.Mask<R>?>>();
                        obj.Weathers.Specific = l;
                        foreach (var item in Weathers.Specific)
                        {
                            MaskItemIndexed<R, WeatherType.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, WeatherType.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SunTexture = eval(this.SunTexture);
                obj.SunGlareTexture = eval(this.SunGlareTexture);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Data = this.Data == null ? null : new MaskItem<R, ClimateData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Climate.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Climate.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Climate.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Weathers?.Overall ?? true)
                        && Weathers is {} WeathersItem)
                    {
                        sb.AppendLine("Weathers =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(WeathersItem.Overall);
                            if (WeathersItem.Specific != null)
                            {
                                foreach (var subItem in WeathersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SunTexture ?? true)
                    {
                        sb.AppendItem(SunTexture, "SunTexture");
                    }
                    if (printMask?.SunGlareTexture ?? true)
                    {
                        sb.AppendItem(SunGlareTexture, "SunGlareTexture");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>? Weathers;
            public Exception? SunTexture;
            public Exception? SunGlareTexture;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, ClimateData.ErrorMask?>? Data;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.Weathers:
                        return Weathers;
                    case Climate_FieldIndex.SunTexture:
                        return SunTexture;
                    case Climate_FieldIndex.SunGlareTexture:
                        return SunGlareTexture;
                    case Climate_FieldIndex.Model:
                        return Model;
                    case Climate_FieldIndex.Data:
                        return Data;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.Weathers:
                        this.Weathers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>(ex, null);
                        break;
                    case Climate_FieldIndex.SunTexture:
                        this.SunTexture = ex;
                        break;
                    case Climate_FieldIndex.SunGlareTexture:
                        this.SunGlareTexture = ex;
                        break;
                    case Climate_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Climate_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, ClimateData.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.Weathers:
                        this.Weathers = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>)obj;
                        break;
                    case Climate_FieldIndex.SunTexture:
                        this.SunTexture = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunGlareTexture:
                        this.SunGlareTexture = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Climate_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, ClimateData.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Weathers != null) return true;
                if (SunTexture != null) return true;
                if (SunGlareTexture != null) return true;
                if (Model != null) return true;
                if (Data != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Weathers is {} WeathersItem)
                {
                    sb.AppendLine("Weathers =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(WeathersItem.Overall);
                        if (WeathersItem.Specific != null)
                        {
                            foreach (var subItem in WeathersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SunTexture, "SunTexture");
                }
                {
                    sb.AppendItem(SunGlareTexture, "SunGlareTexture");
                }
                Model?.Print(sb);
                Data?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Weathers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Weathers?.Overall, rhs.Weathers?.Overall), Noggog.ExceptionExt.Combine(this.Weathers?.Specific, rhs.Weathers?.Specific));
                ret.SunTexture = this.SunTexture.Combine(rhs.SunTexture);
                ret.SunGlareTexture = this.SunGlareTexture.Combine(rhs.SunGlareTexture);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public WeatherType.TranslationMask? Weathers;
            public bool SunTexture;
            public bool SunGlareTexture;
            public Model.TranslationMask? Model;
            public ClimateData.TranslationMask? Data;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.SunTexture = defaultOn;
                this.SunGlareTexture = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Weathers == null ? DefaultOn : !Weathers.GetCrystal().CopyNothing, Weathers?.GetCrystal()));
                ret.Add((SunTexture, null));
                ret.Add((SunGlareTexture, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Climate_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ClimateCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ClimateSetterCommon.Instance.RemapLinks(this, mapping);
        public Climate(
            FormKey formKey,
            OblivionRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Climate(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Climate(IOblivionMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.OblivionRelease)
        {
        }

        public Climate(IOblivionMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.OblivionRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Climate>.ToString(this);
        }

        protected override Type LinkType => typeof(IClimate);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IClimateGetter rhs) return false;
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IClimateGetter? obj)
        {
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClimateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClimateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Climate CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Climate();
            ((ClimateSetterCommon)((IClimateGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Climate item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ClimateSetterCommon)((IClimateGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Climate GetNew()
        {
            return new Climate();
        }

    }
    #endregion

    #region Interface
    public partial interface IClimate :
        IClimateGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IClimateInternal>,
        IModeled,
        IOblivionMajorRecordInternal
    {
        new ExtendedList<WeatherType>? Weathers { get; set; }
        new String? SunTexture { get; set; }
        new String? SunGlareTexture { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new ClimateData? Data { get; set; }
    }

    public partial interface IClimateInternal :
        IOblivionMajorRecordInternal,
        IClimate,
        IClimateGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.CLMT)]
    public partial interface IClimateGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IClimateGetter>,
        IMapsToGetter<IClimateGetter>,
        IModeledGetter
    {
        static new ILoquiRegistration StaticRegistration => Climate_Registration.Instance;
        IReadOnlyList<IWeatherTypeGetter>? Weathers { get; }
        String? SunTexture { get; }
        String? SunGlareTexture { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IClimateDataGetter? Data { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClimateMixIn
    {
        public static void Clear(this IClimateInternal item)
        {
            ((ClimateSetterCommon)((IClimateGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Climate.Mask<bool> GetEqualsMask(
            this IClimateGetter item,
            IClimateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IClimateGetter item,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IClimateGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IClimateGetter item,
            IClimateGetter rhs,
            Climate.TranslationMask? equalsMask = null)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IClimateInternal lhs,
            IClimateGetter rhs,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClimateSetterTranslationCommon)((IClimateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Climate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClimateInternal lhs,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClimateSetterTranslationCommon)((IClimateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Climate Duplicate(
            this IClimateGetter item,
            FormKey formKey,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Climate Duplicate(
            this IClimateGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IClimateInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ClimateSetterCommon)((IClimateGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum Climate_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Weathers = 5,
        SunTexture = 6,
        SunGlareTexture = 7,
        Model = 8,
        Data = 9,
    }
    #endregion

    #region Registration
    internal partial class Climate_Registration : ILoquiRegistration
    {
        public static readonly Climate_Registration Instance = new Climate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(Climate.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Climate.ErrorMask);

        public static readonly Type ClassType = typeof(Climate);

        public static readonly Type GetterType = typeof(IClimateGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClimate);

        public static readonly Type? InternalSetterType = typeof(IClimateInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Climate";

        public const string Name = "Climate";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CLMT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CLMT);
            var all = RecordCollection.Factory(
                RecordTypes.CLMT,
                RecordTypes.WLST,
                RecordTypes.FNAM,
                RecordTypes.GNAM,
                RecordTypes.MODL,
                RecordTypes.TNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ClimateBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ClimateSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly ClimateSetterCommon Instance = new ClimateSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClimateInternal item)
        {
            ClearPartial();
            item.Weathers = null;
            item.SunTexture = default;
            item.SunGlareTexture = default;
            item.Model = null;
            item.Data = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IClimateInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClimateInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IClimate obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Weathers?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IClimateInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IClimateInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ClimateBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ClimateBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Climate)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Climate)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ClimateCommon : OblivionMajorRecordCommon
    {
        public new static readonly ClimateCommon Instance = new ClimateCommon();

        public Climate.Mask<bool> GetEqualsMask(
            IClimateGetter item,
            IClimateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Climate.Mask<bool>(false);
            ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClimateGetter item,
            IClimateGetter rhs,
            Climate.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Weathers = item.Weathers.CollectionEqualsHelper(
                rhs.Weathers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SunTexture = string.Equals(item.SunTexture, rhs.SunTexture);
            ret.SunGlareTexture = string.Equals(item.SunGlareTexture, rhs.SunGlareTexture);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IClimateGetter item,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IClimateGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Climate =>");
            }
            else
            {
                sb.AppendLine($"{name} (Climate) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IClimateGetter item,
            StructuredStringBuilder sb,
            Climate.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Weathers?.Overall ?? true)
                && item.Weathers is {} WeathersItem)
            {
                sb.AppendLine("Weathers =>");
                using (sb.Brace())
                {
                    foreach (var subItem in WeathersItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.SunTexture ?? true)
                && item.SunTexture is {} SunTextureItem)
            {
                sb.AppendItem(SunTextureItem, "SunTexture");
            }
            if ((printMask?.SunGlareTexture ?? true)
                && item.SunGlareTexture is {} SunGlareTextureItem)
            {
                sb.AppendItem(SunGlareTextureItem, "SunGlareTexture");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
        }
        
        public static Climate_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Climate_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClimateGetter? lhs,
            IClimateGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.Weathers) ?? true))
            {
                if (!lhs.Weathers.SequenceEqualNullable(rhs.Weathers, (l, r) => ((WeatherTypeCommon)((IWeatherTypeGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Climate_FieldIndex.Weathers)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.SunTexture) ?? true))
            {
                if (!string.Equals(lhs.SunTexture, rhs.SunTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.SunGlareTexture) ?? true))
            {
                if (!string.Equals(lhs.SunGlareTexture, rhs.SunGlareTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Climate_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((ClimateDataCommon)((IClimateDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)Climate_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IClimateGetter?)lhs,
                rhs: rhs as IClimateGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IClimateGetter?)lhs,
                rhs: rhs as IClimateGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IClimateGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Weathers);
            if (item.SunTexture is {} SunTextureitem)
            {
                hash.Add(SunTextureitem);
            }
            if (item.SunGlareTexture is {} SunGlareTextureitem)
            {
                hash.Add(SunGlareTextureitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IClimateGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClimateGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Climate.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IClimateGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Weathers is {} WeathersItem)
            {
                foreach (var item in WeathersItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Climate Duplicate(
            IClimateGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Climate(formKey, default(OblivionRelease));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IClimateGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IClimateGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ClimateSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly ClimateSetterTranslationCommon Instance = new ClimateSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IClimateInternal item,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IClimate item,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Weathers) ?? true))
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Weathers);
                try
                {
                    if ((rhs.Weathers != null))
                    {
                        item.Weathers = 
                            rhs.Weathers
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<WeatherType>();
                    }
                    else
                    {
                        item.Weathers = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunTexture) ?? true))
            {
                item.SunTexture = rhs.SunTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunGlareTexture) ?? true))
            {
                item.SunGlareTexture = rhs.SunGlareTexture;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Climate_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Climate_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IClimate item,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimateInternal)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimate)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimateInternal)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimate)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Climate DeepCopy(
            IClimateGetter item,
            Climate.TranslationMask? copyMask = null)
        {
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ((ClimateSetterTranslationCommon)((IClimateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Climate DeepCopy(
            IClimateGetter item,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ((ClimateSetterTranslationCommon)((IClimateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Climate.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Climate DeepCopy(
            IClimateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ((ClimateSetterTranslationCommon)((IClimateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Climate
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Climate_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Climate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClimateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClimateSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClimateSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class ClimateBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ClimateBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IClimateGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IWeatherTypeGetter>.Instance.Write(
                writer: writer,
                items: item.Weathers,
                recordType: translationParams.ConvertToCustom(RecordTypes.WLST),
                transl: (MutagenWriter subWriter, IWeatherTypeGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((WeatherTypeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SunTexture,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SunGlareTexture,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Data is {} DataItem)
            {
                ((ClimateDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            IClimateGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.CLMT,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IClimateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IClimateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IClimateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ClimateBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly ClimateBinaryCreateTranslation Instance = new ClimateBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CLMT;
        public static ParseResult FillBinaryRecordTypes(
            IClimateInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.WLST:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Weathers = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<WeatherType>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: WeatherType.TryCreateFromBinary)
                        .CastExtendedList<WeatherType>();
                    return (int)Climate_FieldIndex.Weathers;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SunTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Climate_FieldIndex.SunTexture;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SunGlareTexture = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Climate_FieldIndex.SunGlareTexture;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Climate_FieldIndex.Model;
                }
                case RecordTypeInts.TNAM:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.ClimateData.CreateFromBinary(frame: frame);
                    return (int)Climate_FieldIndex.Data;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ClimateBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class ClimateBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IClimateGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Climate_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Climate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClimateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClimateSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ClimateCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClimateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClimateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IClimate);


        public IReadOnlyList<IWeatherTypeGetter>? Weathers { get; private set; }
        #region SunTexture
        private int? _SunTextureLocation;
        public String? SunTexture => _SunTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SunTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region SunGlareTexture
        private int? _SunGlareTextureLocation;
        public String? SunGlareTexture => _SunGlareTextureLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SunGlareTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Data
        private RangeInt32? _DataLocation;
        public IClimateDataGetter? Data => _DataLocation.HasValue ? ClimateDataBinaryOverlay.ClimateDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ClimateBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IClimateGetter ClimateFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ClimateBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IClimateGetter ClimateFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ClimateFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.WLST:
                {
                    this.Weathers = BinaryOverlayList.FactoryByStartIndexWithTrigger<IWeatherTypeGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 8,
                        getter: (s, p) => WeatherTypeBinaryOverlay.WeatherTypeFactory(s, p));
                    return (int)Climate_FieldIndex.Weathers;
                }
                case RecordTypeInts.FNAM:
                {
                    _SunTextureLocation = (stream.Position - offset);
                    return (int)Climate_FieldIndex.SunTexture;
                }
                case RecordTypeInts.GNAM:
                {
                    _SunGlareTextureLocation = (stream.Position - offset);
                    return (int)Climate_FieldIndex.SunGlareTexture;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Climate_FieldIndex.Model;
                }
                case RecordTypeInts.TNAM:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Climate_FieldIndex.Data;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ClimateMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Climate>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IClimateGetter rhs) return false;
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IClimateGetter? obj)
        {
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

