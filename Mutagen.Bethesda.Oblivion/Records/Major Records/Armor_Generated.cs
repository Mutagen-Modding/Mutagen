/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Armor :
        OblivionMajorRecord,
        IArmorInternal,
        IEquatable<IArmorGetter>,
        ILoquiObjectSetter<Armor>
    {
        #region Ctor
        protected Armor()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IArmorGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Script
        private readonly IFormLinkNullable<IScriptGetter> _Script = new FormLinkNullable<IScriptGetter>();
        public IFormLinkNullable<IScriptGetter> Script
        {
            get => _Script;
            set => _Script.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> IArmorGetter.Script => this.Script;
        #endregion
        #region Enchantment
        private readonly IFormLinkNullable<IEnchantmentGetter> _Enchantment = new FormLinkNullable<IEnchantmentGetter>();
        public IFormLinkNullable<IEnchantmentGetter> Enchantment
        {
            get => _Enchantment;
            set => _Enchantment.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEnchantmentGetter> IArmorGetter.Enchantment => this.Enchantment;
        #endregion
        #region EnchantmentPoints
        public UInt16? EnchantmentPoints { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IArmorGetter.EnchantmentPoints => this.EnchantmentPoints;
        #endregion
        #region ClothingFlags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ClothingFlags? _ClothingFlags;
        public ClothingFlags? ClothingFlags
        {
            get => _ClothingFlags;
            set => _ClothingFlags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IClothingFlagsGetter? IArmorGetter.ClothingFlags => this.ClothingFlags;
        #endregion
        #region MaleBipedModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _MaleBipedModel;
        public Model? MaleBipedModel
        {
            get => _MaleBipedModel;
            set => _MaleBipedModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IArmorGetter.MaleBipedModel => this.MaleBipedModel;
        #endregion
        #region MaleWorldModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _MaleWorldModel;
        public Model? MaleWorldModel
        {
            get => _MaleWorldModel;
            set => _MaleWorldModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IArmorGetter.MaleWorldModel => this.MaleWorldModel;
        #endregion
        #region MaleIcon
        public String? MaleIcon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IArmorGetter.MaleIcon => this.MaleIcon;
        #endregion
        #region FemaleBipedModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _FemaleBipedModel;
        public Model? FemaleBipedModel
        {
            get => _FemaleBipedModel;
            set => _FemaleBipedModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IArmorGetter.FemaleBipedModel => this.FemaleBipedModel;
        #endregion
        #region FemaleWorldModel
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _FemaleWorldModel;
        public Model? FemaleWorldModel
        {
            get => _FemaleWorldModel;
            set => _FemaleWorldModel = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IArmorGetter.FemaleWorldModel => this.FemaleWorldModel;
        #endregion
        #region FemaleIcon
        public String? FemaleIcon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IArmorGetter.FemaleIcon => this.FemaleIcon;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ArmorData? _Data;
        public ArmorData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IArmorDataGetter? IArmorGetter.Data => this.Data;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ArmorMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Script = initialValue;
                this.Enchantment = initialValue;
                this.EnchantmentPoints = initialValue;
                this.ClothingFlags = new MaskItem<TItem, ClothingFlags.Mask<TItem>?>(initialValue, new ClothingFlags.Mask<TItem>(initialValue));
                this.MaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.MaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.MaleIcon = initialValue;
                this.FemaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.FemaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.FemaleIcon = initialValue;
                this.Data = new MaskItem<TItem, ArmorData.Mask<TItem>?>(initialValue, new ArmorData.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Script,
                TItem Enchantment,
                TItem EnchantmentPoints,
                TItem ClothingFlags,
                TItem MaleBipedModel,
                TItem MaleWorldModel,
                TItem MaleIcon,
                TItem FemaleBipedModel,
                TItem FemaleWorldModel,
                TItem FemaleIcon,
                TItem Data)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Script = Script;
                this.Enchantment = Enchantment;
                this.EnchantmentPoints = EnchantmentPoints;
                this.ClothingFlags = new MaskItem<TItem, ClothingFlags.Mask<TItem>?>(ClothingFlags, new ClothingFlags.Mask<TItem>(ClothingFlags));
                this.MaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(MaleBipedModel, new Model.Mask<TItem>(MaleBipedModel));
                this.MaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(MaleWorldModel, new Model.Mask<TItem>(MaleWorldModel));
                this.MaleIcon = MaleIcon;
                this.FemaleBipedModel = new MaskItem<TItem, Model.Mask<TItem>?>(FemaleBipedModel, new Model.Mask<TItem>(FemaleBipedModel));
                this.FemaleWorldModel = new MaskItem<TItem, Model.Mask<TItem>?>(FemaleWorldModel, new Model.Mask<TItem>(FemaleWorldModel));
                this.FemaleIcon = FemaleIcon;
                this.Data = new MaskItem<TItem, ArmorData.Mask<TItem>?>(Data, new ArmorData.Mask<TItem>(Data));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Script;
            public TItem Enchantment;
            public TItem EnchantmentPoints;
            public MaskItem<TItem, ClothingFlags.Mask<TItem>?>? ClothingFlags { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? MaleBipedModel { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? MaleWorldModel { get; set; }
            public TItem MaleIcon;
            public MaskItem<TItem, Model.Mask<TItem>?>? FemaleBipedModel { get; set; }
            public MaskItem<TItem, Model.Mask<TItem>?>? FemaleWorldModel { get; set; }
            public TItem FemaleIcon;
            public MaskItem<TItem, ArmorData.Mask<TItem>?>? Data { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Enchantment, rhs.Enchantment)) return false;
                if (!object.Equals(this.EnchantmentPoints, rhs.EnchantmentPoints)) return false;
                if (!object.Equals(this.ClothingFlags, rhs.ClothingFlags)) return false;
                if (!object.Equals(this.MaleBipedModel, rhs.MaleBipedModel)) return false;
                if (!object.Equals(this.MaleWorldModel, rhs.MaleWorldModel)) return false;
                if (!object.Equals(this.MaleIcon, rhs.MaleIcon)) return false;
                if (!object.Equals(this.FemaleBipedModel, rhs.FemaleBipedModel)) return false;
                if (!object.Equals(this.FemaleWorldModel, rhs.FemaleWorldModel)) return false;
                if (!object.Equals(this.FemaleIcon, rhs.FemaleIcon)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Script);
                hash.Add(this.Enchantment);
                hash.Add(this.EnchantmentPoints);
                hash.Add(this.ClothingFlags);
                hash.Add(this.MaleBipedModel);
                hash.Add(this.MaleWorldModel);
                hash.Add(this.MaleIcon);
                hash.Add(this.FemaleBipedModel);
                hash.Add(this.FemaleWorldModel);
                hash.Add(this.FemaleIcon);
                hash.Add(this.Data);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Script)) return false;
                if (!eval(this.Enchantment)) return false;
                if (!eval(this.EnchantmentPoints)) return false;
                if (ClothingFlags != null)
                {
                    if (!eval(this.ClothingFlags.Overall)) return false;
                    if (this.ClothingFlags.Specific != null && !this.ClothingFlags.Specific.All(eval)) return false;
                }
                if (MaleBipedModel != null)
                {
                    if (!eval(this.MaleBipedModel.Overall)) return false;
                    if (this.MaleBipedModel.Specific != null && !this.MaleBipedModel.Specific.All(eval)) return false;
                }
                if (MaleWorldModel != null)
                {
                    if (!eval(this.MaleWorldModel.Overall)) return false;
                    if (this.MaleWorldModel.Specific != null && !this.MaleWorldModel.Specific.All(eval)) return false;
                }
                if (!eval(this.MaleIcon)) return false;
                if (FemaleBipedModel != null)
                {
                    if (!eval(this.FemaleBipedModel.Overall)) return false;
                    if (this.FemaleBipedModel.Specific != null && !this.FemaleBipedModel.Specific.All(eval)) return false;
                }
                if (FemaleWorldModel != null)
                {
                    if (!eval(this.FemaleWorldModel.Overall)) return false;
                    if (this.FemaleWorldModel.Specific != null && !this.FemaleWorldModel.Specific.All(eval)) return false;
                }
                if (!eval(this.FemaleIcon)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Script)) return true;
                if (eval(this.Enchantment)) return true;
                if (eval(this.EnchantmentPoints)) return true;
                if (ClothingFlags != null)
                {
                    if (eval(this.ClothingFlags.Overall)) return true;
                    if (this.ClothingFlags.Specific != null && this.ClothingFlags.Specific.Any(eval)) return true;
                }
                if (MaleBipedModel != null)
                {
                    if (eval(this.MaleBipedModel.Overall)) return true;
                    if (this.MaleBipedModel.Specific != null && this.MaleBipedModel.Specific.Any(eval)) return true;
                }
                if (MaleWorldModel != null)
                {
                    if (eval(this.MaleWorldModel.Overall)) return true;
                    if (this.MaleWorldModel.Specific != null && this.MaleWorldModel.Specific.Any(eval)) return true;
                }
                if (eval(this.MaleIcon)) return true;
                if (FemaleBipedModel != null)
                {
                    if (eval(this.FemaleBipedModel.Overall)) return true;
                    if (this.FemaleBipedModel.Specific != null && this.FemaleBipedModel.Specific.Any(eval)) return true;
                }
                if (FemaleWorldModel != null)
                {
                    if (eval(this.FemaleWorldModel.Overall)) return true;
                    if (this.FemaleWorldModel.Specific != null && this.FemaleWorldModel.Specific.Any(eval)) return true;
                }
                if (eval(this.FemaleIcon)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Armor.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Script = eval(this.Script);
                obj.Enchantment = eval(this.Enchantment);
                obj.EnchantmentPoints = eval(this.EnchantmentPoints);
                obj.ClothingFlags = this.ClothingFlags == null ? null : new MaskItem<R, ClothingFlags.Mask<R>?>(eval(this.ClothingFlags.Overall), this.ClothingFlags.Specific?.Translate(eval));
                obj.MaleBipedModel = this.MaleBipedModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.MaleBipedModel.Overall), this.MaleBipedModel.Specific?.Translate(eval));
                obj.MaleWorldModel = this.MaleWorldModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.MaleWorldModel.Overall), this.MaleWorldModel.Specific?.Translate(eval));
                obj.MaleIcon = eval(this.MaleIcon);
                obj.FemaleBipedModel = this.FemaleBipedModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.FemaleBipedModel.Overall), this.FemaleBipedModel.Specific?.Translate(eval));
                obj.FemaleWorldModel = this.FemaleWorldModel == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.FemaleWorldModel.Overall), this.FemaleWorldModel.Specific?.Translate(eval));
                obj.FemaleIcon = eval(this.FemaleIcon);
                obj.Data = this.Data == null ? null : new MaskItem<R, ArmorData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Armor.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Armor.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Armor.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Script ?? true)
                    {
                        sb.AppendItem(Script, "Script");
                    }
                    if (printMask?.Enchantment ?? true)
                    {
                        sb.AppendItem(Enchantment, "Enchantment");
                    }
                    if (printMask?.EnchantmentPoints ?? true)
                    {
                        sb.AppendItem(EnchantmentPoints, "EnchantmentPoints");
                    }
                    if (printMask?.ClothingFlags?.Overall ?? true)
                    {
                        ClothingFlags?.Print(sb);
                    }
                    if (printMask?.MaleBipedModel?.Overall ?? true)
                    {
                        MaleBipedModel?.Print(sb);
                    }
                    if (printMask?.MaleWorldModel?.Overall ?? true)
                    {
                        MaleWorldModel?.Print(sb);
                    }
                    if (printMask?.MaleIcon ?? true)
                    {
                        sb.AppendItem(MaleIcon, "MaleIcon");
                    }
                    if (printMask?.FemaleBipedModel?.Overall ?? true)
                    {
                        FemaleBipedModel?.Print(sb);
                    }
                    if (printMask?.FemaleWorldModel?.Overall ?? true)
                    {
                        FemaleWorldModel?.Print(sb);
                    }
                    if (printMask?.FemaleIcon ?? true)
                    {
                        sb.AppendItem(FemaleIcon, "FemaleIcon");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Script;
            public Exception? Enchantment;
            public Exception? EnchantmentPoints;
            public MaskItem<Exception?, ClothingFlags.ErrorMask?>? ClothingFlags;
            public MaskItem<Exception?, Model.ErrorMask?>? MaleBipedModel;
            public MaskItem<Exception?, Model.ErrorMask?>? MaleWorldModel;
            public Exception? MaleIcon;
            public MaskItem<Exception?, Model.ErrorMask?>? FemaleBipedModel;
            public MaskItem<Exception?, Model.ErrorMask?>? FemaleWorldModel;
            public Exception? FemaleIcon;
            public MaskItem<Exception?, ArmorData.ErrorMask?>? Data;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Armor_FieldIndex enu = (Armor_FieldIndex)index;
                switch (enu)
                {
                    case Armor_FieldIndex.Name:
                        return Name;
                    case Armor_FieldIndex.Script:
                        return Script;
                    case Armor_FieldIndex.Enchantment:
                        return Enchantment;
                    case Armor_FieldIndex.EnchantmentPoints:
                        return EnchantmentPoints;
                    case Armor_FieldIndex.ClothingFlags:
                        return ClothingFlags;
                    case Armor_FieldIndex.MaleBipedModel:
                        return MaleBipedModel;
                    case Armor_FieldIndex.MaleWorldModel:
                        return MaleWorldModel;
                    case Armor_FieldIndex.MaleIcon:
                        return MaleIcon;
                    case Armor_FieldIndex.FemaleBipedModel:
                        return FemaleBipedModel;
                    case Armor_FieldIndex.FemaleWorldModel:
                        return FemaleWorldModel;
                    case Armor_FieldIndex.FemaleIcon:
                        return FemaleIcon;
                    case Armor_FieldIndex.Data:
                        return Data;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Armor_FieldIndex enu = (Armor_FieldIndex)index;
                switch (enu)
                {
                    case Armor_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Armor_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case Armor_FieldIndex.Enchantment:
                        this.Enchantment = ex;
                        break;
                    case Armor_FieldIndex.EnchantmentPoints:
                        this.EnchantmentPoints = ex;
                        break;
                    case Armor_FieldIndex.ClothingFlags:
                        this.ClothingFlags = new MaskItem<Exception?, ClothingFlags.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.MaleBipedModel:
                        this.MaleBipedModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.MaleWorldModel:
                        this.MaleWorldModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.MaleIcon:
                        this.MaleIcon = ex;
                        break;
                    case Armor_FieldIndex.FemaleBipedModel:
                        this.FemaleBipedModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.FemaleWorldModel:
                        this.FemaleWorldModel = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.FemaleIcon:
                        this.FemaleIcon = ex;
                        break;
                    case Armor_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, ArmorData.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Armor_FieldIndex enu = (Armor_FieldIndex)index;
                switch (enu)
                {
                    case Armor_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Enchantment:
                        this.Enchantment = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.EnchantmentPoints:
                        this.EnchantmentPoints = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.ClothingFlags:
                        this.ClothingFlags = (MaskItem<Exception?, ClothingFlags.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.MaleBipedModel:
                        this.MaleBipedModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.MaleWorldModel:
                        this.MaleWorldModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.MaleIcon:
                        this.MaleIcon = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.FemaleBipedModel:
                        this.FemaleBipedModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.FemaleWorldModel:
                        this.FemaleWorldModel = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.FemaleIcon:
                        this.FemaleIcon = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, ArmorData.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Script != null) return true;
                if (Enchantment != null) return true;
                if (EnchantmentPoints != null) return true;
                if (ClothingFlags != null) return true;
                if (MaleBipedModel != null) return true;
                if (MaleWorldModel != null) return true;
                if (MaleIcon != null) return true;
                if (FemaleBipedModel != null) return true;
                if (FemaleWorldModel != null) return true;
                if (FemaleIcon != null) return true;
                if (Data != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Script, "Script");
                }
                {
                    sb.AppendItem(Enchantment, "Enchantment");
                }
                {
                    sb.AppendItem(EnchantmentPoints, "EnchantmentPoints");
                }
                ClothingFlags?.Print(sb);
                MaleBipedModel?.Print(sb);
                MaleWorldModel?.Print(sb);
                {
                    sb.AppendItem(MaleIcon, "MaleIcon");
                }
                FemaleBipedModel?.Print(sb);
                FemaleWorldModel?.Print(sb);
                {
                    sb.AppendItem(FemaleIcon, "FemaleIcon");
                }
                Data?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Enchantment = this.Enchantment.Combine(rhs.Enchantment);
                ret.EnchantmentPoints = this.EnchantmentPoints.Combine(rhs.EnchantmentPoints);
                ret.ClothingFlags = this.ClothingFlags.Combine(rhs.ClothingFlags, (l, r) => l.Combine(r));
                ret.MaleBipedModel = this.MaleBipedModel.Combine(rhs.MaleBipedModel, (l, r) => l.Combine(r));
                ret.MaleWorldModel = this.MaleWorldModel.Combine(rhs.MaleWorldModel, (l, r) => l.Combine(r));
                ret.MaleIcon = this.MaleIcon.Combine(rhs.MaleIcon);
                ret.FemaleBipedModel = this.FemaleBipedModel.Combine(rhs.FemaleBipedModel, (l, r) => l.Combine(r));
                ret.FemaleWorldModel = this.FemaleWorldModel.Combine(rhs.FemaleWorldModel, (l, r) => l.Combine(r));
                ret.FemaleIcon = this.FemaleIcon.Combine(rhs.FemaleIcon);
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Script;
            public bool Enchantment;
            public bool EnchantmentPoints;
            public ClothingFlags.TranslationMask? ClothingFlags;
            public Model.TranslationMask? MaleBipedModel;
            public Model.TranslationMask? MaleWorldModel;
            public bool MaleIcon;
            public Model.TranslationMask? FemaleBipedModel;
            public Model.TranslationMask? FemaleWorldModel;
            public bool FemaleIcon;
            public ArmorData.TranslationMask? Data;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Script = defaultOn;
                this.Enchantment = defaultOn;
                this.EnchantmentPoints = defaultOn;
                this.MaleIcon = defaultOn;
                this.FemaleIcon = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Script, null));
                ret.Add((Enchantment, null));
                ret.Add((EnchantmentPoints, null));
                ret.Add((ClothingFlags != null ? ClothingFlags.OnOverall : DefaultOn, ClothingFlags?.GetCrystal()));
                ret.Add((MaleBipedModel != null ? MaleBipedModel.OnOverall : DefaultOn, MaleBipedModel?.GetCrystal()));
                ret.Add((MaleWorldModel != null ? MaleWorldModel.OnOverall : DefaultOn, MaleWorldModel?.GetCrystal()));
                ret.Add((MaleIcon, null));
                ret.Add((FemaleBipedModel != null ? FemaleBipedModel.OnOverall : DefaultOn, FemaleBipedModel?.GetCrystal()));
                ret.Add((FemaleWorldModel != null ? FemaleWorldModel.OnOverall : DefaultOn, FemaleWorldModel?.GetCrystal()));
                ret.Add((FemaleIcon, null));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Armor_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ArmorCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ArmorSetterCommon.Instance.RemapLinks(this, mapping);
        public Armor(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Armor(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Armor(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Armor(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Armor>.ToString(this);
        }

        protected override Type LinkType => typeof(IArmor);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IArmorGetter rhs) return false;
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IArmorGetter? obj)
        {
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ArmorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Armor CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Armor();
            ((ArmorSetterCommon)((IArmorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Armor item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ArmorSetterCommon)((IArmorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Armor GetNew()
        {
            return new Armor();
        }

    }
    #endregion

    #region Interface
    public partial interface IArmor :
        IArmorGetter,
        IFormLinkContainer,
        IItem,
        ILoquiObjectSetter<IArmorInternal>,
        INamed,
        INamedRequired,
        IOblivionMajorRecordInternal
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new IFormLinkNullable<IScriptGetter> Script { get; set; }
        new IFormLinkNullable<IEnchantmentGetter> Enchantment { get; set; }
        new UInt16? EnchantmentPoints { get; set; }
        new ClothingFlags? ClothingFlags { get; set; }
        new Model? MaleBipedModel { get; set; }
        new Model? MaleWorldModel { get; set; }
        new String? MaleIcon { get; set; }
        new Model? FemaleBipedModel { get; set; }
        new Model? FemaleWorldModel { get; set; }
        new String? FemaleIcon { get; set; }
        new ArmorData? Data { get; set; }
    }

    public partial interface IArmorInternal :
        IOblivionMajorRecordInternal,
        IArmor,
        IArmorGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.ARMO)]
    public partial interface IArmorGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IItemGetter,
        ILoquiObject<IArmorGetter>,
        IMapsToGetter<IArmorGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Armor_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        IFormLinkNullableGetter<IEnchantmentGetter> Enchantment { get; }
        UInt16? EnchantmentPoints { get; }
        IClothingFlagsGetter? ClothingFlags { get; }
        IModelGetter? MaleBipedModel { get; }
        IModelGetter? MaleWorldModel { get; }
        String? MaleIcon { get; }
        IModelGetter? FemaleBipedModel { get; }
        IModelGetter? FemaleWorldModel { get; }
        String? FemaleIcon { get; }
        IArmorDataGetter? Data { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ArmorMixIn
    {
        public static void Clear(this IArmorInternal item)
        {
            ((ArmorSetterCommon)((IArmorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Armor.Mask<bool> GetEqualsMask(
            this IArmorGetter item,
            IArmorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IArmorGetter item,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IArmorGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IArmorGetter item,
            IArmorGetter rhs,
            Armor.TranslationMask? equalsMask = null)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IArmorInternal lhs,
            IArmorGetter rhs,
            out Armor.ErrorMask errorMask,
            Armor.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ArmorSetterTranslationCommon)((IArmorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Armor.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IArmorInternal lhs,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ArmorSetterTranslationCommon)((IArmorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            Armor.TranslationMask? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            out Armor.ErrorMask errorMask,
            Armor.TranslationMask? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Armor Duplicate(
            this IArmorGetter item,
            FormKey formKey,
            Armor.TranslationMask? copyMask = null)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Armor Duplicate(
            this IArmorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IArmorInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ArmorSetterCommon)((IArmorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum Armor_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Script = 6,
        Enchantment = 7,
        EnchantmentPoints = 8,
        ClothingFlags = 9,
        MaleBipedModel = 10,
        MaleWorldModel = 11,
        MaleIcon = 12,
        FemaleBipedModel = 13,
        FemaleWorldModel = 14,
        FemaleIcon = 15,
        Data = 16,
    }
    #endregion

    #region Registration
    internal partial class Armor_Registration : ILoquiRegistration
    {
        public static readonly Armor_Registration Instance = new Armor_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(Armor.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Armor.ErrorMask);

        public static readonly Type ClassType = typeof(Armor);

        public static readonly Type GetterType = typeof(IArmorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IArmor);

        public static readonly Type? InternalSetterType = typeof(IArmorInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Armor";

        public const string Name = "Armor";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ARMO;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ARMO);
            var all = RecordCollection.Factory(
                RecordTypes.ARMO,
                RecordTypes.FULL,
                RecordTypes.SCRI,
                RecordTypes.ENAM,
                RecordTypes.ANAM,
                RecordTypes.BMDT,
                RecordTypes.MODL,
                RecordTypes.MOD2,
                RecordTypes.MO2B,
                RecordTypes.MO2T,
                RecordTypes.ICON,
                RecordTypes.MOD3,
                RecordTypes.MO3B,
                RecordTypes.MO3T,
                RecordTypes.MOD4,
                RecordTypes.MO4B,
                RecordTypes.MO4T,
                RecordTypes.ICO2,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static RecordTypeConverter MaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD2),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODB,
                RecordTypes.MO2B),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO2T));
        public static RecordTypeConverter FemaleBipedModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD3),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODB,
                RecordTypes.MO3B),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO3T));
        public static RecordTypeConverter FemaleWorldModelConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD4),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODB,
                RecordTypes.MO4B),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO4T));
        public static readonly Type BinaryWriteTranslation = typeof(ArmorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ArmorSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly ArmorSetterCommon Instance = new ArmorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IArmorInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Script.Clear();
            item.Enchantment.Clear();
            item.EnchantmentPoints = default;
            item.ClothingFlags = null;
            item.MaleBipedModel = null;
            item.MaleWorldModel = null;
            item.MaleIcon = default;
            item.FemaleBipedModel = null;
            item.FemaleWorldModel = null;
            item.FemaleIcon = default;
            item.Data = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IArmor obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Script.Relink(mapping);
            obj.Enchantment.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IArmorInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IArmorInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ArmorBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ArmorBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Armor)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Armor)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ArmorCommon : OblivionMajorRecordCommon
    {
        public new static readonly ArmorCommon Instance = new ArmorCommon();

        public Armor.Mask<bool> GetEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Armor.Mask<bool>(false);
            ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            Armor.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Script = item.Script.Equals(rhs.Script);
            ret.Enchantment = item.Enchantment.Equals(rhs.Enchantment);
            ret.EnchantmentPoints = item.EnchantmentPoints == rhs.EnchantmentPoints;
            ret.ClothingFlags = EqualsMaskHelper.EqualsHelper(
                item.ClothingFlags,
                rhs.ClothingFlags,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaleBipedModel = EqualsMaskHelper.EqualsHelper(
                item.MaleBipedModel,
                rhs.MaleBipedModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaleWorldModel = EqualsMaskHelper.EqualsHelper(
                item.MaleWorldModel,
                rhs.MaleWorldModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MaleIcon = string.Equals(item.MaleIcon, rhs.MaleIcon);
            ret.FemaleBipedModel = EqualsMaskHelper.EqualsHelper(
                item.FemaleBipedModel,
                rhs.FemaleBipedModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FemaleWorldModel = EqualsMaskHelper.EqualsHelper(
                item.FemaleWorldModel,
                rhs.FemaleWorldModel,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FemaleIcon = string.Equals(item.FemaleIcon, rhs.FemaleIcon);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IArmorGetter item,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IArmorGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Armor =>");
            }
            else
            {
                sb.AppendLine($"{name} (Armor) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IArmorGetter item,
            StructuredStringBuilder sb,
            Armor.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Script ?? true)
            {
                sb.AppendItem(item.Script.FormKeyNullable, "Script");
            }
            if (printMask?.Enchantment ?? true)
            {
                sb.AppendItem(item.Enchantment.FormKeyNullable, "Enchantment");
            }
            if ((printMask?.EnchantmentPoints ?? true)
                && item.EnchantmentPoints is {} EnchantmentPointsItem)
            {
                sb.AppendItem(EnchantmentPointsItem, "EnchantmentPoints");
            }
            if ((printMask?.ClothingFlags?.Overall ?? true)
                && item.ClothingFlags is {} ClothingFlagsItem)
            {
                ClothingFlagsItem?.Print(sb, "ClothingFlags");
            }
            if ((printMask?.MaleBipedModel?.Overall ?? true)
                && item.MaleBipedModel is {} MaleBipedModelItem)
            {
                MaleBipedModelItem?.Print(sb, "MaleBipedModel");
            }
            if ((printMask?.MaleWorldModel?.Overall ?? true)
                && item.MaleWorldModel is {} MaleWorldModelItem)
            {
                MaleWorldModelItem?.Print(sb, "MaleWorldModel");
            }
            if ((printMask?.MaleIcon ?? true)
                && item.MaleIcon is {} MaleIconItem)
            {
                sb.AppendItem(MaleIconItem, "MaleIcon");
            }
            if ((printMask?.FemaleBipedModel?.Overall ?? true)
                && item.FemaleBipedModel is {} FemaleBipedModelItem)
            {
                FemaleBipedModelItem?.Print(sb, "FemaleBipedModel");
            }
            if ((printMask?.FemaleWorldModel?.Overall ?? true)
                && item.FemaleWorldModel is {} FemaleWorldModelItem)
            {
                FemaleWorldModelItem?.Print(sb, "FemaleWorldModel");
            }
            if ((printMask?.FemaleIcon ?? true)
                && item.FemaleIcon is {} FemaleIconItem)
            {
                sb.AppendItem(FemaleIconItem, "FemaleIcon");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
        }
        
        public static Armor_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Armor_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IArmorGetter? lhs,
            IArmorGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Script) ?? true))
            {
                if (!lhs.Script.Equals(rhs.Script)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Enchantment) ?? true))
            {
                if (!lhs.Enchantment.Equals(rhs.Enchantment)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.EnchantmentPoints) ?? true))
            {
                if (lhs.EnchantmentPoints != rhs.EnchantmentPoints) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.ClothingFlags) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ClothingFlags, rhs.ClothingFlags, out var lhsClothingFlags, out var rhsClothingFlags, out var isClothingFlagsEqual))
                {
                    if (!((ClothingFlagsCommon)((IClothingFlagsGetter)lhsClothingFlags).CommonInstance()!).Equals(lhsClothingFlags, rhsClothingFlags, equalsMask?.GetSubCrystal((int)Armor_FieldIndex.ClothingFlags))) return false;
                }
                else if (!isClothingFlagsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.MaleBipedModel) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MaleBipedModel, rhs.MaleBipedModel, out var lhsMaleBipedModel, out var rhsMaleBipedModel, out var isMaleBipedModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsMaleBipedModel).CommonInstance()!).Equals(lhsMaleBipedModel, rhsMaleBipedModel, equalsMask?.GetSubCrystal((int)Armor_FieldIndex.MaleBipedModel))) return false;
                }
                else if (!isMaleBipedModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.MaleWorldModel) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MaleWorldModel, rhs.MaleWorldModel, out var lhsMaleWorldModel, out var rhsMaleWorldModel, out var isMaleWorldModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsMaleWorldModel).CommonInstance()!).Equals(lhsMaleWorldModel, rhsMaleWorldModel, equalsMask?.GetSubCrystal((int)Armor_FieldIndex.MaleWorldModel))) return false;
                }
                else if (!isMaleWorldModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.MaleIcon) ?? true))
            {
                if (!string.Equals(lhs.MaleIcon, rhs.MaleIcon)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.FemaleBipedModel) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FemaleBipedModel, rhs.FemaleBipedModel, out var lhsFemaleBipedModel, out var rhsFemaleBipedModel, out var isFemaleBipedModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsFemaleBipedModel).CommonInstance()!).Equals(lhsFemaleBipedModel, rhsFemaleBipedModel, equalsMask?.GetSubCrystal((int)Armor_FieldIndex.FemaleBipedModel))) return false;
                }
                else if (!isFemaleBipedModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.FemaleWorldModel) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FemaleWorldModel, rhs.FemaleWorldModel, out var lhsFemaleWorldModel, out var rhsFemaleWorldModel, out var isFemaleWorldModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsFemaleWorldModel).CommonInstance()!).Equals(lhsFemaleWorldModel, rhsFemaleWorldModel, equalsMask?.GetSubCrystal((int)Armor_FieldIndex.FemaleWorldModel))) return false;
                }
                else if (!isFemaleWorldModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.FemaleIcon) ?? true))
            {
                if (!string.Equals(lhs.FemaleIcon, rhs.FemaleIcon)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((ArmorDataCommon)((IArmorDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)Armor_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IArmorGetter?)lhs,
                rhs: rhs as IArmorGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IArmorGetter?)lhs,
                rhs: rhs as IArmorGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IArmorGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Script);
            hash.Add(item.Enchantment);
            if (item.EnchantmentPoints is {} EnchantmentPointsitem)
            {
                hash.Add(EnchantmentPointsitem);
            }
            if (item.ClothingFlags is {} ClothingFlagsitem)
            {
                hash.Add(ClothingFlagsitem);
            }
            if (item.MaleBipedModel is {} MaleBipedModelitem)
            {
                hash.Add(MaleBipedModelitem);
            }
            if (item.MaleWorldModel is {} MaleWorldModelitem)
            {
                hash.Add(MaleWorldModelitem);
            }
            if (item.MaleIcon is {} MaleIconitem)
            {
                hash.Add(MaleIconitem);
            }
            if (item.FemaleBipedModel is {} FemaleBipedModelitem)
            {
                hash.Add(FemaleBipedModelitem);
            }
            if (item.FemaleWorldModel is {} FemaleWorldModelitem)
            {
                hash.Add(FemaleWorldModelitem);
            }
            if (item.FemaleIcon is {} FemaleIconitem)
            {
                hash.Add(FemaleIconitem);
            }
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Armor.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IArmorGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Script, out var ScriptInfo))
            {
                yield return ScriptInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Enchantment, out var EnchantmentInfo))
            {
                yield return EnchantmentInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public Armor Duplicate(
            IArmorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Armor(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IArmorGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IArmorGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ArmorSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly ArmorSetterTranslationCommon Instance = new ArmorSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IArmorInternal item,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IArmor item,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Script) ?? true))
            {
                item.Script.SetTo(rhs.Script.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Enchantment) ?? true))
            {
                item.Enchantment.SetTo(rhs.Enchantment.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.EnchantmentPoints) ?? true))
            {
                item.EnchantmentPoints = rhs.EnchantmentPoints;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.ClothingFlags) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.ClothingFlags);
                try
                {
                    if(rhs.ClothingFlags is {} rhsClothingFlags)
                    {
                        item.ClothingFlags = rhsClothingFlags.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.ClothingFlags));
                    }
                    else
                    {
                        item.ClothingFlags = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.MaleBipedModel) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.MaleBipedModel);
                try
                {
                    if(rhs.MaleBipedModel is {} rhsMaleBipedModel)
                    {
                        item.MaleBipedModel = rhsMaleBipedModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.MaleBipedModel));
                    }
                    else
                    {
                        item.MaleBipedModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.MaleWorldModel) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.MaleWorldModel);
                try
                {
                    if(rhs.MaleWorldModel is {} rhsMaleWorldModel)
                    {
                        item.MaleWorldModel = rhsMaleWorldModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.MaleWorldModel));
                    }
                    else
                    {
                        item.MaleWorldModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.MaleIcon) ?? true))
            {
                item.MaleIcon = rhs.MaleIcon;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.FemaleBipedModel) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.FemaleBipedModel);
                try
                {
                    if(rhs.FemaleBipedModel is {} rhsFemaleBipedModel)
                    {
                        item.FemaleBipedModel = rhsFemaleBipedModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.FemaleBipedModel));
                    }
                    else
                    {
                        item.FemaleBipedModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.FemaleWorldModel) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.FemaleWorldModel);
                try
                {
                    if(rhs.FemaleWorldModel is {} rhsFemaleWorldModel)
                    {
                        item.FemaleWorldModel = rhsFemaleWorldModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.FemaleWorldModel));
                    }
                    else
                    {
                        item.FemaleWorldModel = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.FemaleIcon) ?? true))
            {
                item.FemaleIcon = rhs.FemaleIcon;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IArmor item,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorInternal)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmor)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorInternal)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmor)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Armor DeepCopy(
            IArmorGetter item,
            Armor.TranslationMask? copyMask = null)
        {
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ((ArmorSetterTranslationCommon)((IArmorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Armor DeepCopy(
            IArmorGetter item,
            out Armor.ErrorMask errorMask,
            Armor.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ((ArmorSetterTranslationCommon)((IArmorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Armor.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Armor DeepCopy(
            IArmorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ((ArmorSetterTranslationCommon)((IArmorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Armor
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Armor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ArmorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class ArmorBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ArmorBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IArmorGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: translationParams.ConvertToCustom(RecordTypes.SCRI));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Enchantment,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.EnchantmentPoints,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            if (item.ClothingFlags is {} ClothingFlagsItem)
            {
                ((ClothingFlagsBinaryWriteTranslation)((IBinaryItem)ClothingFlagsItem).BinaryWriteTranslator).Write(
                    item: ClothingFlagsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.MaleBipedModel is {} MaleBipedModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)MaleBipedModelItem).BinaryWriteTranslator).Write(
                    item: MaleBipedModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.MaleWorldModel is {} MaleWorldModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)MaleWorldModelItem).BinaryWriteTranslator).Write(
                    item: MaleWorldModelItem,
                    writer: writer,
                    translationParams: translationParams.With(Armor_Registration.MaleWorldModelConverter));
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MaleIcon,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            if (item.FemaleBipedModel is {} FemaleBipedModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)FemaleBipedModelItem).BinaryWriteTranslator).Write(
                    item: FemaleBipedModelItem,
                    writer: writer,
                    translationParams: translationParams.With(Armor_Registration.FemaleBipedModelConverter));
            }
            if (item.FemaleWorldModel is {} FemaleWorldModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)FemaleWorldModelItem).BinaryWriteTranslator).Write(
                    item: FemaleWorldModelItem,
                    writer: writer,
                    translationParams: translationParams.With(Armor_Registration.FemaleWorldModelConverter));
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FemaleIcon,
                header: translationParams.ConvertToCustom(RecordTypes.ICO2),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Data is {} DataItem)
            {
                ((ArmorDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            IArmorGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ARMO,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IArmorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IArmorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IArmorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ArmorBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly ArmorBinaryCreateTranslation Instance = new ArmorBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ARMO;
        public static ParseResult FillBinaryRecordTypes(
            IArmorInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Armor_FieldIndex.Name;
                }
                case RecordTypeInts.SCRI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Script.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Armor_FieldIndex.Script;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Enchantment.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Armor_FieldIndex.Enchantment;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnchantmentPoints = frame.ReadUInt16();
                    return (int)Armor_FieldIndex.EnchantmentPoints;
                }
                case RecordTypeInts.BMDT:
                {
                    item.ClothingFlags = Mutagen.Bethesda.Oblivion.ClothingFlags.CreateFromBinary(frame: frame);
                    return (int)Armor_FieldIndex.ClothingFlags;
                }
                case RecordTypeInts.MODL:
                {
                    item.MaleBipedModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Armor_FieldIndex.MaleBipedModel;
                }
                case RecordTypeInts.MOD2:
                {
                    item.MaleWorldModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(Armor_Registration.MaleWorldModelConverter).DoNotShortCircuit());
                    return (int)Armor_FieldIndex.MaleWorldModel;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaleIcon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Armor_FieldIndex.MaleIcon;
                }
                case RecordTypeInts.MOD3:
                {
                    item.FemaleBipedModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(Armor_Registration.FemaleBipedModelConverter).DoNotShortCircuit());
                    return (int)Armor_FieldIndex.FemaleBipedModel;
                }
                case RecordTypeInts.MOD4:
                {
                    item.FemaleWorldModel = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(Armor_Registration.FemaleWorldModelConverter).DoNotShortCircuit());
                    return (int)Armor_FieldIndex.FemaleWorldModel;
                }
                case RecordTypeInts.ICO2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FemaleIcon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Armor_FieldIndex.FemaleIcon;
                }
                case RecordTypeInts.DATA:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.ArmorData.CreateFromBinary(frame: frame);
                    return (int)Armor_FieldIndex.Data;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ArmorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class ArmorBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IArmorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Armor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ArmorCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ArmorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IArmor);


        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region Script
        private int? _ScriptLocation;
        public IFormLinkNullableGetter<IScriptGetter> Script => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IScriptGetter>(_package, _recordData, _ScriptLocation);
        #endregion
        #region Enchantment
        private int? _EnchantmentLocation;
        public IFormLinkNullableGetter<IEnchantmentGetter> Enchantment => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEnchantmentGetter>(_package, _recordData, _EnchantmentLocation);
        #endregion
        #region EnchantmentPoints
        private int? _EnchantmentPointsLocation;
        public UInt16? EnchantmentPoints => _EnchantmentPointsLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EnchantmentPointsLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region ClothingFlags
        private RangeInt32? _ClothingFlagsLocation;
        public IClothingFlagsGetter? ClothingFlags => _ClothingFlagsLocation.HasValue ? ClothingFlagsBinaryOverlay.ClothingFlagsFactory(_recordData.Slice(_ClothingFlagsLocation!.Value.Min), _package) : default;
        #endregion
        public IModelGetter? MaleBipedModel { get; private set; }
        public IModelGetter? MaleWorldModel { get; private set; }
        #region MaleIcon
        private int? _MaleIconLocation;
        public String? MaleIcon => _MaleIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaleIconLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IModelGetter? FemaleBipedModel { get; private set; }
        public IModelGetter? FemaleWorldModel { get; private set; }
        #region FemaleIcon
        private int? _FemaleIconLocation;
        public String? FemaleIcon => _FemaleIconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FemaleIconLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Data
        private RangeInt32? _DataLocation;
        public IArmorDataGetter? Data => _DataLocation.HasValue ? ArmorDataBinaryOverlay.ArmorDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ArmorBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IArmorGetter ArmorFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ArmorBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IArmorGetter ArmorFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ArmorFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.Name;
                }
                case RecordTypeInts.SCRI:
                {
                    _ScriptLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.Script;
                }
                case RecordTypeInts.ENAM:
                {
                    _EnchantmentLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.Enchantment;
                }
                case RecordTypeInts.ANAM:
                {
                    _EnchantmentPointsLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.EnchantmentPoints;
                }
                case RecordTypeInts.BMDT:
                {
                    _ClothingFlagsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Armor_FieldIndex.ClothingFlags;
                }
                case RecordTypeInts.MODL:
                {
                    this.MaleBipedModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Armor_FieldIndex.MaleBipedModel;
                }
                case RecordTypeInts.MOD2:
                {
                    this.MaleWorldModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.With(Armor_Registration.MaleWorldModelConverter).DoNotShortCircuit());
                    return (int)Armor_FieldIndex.MaleWorldModel;
                }
                case RecordTypeInts.ICON:
                {
                    _MaleIconLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.MaleIcon;
                }
                case RecordTypeInts.MOD3:
                {
                    this.FemaleBipedModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.With(Armor_Registration.FemaleBipedModelConverter).DoNotShortCircuit());
                    return (int)Armor_FieldIndex.FemaleBipedModel;
                }
                case RecordTypeInts.MOD4:
                {
                    this.FemaleWorldModel = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.With(Armor_Registration.FemaleWorldModelConverter).DoNotShortCircuit());
                    return (int)Armor_FieldIndex.FemaleWorldModel;
                }
                case RecordTypeInts.ICO2:
                {
                    _FemaleIconLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.FemaleIcon;
                }
                case RecordTypeInts.DATA:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Armor_FieldIndex.Data;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ArmorMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Armor>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IArmorGetter rhs) return false;
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IArmorGetter? obj)
        {
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

