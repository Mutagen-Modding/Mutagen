/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedNpc :
        OblivionMajorRecord,
        IEquatable<IPlacedNpcGetter>,
        ILoquiObjectSetter<PlacedNpc>,
        IPlacedNpcInternal
    {
        #region Ctor
        protected PlacedNpc()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        private readonly IFormLinkNullable<INpcGetter> _Base = new FormLinkNullable<INpcGetter>();
        public IFormLinkNullable<INpcGetter> Base
        {
            get => _Base;
            set => _Base.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<INpcGetter> IPlacedNpcGetter.Base => this.Base;
        #endregion
        #region XPCIFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XPCIFluff;
        public MemorySlice<Byte>? XPCIFluff
        {
            get => this._XPCIFluff;
            set => this._XPCIFluff = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedNpcGetter.XPCIFluff => this.XPCIFluff;
        #endregion
        #region FULLFluff
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FULLFluff;
        public MemorySlice<Byte>? FULLFluff
        {
            get => this._FULLFluff;
            set => this._FULLFluff = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedNpcGetter.FULLFluff => this.FULLFluff;
        #endregion
        #region DistantLODData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DistantLODData? _DistantLODData;
        public DistantLODData? DistantLODData
        {
            get => _DistantLODData;
            set => _DistantLODData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDistantLODDataGetter? IPlacedNpcGetter.DistantLODData => this.DistantLODData;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IPlacedNpcGetter.EnableParent => this.EnableParent;
        #endregion
        #region MerchantContainer
        private readonly IFormLinkNullable<IPlacedObjectGetter> _MerchantContainer = new FormLinkNullable<IPlacedObjectGetter>();
        public IFormLinkNullable<IPlacedObjectGetter> MerchantContainer
        {
            get => _MerchantContainer;
            set => _MerchantContainer.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IPlacedNpcGetter.MerchantContainer => this.MerchantContainer;
        #endregion
        #region Horse
        private readonly IFormLinkNullable<IPlacedCreatureGetter> _Horse = new FormLinkNullable<IPlacedCreatureGetter>();
        public IFormLinkNullable<IPlacedCreatureGetter> Horse
        {
            get => _Horse;
            set => _Horse.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedCreatureGetter> IPlacedNpcGetter.Horse => this.Horse;
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RagdollData;
        public MemorySlice<Byte>? RagdollData
        {
            get => this._RagdollData;
            set => this._RagdollData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedNpcGetter.RagdollData => this.RagdollData;
        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedNpcGetter.Scale => this.Scale;
        #endregion
        #region Location
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Location? _Location;
        public Location? Location
        {
            get => _Location;
            set => _Location = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationGetter? IPlacedNpcGetter.Location => this.Location;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedNpcMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Base = initialValue;
                this.XPCIFluff = initialValue;
                this.FULLFluff = initialValue;
                this.DistantLODData = new MaskItem<TItem, DistantLODData.Mask<TItem>?>(initialValue, new DistantLODData.Mask<TItem>(initialValue));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.MerchantContainer = initialValue;
                this.Horse = initialValue;
                this.RagdollData = initialValue;
                this.Scale = initialValue;
                this.Location = new MaskItem<TItem, Location.Mask<TItem>?>(initialValue, new Location.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Base,
                TItem XPCIFluff,
                TItem FULLFluff,
                TItem DistantLODData,
                TItem EnableParent,
                TItem MerchantContainer,
                TItem Horse,
                TItem RagdollData,
                TItem Scale,
                TItem Location)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Base = Base;
                this.XPCIFluff = XPCIFluff;
                this.FULLFluff = FULLFluff;
                this.DistantLODData = new MaskItem<TItem, DistantLODData.Mask<TItem>?>(DistantLODData, new DistantLODData.Mask<TItem>(DistantLODData));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.MerchantContainer = MerchantContainer;
                this.Horse = Horse;
                this.RagdollData = RagdollData;
                this.Scale = Scale;
                this.Location = new MaskItem<TItem, Location.Mask<TItem>?>(Location, new Location.Mask<TItem>(Location));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Base;
            public TItem XPCIFluff;
            public TItem FULLFluff;
            public MaskItem<TItem, DistantLODData.Mask<TItem>?>? DistantLODData { get; set; }
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public TItem MerchantContainer;
            public TItem Horse;
            public TItem RagdollData;
            public TItem Scale;
            public MaskItem<TItem, Location.Mask<TItem>?>? Location { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.XPCIFluff, rhs.XPCIFluff)) return false;
                if (!object.Equals(this.FULLFluff, rhs.FULLFluff)) return false;
                if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.MerchantContainer, rhs.MerchantContainer)) return false;
                if (!object.Equals(this.Horse, rhs.Horse)) return false;
                if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Base);
                hash.Add(this.XPCIFluff);
                hash.Add(this.FULLFluff);
                hash.Add(this.DistantLODData);
                hash.Add(this.EnableParent);
                hash.Add(this.MerchantContainer);
                hash.Add(this.Horse);
                hash.Add(this.RagdollData);
                hash.Add(this.Scale);
                hash.Add(this.Location);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Base)) return false;
                if (!eval(this.XPCIFluff)) return false;
                if (!eval(this.FULLFluff)) return false;
                if (DistantLODData != null)
                {
                    if (!eval(this.DistantLODData.Overall)) return false;
                    if (this.DistantLODData.Specific != null && !this.DistantLODData.Specific.All(eval)) return false;
                }
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (!eval(this.MerchantContainer)) return false;
                if (!eval(this.Horse)) return false;
                if (!eval(this.RagdollData)) return false;
                if (!eval(this.Scale)) return false;
                if (Location != null)
                {
                    if (!eval(this.Location.Overall)) return false;
                    if (this.Location.Specific != null && !this.Location.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Base)) return true;
                if (eval(this.XPCIFluff)) return true;
                if (eval(this.FULLFluff)) return true;
                if (DistantLODData != null)
                {
                    if (eval(this.DistantLODData.Overall)) return true;
                    if (this.DistantLODData.Specific != null && this.DistantLODData.Specific.Any(eval)) return true;
                }
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (eval(this.MerchantContainer)) return true;
                if (eval(this.Horse)) return true;
                if (eval(this.RagdollData)) return true;
                if (eval(this.Scale)) return true;
                if (Location != null)
                {
                    if (eval(this.Location.Overall)) return true;
                    if (this.Location.Specific != null && this.Location.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedNpc.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Base = eval(this.Base);
                obj.XPCIFluff = eval(this.XPCIFluff);
                obj.FULLFluff = eval(this.FULLFluff);
                obj.DistantLODData = this.DistantLODData == null ? null : new MaskItem<R, DistantLODData.Mask<R>?>(eval(this.DistantLODData.Overall), this.DistantLODData.Specific?.Translate(eval));
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.MerchantContainer = eval(this.MerchantContainer);
                obj.Horse = eval(this.Horse);
                obj.RagdollData = eval(this.RagdollData);
                obj.Scale = eval(this.Scale);
                obj.Location = this.Location == null ? null : new MaskItem<R, Location.Mask<R>?>(eval(this.Location.Overall), this.Location.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedNpc.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedNpc.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedNpc.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Base ?? true)
                    {
                        sb.AppendItem(Base, "Base");
                    }
                    if (printMask?.XPCIFluff ?? true)
                    {
                        sb.AppendItem(XPCIFluff, "XPCIFluff");
                    }
                    if (printMask?.FULLFluff ?? true)
                    {
                        sb.AppendItem(FULLFluff, "FULLFluff");
                    }
                    if (printMask?.DistantLODData?.Overall ?? true)
                    {
                        DistantLODData?.Print(sb);
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.Print(sb);
                    }
                    if (printMask?.MerchantContainer ?? true)
                    {
                        sb.AppendItem(MerchantContainer, "MerchantContainer");
                    }
                    if (printMask?.Horse ?? true)
                    {
                        sb.AppendItem(Horse, "Horse");
                    }
                    if (printMask?.RagdollData ?? true)
                    {
                        sb.AppendItem(RagdollData, "RagdollData");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        sb.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.Location?.Overall ?? true)
                    {
                        Location?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Base;
            public Exception? XPCIFluff;
            public Exception? FULLFluff;
            public MaskItem<Exception?, DistantLODData.ErrorMask?>? DistantLODData;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public Exception? MerchantContainer;
            public Exception? Horse;
            public Exception? RagdollData;
            public Exception? Scale;
            public MaskItem<Exception?, Location.ErrorMask?>? Location;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.Base:
                        return Base;
                    case PlacedNpc_FieldIndex.XPCIFluff:
                        return XPCIFluff;
                    case PlacedNpc_FieldIndex.FULLFluff:
                        return FULLFluff;
                    case PlacedNpc_FieldIndex.DistantLODData:
                        return DistantLODData;
                    case PlacedNpc_FieldIndex.EnableParent:
                        return EnableParent;
                    case PlacedNpc_FieldIndex.MerchantContainer:
                        return MerchantContainer;
                    case PlacedNpc_FieldIndex.Horse:
                        return Horse;
                    case PlacedNpc_FieldIndex.RagdollData:
                        return RagdollData;
                    case PlacedNpc_FieldIndex.Scale:
                        return Scale;
                    case PlacedNpc_FieldIndex.Location:
                        return Location;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.Base:
                        this.Base = ex;
                        break;
                    case PlacedNpc_FieldIndex.XPCIFluff:
                        this.XPCIFluff = ex;
                        break;
                    case PlacedNpc_FieldIndex.FULLFluff:
                        this.FULLFluff = ex;
                        break;
                    case PlacedNpc_FieldIndex.DistantLODData:
                        this.DistantLODData = new MaskItem<Exception?, DistantLODData.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case PlacedNpc_FieldIndex.MerchantContainer:
                        this.MerchantContainer = ex;
                        break;
                    case PlacedNpc_FieldIndex.Horse:
                        this.Horse = ex;
                        break;
                    case PlacedNpc_FieldIndex.RagdollData:
                        this.RagdollData = ex;
                        break;
                    case PlacedNpc_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case PlacedNpc_FieldIndex.Location:
                        this.Location = new MaskItem<Exception?, Location.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedNpc_FieldIndex enu = (PlacedNpc_FieldIndex)index;
                switch (enu)
                {
                    case PlacedNpc_FieldIndex.Base:
                        this.Base = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.XPCIFluff:
                        this.XPCIFluff = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.FULLFluff:
                        this.FULLFluff = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.DistantLODData:
                        this.DistantLODData = (MaskItem<Exception?, DistantLODData.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case PlacedNpc_FieldIndex.MerchantContainer:
                        this.MerchantContainer = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Horse:
                        this.Horse = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.RagdollData:
                        this.RagdollData = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case PlacedNpc_FieldIndex.Location:
                        this.Location = (MaskItem<Exception?, Location.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Base != null) return true;
                if (XPCIFluff != null) return true;
                if (FULLFluff != null) return true;
                if (DistantLODData != null) return true;
                if (EnableParent != null) return true;
                if (MerchantContainer != null) return true;
                if (Horse != null) return true;
                if (RagdollData != null) return true;
                if (Scale != null) return true;
                if (Location != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Base, "Base");
                }
                {
                    sb.AppendItem(XPCIFluff, "XPCIFluff");
                }
                {
                    sb.AppendItem(FULLFluff, "FULLFluff");
                }
                DistantLODData?.Print(sb);
                EnableParent?.Print(sb);
                {
                    sb.AppendItem(MerchantContainer, "MerchantContainer");
                }
                {
                    sb.AppendItem(Horse, "Horse");
                }
                {
                    sb.AppendItem(RagdollData, "RagdollData");
                }
                {
                    sb.AppendItem(Scale, "Scale");
                }
                Location?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Base = this.Base.Combine(rhs.Base);
                ret.XPCIFluff = this.XPCIFluff.Combine(rhs.XPCIFluff);
                ret.FULLFluff = this.FULLFluff.Combine(rhs.FULLFluff);
                ret.DistantLODData = this.DistantLODData.Combine(rhs.DistantLODData, (l, r) => l.Combine(r));
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.MerchantContainer = this.MerchantContainer.Combine(rhs.MerchantContainer);
                ret.Horse = this.Horse.Combine(rhs.Horse);
                ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Location = this.Location.Combine(rhs.Location, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Base;
            public bool XPCIFluff;
            public bool FULLFluff;
            public DistantLODData.TranslationMask? DistantLODData;
            public EnableParent.TranslationMask? EnableParent;
            public bool MerchantContainer;
            public bool Horse;
            public bool RagdollData;
            public bool Scale;
            public Location.TranslationMask? Location;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Base = defaultOn;
                this.XPCIFluff = defaultOn;
                this.FULLFluff = defaultOn;
                this.MerchantContainer = defaultOn;
                this.Horse = defaultOn;
                this.RagdollData = defaultOn;
                this.Scale = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Base, null));
                ret.Add((XPCIFluff, null));
                ret.Add((FULLFluff, null));
                ret.Add((DistantLODData != null ? DistantLODData.OnOverall : DefaultOn, DistantLODData?.GetCrystal()));
                ret.Add((EnableParent != null ? EnableParent.OnOverall : DefaultOn, EnableParent?.GetCrystal()));
                ret.Add((MerchantContainer, null));
                ret.Add((Horse, null));
                ret.Add((RagdollData, null));
                ret.Add((Scale, null));
                ret.Add((Location != null ? Location.OnOverall : DefaultOn, Location?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PlacedNpc_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedNpcCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedNpcSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedNpc(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private PlacedNpc(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public PlacedNpc(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public PlacedNpc(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedNpc>.ToString(this);
        }

        protected override Type LinkType => typeof(IPlacedNpc);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedNpcGetter rhs) return false;
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedNpcGetter? obj)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedNpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedNpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlacedNpc CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedNpc();
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedNpc item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedNpc GetNew()
        {
            return new PlacedNpc();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedNpc :
        IFormLinkContainer,
        ILoquiObjectSetter<IPlacedNpcInternal>,
        IOblivionMajorRecordInternal,
        IPlaced,
        IPlacedNpcGetter
    {
        new IFormLinkNullable<INpcGetter> Base { get; set; }
        new MemorySlice<Byte>? XPCIFluff { get; set; }
        new MemorySlice<Byte>? FULLFluff { get; set; }
        new DistantLODData? DistantLODData { get; set; }
        new EnableParent? EnableParent { get; set; }
        new IFormLinkNullable<IPlacedObjectGetter> MerchantContainer { get; set; }
        new IFormLinkNullable<IPlacedCreatureGetter> Horse { get; set; }
        new MemorySlice<Byte>? RagdollData { get; set; }
        new Single? Scale { get; set; }
        new Location? Location { get; set; }
    }

    public partial interface IPlacedNpcInternal :
        IOblivionMajorRecordInternal,
        IPlacedNpc,
        IPlacedNpcGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.ACHR)]
    public partial interface IPlacedNpcGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPlacedNpcGetter>,
        IMapsToGetter<IPlacedNpcGetter>,
        IPlacedGetter
    {
        static new ILoquiRegistration StaticRegistration => PlacedNpc_Registration.Instance;
        IFormLinkNullableGetter<INpcGetter> Base { get; }
        ReadOnlyMemorySlice<Byte>? XPCIFluff { get; }
        ReadOnlyMemorySlice<Byte>? FULLFluff { get; }
        IDistantLODDataGetter? DistantLODData { get; }
        IEnableParentGetter? EnableParent { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> MerchantContainer { get; }
        IFormLinkNullableGetter<IPlacedCreatureGetter> Horse { get; }
        ReadOnlyMemorySlice<Byte>? RagdollData { get; }
        Single? Scale { get; }
        ILocationGetter? Location { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedNpcMixIn
    {
        public static void Clear(this IPlacedNpcInternal item)
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedNpc.Mask<bool> GetEqualsMask(
            this IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedNpcGetter item,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedNpcGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            PlacedNpc.TranslationMask? equalsMask = null)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedNpcInternal lhs,
            IPlacedNpcGetter rhs,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedNpc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedNpcInternal lhs,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedNpc DeepCopy(
            this IPlacedNpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedNpc Duplicate(
            this IPlacedNpcGetter item,
            FormKey formKey,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static PlacedNpc Duplicate(
            this IPlacedNpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedNpcInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedNpcSetterCommon)((IPlacedNpcGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum PlacedNpc_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Base = 5,
        XPCIFluff = 6,
        FULLFluff = 7,
        DistantLODData = 8,
        EnableParent = 9,
        MerchantContainer = 10,
        Horse = 11,
        RagdollData = 12,
        Scale = 13,
        Location = 14,
    }
    #endregion

    #region Registration
    internal partial class PlacedNpc_Registration : ILoquiRegistration
    {
        public static readonly PlacedNpc_Registration Instance = new PlacedNpc_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 15;

        public static readonly Type MaskType = typeof(PlacedNpc.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedNpc.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedNpc);

        public static readonly Type GetterType = typeof(IPlacedNpcGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedNpc);

        public static readonly Type? InternalSetterType = typeof(IPlacedNpcInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedNpc";

        public const string Name = "PlacedNpc";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ACHR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ACHR);
            var all = RecordCollection.Factory(
                RecordTypes.ACHR,
                RecordTypes.NAME,
                RecordTypes.XPCI,
                RecordTypes.FULL,
                RecordTypes.XLOD,
                RecordTypes.XESP,
                RecordTypes.XMRC,
                RecordTypes.XHRS,
                RecordTypes.XRGD,
                RecordTypes.XSCL,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedNpcBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedNpcSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly PlacedNpcSetterCommon Instance = new PlacedNpcSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedNpcInternal item)
        {
            ClearPartial();
            item.Base.Clear();
            item.XPCIFluff = default;
            item.FULLFluff = default;
            item.DistantLODData = null;
            item.EnableParent = null;
            item.MerchantContainer.Clear();
            item.Horse.Clear();
            item.RagdollData = default;
            item.Scale = default;
            item.Location = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPlacedNpcInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedNpcInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedNpc obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Base.Relink(mapping);
            obj.EnableParent?.RemapLinks(mapping);
            obj.MerchantContainer.Relink(mapping);
            obj.Horse.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedNpcInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IPlacedNpcInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedNpcBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedNpcBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedNpc)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedNpc)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlacedNpcCommon : OblivionMajorRecordCommon
    {
        public new static readonly PlacedNpcCommon Instance = new PlacedNpcCommon();

        public PlacedNpc.Mask<bool> GetEqualsMask(
            IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedNpc.Mask<bool>(false);
            ((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedNpcGetter item,
            IPlacedNpcGetter rhs,
            PlacedNpc.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Base = item.Base.Equals(rhs.Base);
            ret.XPCIFluff = MemorySliceExt.SequenceEqual(item.XPCIFluff, rhs.XPCIFluff);
            ret.FULLFluff = MemorySliceExt.SequenceEqual(item.FULLFluff, rhs.FULLFluff);
            ret.DistantLODData = EqualsMaskHelper.EqualsHelper(
                item.DistantLODData,
                rhs.DistantLODData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.MerchantContainer = item.MerchantContainer.Equals(rhs.MerchantContainer);
            ret.Horse = item.Horse.Equals(rhs.Horse);
            ret.RagdollData = MemorySliceExt.SequenceEqual(item.RagdollData, rhs.RagdollData);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.Location = EqualsMaskHelper.EqualsHelper(
                item.Location,
                rhs.Location,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlacedNpcGetter item,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedNpcGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedNpc =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedNpc) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedNpcGetter item,
            StructuredStringBuilder sb,
            PlacedNpc.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Base ?? true)
            {
                sb.AppendItem(item.Base.FormKeyNullable, "Base");
            }
            if ((printMask?.XPCIFluff ?? true)
                && item.XPCIFluff is {} XPCIFluffItem)
            {
                sb.AppendLine($"XPCIFluff => {SpanExt.ToHexString(XPCIFluffItem)}");
            }
            if ((printMask?.FULLFluff ?? true)
                && item.FULLFluff is {} FULLFluffItem)
            {
                sb.AppendLine($"FULLFluff => {SpanExt.ToHexString(FULLFluffItem)}");
            }
            if ((printMask?.DistantLODData?.Overall ?? true)
                && item.DistantLODData is {} DistantLODDataItem)
            {
                DistantLODDataItem?.Print(sb, "DistantLODData");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent is {} EnableParentItem)
            {
                EnableParentItem?.Print(sb, "EnableParent");
            }
            if (printMask?.MerchantContainer ?? true)
            {
                sb.AppendItem(item.MerchantContainer.FormKeyNullable, "MerchantContainer");
            }
            if (printMask?.Horse ?? true)
            {
                sb.AppendItem(item.Horse.FormKeyNullable, "Horse");
            }
            if ((printMask?.RagdollData ?? true)
                && item.RagdollData is {} RagdollDataItem)
            {
                sb.AppendLine($"RagdollData => {SpanExt.ToHexString(RagdollDataItem)}");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale is {} ScaleItem)
            {
                sb.AppendItem(ScaleItem, "Scale");
            }
            if ((printMask?.Location?.Overall ?? true)
                && item.Location is {} LocationItem)
            {
                LocationItem?.Print(sb, "Location");
            }
        }
        
        public static PlacedNpc_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNpc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (PlacedNpc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (PlacedNpc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (PlacedNpc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (PlacedNpc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new PlacedNpc_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedNpc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedNpc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedNpcGetter? lhs,
            IPlacedNpcGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Base) ?? true))
            {
                if (!lhs.Base.Equals(rhs.Base)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.XPCIFluff) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.XPCIFluff, rhs.XPCIFluff)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.FULLFluff) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FULLFluff, rhs.FULLFluff)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.DistantLODData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DistantLODData, rhs.DistantLODData, out var lhsDistantLODData, out var rhsDistantLODData, out var isDistantLODDataEqual))
                {
                    if (!((DistantLODDataCommon)((IDistantLODDataGetter)lhsDistantLODData).CommonInstance()!).Equals(lhsDistantLODData, rhsDistantLODData, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.DistantLODData))) return false;
                }
                else if (!isDistantLODDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.EnableParent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EnableParent, rhs.EnableParent, out var lhsEnableParent, out var rhsEnableParent, out var isEnableParentEqual))
                {
                    if (!((EnableParentCommon)((IEnableParentGetter)lhsEnableParent).CommonInstance()!).Equals(lhsEnableParent, rhsEnableParent, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.EnableParent))) return false;
                }
                else if (!isEnableParentEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.MerchantContainer) ?? true))
            {
                if (!lhs.MerchantContainer.Equals(rhs.MerchantContainer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Horse) ?? true))
            {
                if (!lhs.Horse.Equals(rhs.Horse)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.RagdollData) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.RagdollData, rhs.RagdollData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Scale) ?? true))
            {
                if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Location) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Location, rhs.Location, out var lhsLocation, out var rhsLocation, out var isLocationEqual))
                {
                    if (!((LocationCommon)((ILocationGetter)lhsLocation).CommonInstance()!).Equals(lhsLocation, rhsLocation, equalsMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Location))) return false;
                }
                else if (!isLocationEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedNpcGetter?)lhs,
                rhs: rhs as IPlacedNpcGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedNpcGetter?)lhs,
                rhs: rhs as IPlacedNpcGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlacedNpcGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Base);
            if (item.XPCIFluff is {} XPCIFluffItem)
            {
                hash.Add(XPCIFluffItem);
            }
            if (item.FULLFluff is {} FULLFluffItem)
            {
                hash.Add(FULLFluffItem);
            }
            if (item.DistantLODData is {} DistantLODDataitem)
            {
                hash.Add(DistantLODDataitem);
            }
            if (item.EnableParent is {} EnableParentitem)
            {
                hash.Add(EnableParentitem);
            }
            hash.Add(item.MerchantContainer);
            hash.Add(item.Horse);
            if (item.RagdollData is {} RagdollDataItem)
            {
                hash.Add(RagdollDataItem);
            }
            if (item.Scale is {} Scaleitem)
            {
                hash.Add(Scaleitem);
            }
            if (item.Location is {} Locationitem)
            {
                hash.Add(Locationitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedNpcGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedNpcGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedNpc.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedNpcGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Base, out var BaseInfo))
            {
                yield return BaseInfo;
            }
            if (obj.EnableParent is {} EnableParentItems)
            {
                foreach (var item in EnableParentItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.MerchantContainer, out var MerchantContainerInfo))
            {
                yield return MerchantContainerInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Horse, out var HorseInfo))
            {
                yield return HorseInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public PlacedNpc Duplicate(
            IPlacedNpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedNpc(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedNpcGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedNpcGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class PlacedNpcSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly PlacedNpcSetterTranslationCommon Instance = new PlacedNpcSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedNpcInternal item,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedNpc item,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Base) ?? true))
            {
                item.Base.SetTo(rhs.Base.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.XPCIFluff) ?? true))
            {
                if(rhs.XPCIFluff is {} XPCIFluffrhs)
                {
                    item.XPCIFluff = XPCIFluffrhs.ToArray();
                }
                else
                {
                    item.XPCIFluff = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.FULLFluff) ?? true))
            {
                if(rhs.FULLFluff is {} FULLFluffrhs)
                {
                    item.FULLFluff = FULLFluffrhs.ToArray();
                }
                else
                {
                    item.FULLFluff = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.DistantLODData) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.DistantLODData);
                try
                {
                    if(rhs.DistantLODData is {} rhsDistantLODData)
                    {
                        item.DistantLODData = rhsDistantLODData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.DistantLODData));
                    }
                    else
                    {
                        item.DistantLODData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent is {} rhsEnableParent)
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.MerchantContainer) ?? true))
            {
                item.MerchantContainer.SetTo(rhs.MerchantContainer.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Horse) ?? true))
            {
                item.Horse.SetTo(rhs.Horse.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.RagdollData) ?? true))
            {
                if(rhs.RagdollData is {} RagdollDatarhs)
                {
                    item.RagdollData = RagdollDatarhs.ToArray();
                }
                else
                {
                    item.RagdollData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedNpc_FieldIndex.Location) ?? true))
            {
                errorMask?.PushIndex((int)PlacedNpc_FieldIndex.Location);
                try
                {
                    if(rhs.Location is {} rhsLocation)
                    {
                        item.Location = rhsLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedNpc_FieldIndex.Location));
                    }
                    else
                    {
                        item.Location = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedNpc item,
            IPlacedNpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpcInternal)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpc)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpcInternal)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedNpc)item,
                rhs: (IPlacedNpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            out PlacedNpc.ErrorMask errorMask,
            PlacedNpc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedNpc.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedNpc DeepCopy(
            IPlacedNpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedNpc ret = (PlacedNpc)((PlacedNpcCommon)((IPlacedNpcGetter)item).CommonInstance()!).GetNew();
            ((PlacedNpcSetterTranslationCommon)((IPlacedNpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PlacedNpc
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNpc_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedNpc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedNpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedNpcSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedNpcSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class PlacedNpcBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlacedNpcBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPlacedNpcGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Base,
                header: translationParams.ConvertToCustom(RecordTypes.NAME));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XPCIFluff,
                header: translationParams.ConvertToCustom(RecordTypes.XPCI));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FULLFluff,
                header: translationParams.ConvertToCustom(RecordTypes.FULL));
            if (item.DistantLODData is {} DistantLODDataItem)
            {
                ((DistantLODDataBinaryWriteTranslation)((IBinaryItem)DistantLODDataItem).BinaryWriteTranslator).Write(
                    item: DistantLODDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.EnableParent is {} EnableParentItem)
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MerchantContainer,
                header: translationParams.ConvertToCustom(RecordTypes.XMRC));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Horse,
                header: translationParams.ConvertToCustom(RecordTypes.XHRS));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RagdollData,
                header: translationParams.ConvertToCustom(RecordTypes.XRGD));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: translationParams.ConvertToCustom(RecordTypes.XSCL));
            if (item.Location is {} LocationItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.DATA))
                {
                    ((LocationBinaryWriteTranslation)((IBinaryItem)LocationItem).BinaryWriteTranslator).Write(
                        item: LocationItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IPlacedNpcGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ACHR,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedNpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedNpcBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly PlacedNpcBinaryCreateTranslation Instance = new PlacedNpcBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ACHR;
        public static ParseResult FillBinaryRecordTypes(
            IPlacedNpcInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NAME:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Base.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.Base;
                }
                case RecordTypeInts.XPCI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XPCIFluff = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.XPCIFluff;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FULLFluff = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.FULLFluff;
                }
                case RecordTypeInts.XLOD:
                {
                    item.DistantLODData = Mutagen.Bethesda.Oblivion.DistantLODData.CreateFromBinary(frame: frame);
                    return (int)PlacedNpc_FieldIndex.DistantLODData;
                }
                case RecordTypeInts.XESP:
                {
                    item.EnableParent = Mutagen.Bethesda.Oblivion.EnableParent.CreateFromBinary(frame: frame);
                    return (int)PlacedNpc_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XMRC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MerchantContainer.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.MerchantContainer;
                }
                case RecordTypeInts.XHRS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Horse.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedNpc_FieldIndex.Horse;
                }
                case RecordTypeInts.XRGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XSCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedNpc_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.Location = Mutagen.Bethesda.Oblivion.Location.CreateFromBinary(frame: frame);
                    return (int)PlacedNpc_FieldIndex.Location;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class PlacedNpcBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class PlacedNpcBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IPlacedNpcGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedNpc_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedNpc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedNpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedNpcSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedNpcCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedNpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedNpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPlacedNpc);


        #region Base
        private int? _BaseLocation;
        public IFormLinkNullableGetter<INpcGetter> Base => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<INpcGetter>(_package, _recordData, _BaseLocation);
        #endregion
        #region XPCIFluff
        private int? _XPCIFluffLocation;
        public ReadOnlyMemorySlice<Byte>? XPCIFluff => _XPCIFluffLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XPCIFluffLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FULLFluff
        private int? _FULLFluffLocation;
        public ReadOnlyMemorySlice<Byte>? FULLFluff => _FULLFluffLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FULLFluffLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region DistantLODData
        private RangeInt32? _DistantLODDataLocation;
        public IDistantLODDataGetter? DistantLODData => _DistantLODDataLocation.HasValue ? DistantLODDataBinaryOverlay.DistantLODDataFactory(_recordData.Slice(_DistantLODDataLocation!.Value.Min), _package) : default;
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(_recordData.Slice(_EnableParentLocation!.Value.Min), _package) : default;
        #endregion
        #region MerchantContainer
        private int? _MerchantContainerLocation;
        public IFormLinkNullableGetter<IPlacedObjectGetter> MerchantContainer => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedObjectGetter>(_package, _recordData, _MerchantContainerLocation);
        #endregion
        #region Horse
        private int? _HorseLocation;
        public IFormLinkNullableGetter<IPlacedCreatureGetter> Horse => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedCreatureGetter>(_package, _recordData, _HorseLocation);
        #endregion
        #region RagdollData
        private int? _RagdollDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollData => _RagdollDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _RagdollDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public ILocationGetter? Location { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedNpcBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedNpcGetter PlacedNpcFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlacedNpcBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlacedNpcGetter PlacedNpcFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedNpcFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NAME:
                {
                    _BaseLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Base;
                }
                case RecordTypeInts.XPCI:
                {
                    _XPCIFluffLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.XPCIFluff;
                }
                case RecordTypeInts.FULL:
                {
                    _FULLFluffLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.FULLFluff;
                }
                case RecordTypeInts.XLOD:
                {
                    _DistantLODDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedNpc_FieldIndex.DistantLODData;
                }
                case RecordTypeInts.XESP:
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedNpc_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XMRC:
                {
                    _MerchantContainerLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.MerchantContainer;
                }
                case RecordTypeInts.XHRS:
                {
                    _HorseLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Horse;
                }
                case RecordTypeInts.XRGD:
                {
                    _RagdollDataLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XSCL:
                {
                    _ScaleLocation = (stream.Position - offset);
                    return (int)PlacedNpc_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.Location = LocationBinaryOverlay.LocationFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedNpc_FieldIndex.Location;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedNpcMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedNpc>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedNpcGetter rhs) return false;
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedNpcGetter? obj)
        {
            return ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedNpcCommon)((IPlacedNpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

