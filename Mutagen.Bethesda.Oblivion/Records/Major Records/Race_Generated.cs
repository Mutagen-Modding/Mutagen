/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Race :
        OblivionMajorRecord,
        IEquatable<IRaceGetter>,
        ILoquiObjectSetter<Race>,
        IRaceInternal
    {
        #region Ctor
        protected Race()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Description
        public String? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IRaceGetter.Description => this.Description;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellGetter>> _Spells = new ExtendedList<IFormLinkGetter<ISpellGetter>>();
        public ExtendedList<IFormLinkGetter<ISpellGetter>> Spells
        {
            get => this._Spells;
            init => this._Spells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellGetter>> IRaceGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RaceRelation> _Relations = new ExtendedList<RaceRelation>();
        public ExtendedList<RaceRelation> Relations
        {
            get => this._Relations;
            init => this._Relations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRaceRelationGetter> IRaceGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RaceData? _Data;
        public RaceData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IRaceDataGetter? IRaceGetter.Data => this.Data;
        #endregion
        #region Voices
        public IGenderedItem<IFormLinkGetter<IRaceGetter>>? Voices { get; set; }
        IGenderedItemGetter<IFormLinkGetter<IRaceGetter>>? IRaceGetter.Voices => this.Voices;
        #endregion
        #region DefaultHair
        public IGenderedItem<IFormLinkGetter<IHairGetter>>? DefaultHair { get; set; }
        IGenderedItemGetter<IFormLinkGetter<IHairGetter>>? IRaceGetter.DefaultHair => this.DefaultHair;
        #endregion
        #region DefaultHairColor
        public Byte? DefaultHairColor { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? IRaceGetter.DefaultHairColor => this.DefaultHairColor;
        #endregion
        #region FaceGenMainClamp
        public Int32? FaceGenMainClamp { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IRaceGetter.FaceGenMainClamp => this.FaceGenMainClamp;
        #endregion
        #region FaceGenFaceClamp
        public Int32? FaceGenFaceClamp { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IRaceGetter.FaceGenFaceClamp => this.FaceGenFaceClamp;
        #endregion
        #region RaceStats
        public IGenderedItem<RaceStats>? RaceStats { get; set; }
        IGenderedItemGetter<IRaceStatsGetter>? IRaceGetter.RaceStats => this.RaceStats;
        #endregion
        #region FaceData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<FacePartItem> _FaceData = new ExtendedList<FacePartItem>();
        public ExtendedList<FacePartItem> FaceData
        {
            get => this._FaceData;
            init => this._FaceData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFacePartItemGetter> IRaceGetter.FaceData => _FaceData;
        #endregion

        #endregion
        #region BodyData
        public IGenderedItem<BodyData?>? BodyData { get; set; }
        IGenderedItemGetter<IBodyDataGetter?>? IRaceGetter.BodyData => this.BodyData;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IHairGetter>>? _Hairs;
        public ExtendedList<IFormLinkGetter<IHairGetter>>? Hairs
        {
            get => this._Hairs;
            set => this._Hairs = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IHairGetter>>? IRaceGetter.Hairs => _Hairs;
        #endregion

        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IEyeGetter>>? _Eyes;
        public ExtendedList<IFormLinkGetter<IEyeGetter>>? Eyes
        {
            get => this._Eyes;
            set => this._Eyes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IEyeGetter>>? IRaceGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region FaceGenData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FaceGenData? _FaceGenData;
        public FaceGenData? FaceGenData
        {
            get => _FaceGenData;
            set => _FaceGenData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFaceGenDataGetter? IRaceGetter.FaceGenData => this.FaceGenData;
        #endregion
        #region SNAM
        public Int16? SNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? IRaceGetter.SNAM => this.SNAM;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceRelation.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RaceRelation.Mask<TItem>?>>());
                this.Data = new MaskItem<TItem, RaceData.Mask<TItem>?>(initialValue, new RaceData.Mask<TItem>(initialValue));
                this.Voices = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.DefaultHair = new MaskItem<TItem, GenderedItem<TItem>?>(initialValue, default);
                this.DefaultHairColor = initialValue;
                this.FaceGenMainClamp = initialValue;
                this.FaceGenFaceClamp = initialValue;
                this.RaceStats = new MaskItem<TItem, GenderedItem<RaceStats.Mask<TItem>?>?>(initialValue, default);
                this.FaceData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FacePartItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, FacePartItem.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(initialValue, default);
                this.Hairs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.FaceGenData = new MaskItem<TItem, FaceGenData.Mask<TItem>?>(initialValue, new FaceGenData.Mask<TItem>(initialValue));
                this.SNAM = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Description,
                TItem Spells,
                TItem Relations,
                TItem Data,
                TItem Voices,
                TItem DefaultHair,
                TItem DefaultHairColor,
                TItem FaceGenMainClamp,
                TItem FaceGenFaceClamp,
                TItem RaceStats,
                TItem FaceData,
                TItem BodyData,
                TItem Hairs,
                TItem Eyes,
                TItem FaceGenData,
                TItem SNAM)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Description = Description;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Spells, Enumerable.Empty<(int Index, TItem Value)>());
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceRelation.Mask<TItem>?>>?>(Relations, Enumerable.Empty<MaskItemIndexed<TItem, RaceRelation.Mask<TItem>?>>());
                this.Data = new MaskItem<TItem, RaceData.Mask<TItem>?>(Data, new RaceData.Mask<TItem>(Data));
                this.Voices = new MaskItem<TItem, GenderedItem<TItem>?>(Voices, default);
                this.DefaultHair = new MaskItem<TItem, GenderedItem<TItem>?>(DefaultHair, default);
                this.DefaultHairColor = DefaultHairColor;
                this.FaceGenMainClamp = FaceGenMainClamp;
                this.FaceGenFaceClamp = FaceGenFaceClamp;
                this.RaceStats = new MaskItem<TItem, GenderedItem<RaceStats.Mask<TItem>?>?>(RaceStats, default);
                this.FaceData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FacePartItem.Mask<TItem>?>>?>(FaceData, Enumerable.Empty<MaskItemIndexed<TItem, FacePartItem.Mask<TItem>?>>());
                this.BodyData = new MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>(BodyData, default);
                this.Hairs = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Hairs, Enumerable.Empty<(int Index, TItem Value)>());
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Eyes, Enumerable.Empty<(int Index, TItem Value)>());
                this.FaceGenData = new MaskItem<TItem, FaceGenData.Mask<TItem>?>(FaceGenData, new FaceGenData.Mask<TItem>(FaceGenData));
                this.SNAM = SNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Spells;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RaceRelation.Mask<TItem>?>>?>? Relations;
            public MaskItem<TItem, RaceData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, GenderedItem<TItem>?>? Voices;
            public MaskItem<TItem, GenderedItem<TItem>?>? DefaultHair;
            public TItem DefaultHairColor;
            public TItem FaceGenMainClamp;
            public TItem FaceGenFaceClamp;
            public MaskItem<TItem, GenderedItem<RaceStats.Mask<TItem>?>?>? RaceStats;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, FacePartItem.Mask<TItem>?>>?>? FaceData;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, BodyData.Mask<TItem>?>?>?>? BodyData;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Hairs;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Eyes;
            public MaskItem<TItem, FaceGenData.Mask<TItem>?>? FaceGenData { get; set; }
            public TItem SNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Relations, rhs.Relations)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.Voices, rhs.Voices)) return false;
                if (!object.Equals(this.DefaultHair, rhs.DefaultHair)) return false;
                if (!object.Equals(this.DefaultHairColor, rhs.DefaultHairColor)) return false;
                if (!object.Equals(this.FaceGenMainClamp, rhs.FaceGenMainClamp)) return false;
                if (!object.Equals(this.FaceGenFaceClamp, rhs.FaceGenFaceClamp)) return false;
                if (!object.Equals(this.RaceStats, rhs.RaceStats)) return false;
                if (!object.Equals(this.FaceData, rhs.FaceData)) return false;
                if (!object.Equals(this.BodyData, rhs.BodyData)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.FaceGenData, rhs.FaceGenData)) return false;
                if (!object.Equals(this.SNAM, rhs.SNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.Spells);
                hash.Add(this.Relations);
                hash.Add(this.Data);
                hash.Add(this.Voices);
                hash.Add(this.DefaultHair);
                hash.Add(this.DefaultHairColor);
                hash.Add(this.FaceGenMainClamp);
                hash.Add(this.FaceGenFaceClamp);
                hash.Add(this.RaceStats);
                hash.Add(this.FaceData);
                hash.Add(this.BodyData);
                hash.Add(this.Hairs);
                hash.Add(this.Eyes);
                hash.Add(this.FaceGenData);
                hash.Add(this.SNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Relations != null)
                {
                    if (!eval(this.Relations.Overall)) return false;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!GenderedItem.All(
                    this.Voices,
                    eval: eval)) return false;
                if (!GenderedItem.All(
                    this.DefaultHair,
                    eval: eval)) return false;
                if (!eval(this.DefaultHairColor)) return false;
                if (!eval(this.FaceGenMainClamp)) return false;
                if (!eval(this.FaceGenFaceClamp)) return false;
                if (!GenderedItem.AllMask(
                    this.RaceStats,
                    eval: eval)) return false;
                if (this.FaceData != null)
                {
                    if (!eval(this.FaceData.Overall)) return false;
                    if (this.FaceData.Specific != null)
                    {
                        foreach (var item in this.FaceData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!GenderedItem.AllMask(
                    this.BodyData,
                    eval: eval)) return false;
                if (this.Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null)
                    {
                        foreach (var item in this.Hairs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (FaceGenData != null)
                {
                    if (!eval(this.FaceGenData.Overall)) return false;
                    if (this.FaceGenData.Specific != null && !this.FaceGenData.Specific.All(eval)) return false;
                }
                if (!eval(this.SNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (this.Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Relations != null)
                {
                    if (eval(this.Relations.Overall)) return true;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (GenderedItem.Any(
                    this.Voices,
                    eval: eval)) return true;
                if (GenderedItem.Any(
                    this.DefaultHair,
                    eval: eval)) return true;
                if (eval(this.DefaultHairColor)) return true;
                if (eval(this.FaceGenMainClamp)) return true;
                if (eval(this.FaceGenFaceClamp)) return true;
                if (GenderedItem.AnyMask(
                    this.RaceStats,
                    eval: eval)) return true;
                if (this.FaceData != null)
                {
                    if (eval(this.FaceData.Overall)) return true;
                    if (this.FaceData.Specific != null)
                    {
                        foreach (var item in this.FaceData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (GenderedItem.AnyMask(
                    this.BodyData,
                    eval: eval)) return true;
                if (this.Hairs != null)
                {
                    if (eval(this.Hairs.Overall)) return true;
                    if (this.Hairs.Specific != null)
                    {
                        foreach (var item in this.Hairs.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (FaceGenData != null)
                {
                    if (eval(this.FaceGenData.Overall)) return true;
                    if (this.FaceGenData.Specific != null && this.FaceGenData.Specific.Any(eval)) return true;
                }
                if (eval(this.SNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Race.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Relations != null)
                {
                    obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RaceRelation.Mask<R>?>>?>(eval(this.Relations.Overall), Enumerable.Empty<MaskItemIndexed<R, RaceRelation.Mask<R>?>>());
                    if (Relations.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RaceRelation.Mask<R>?>>();
                        obj.Relations.Specific = l;
                        foreach (var item in Relations.Specific)
                        {
                            MaskItemIndexed<R, RaceRelation.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, RaceRelation.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Data = this.Data == null ? null : new MaskItem<R, RaceData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.Voices = GenderedItem.TranslateHelper(
                    this.Voices,
                    eval);
                obj.DefaultHair = GenderedItem.TranslateHelper(
                    this.DefaultHair,
                    eval);
                obj.DefaultHairColor = eval(this.DefaultHairColor);
                obj.FaceGenMainClamp = eval(this.FaceGenMainClamp);
                obj.FaceGenFaceClamp = eval(this.FaceGenFaceClamp);
                obj.RaceStats = GenderedItem.TranslateHelper(
                    this.RaceStats,
                    eval,
                    (m, e) => m?.Translate(e));
                if (FaceData != null)
                {
                    obj.FaceData = new MaskItem<R, IEnumerable<MaskItemIndexed<R, FacePartItem.Mask<R>?>>?>(eval(this.FaceData.Overall), Enumerable.Empty<MaskItemIndexed<R, FacePartItem.Mask<R>?>>());
                    if (FaceData.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, FacePartItem.Mask<R>?>>();
                        obj.FaceData.Specific = l;
                        foreach (var item in FaceData.Specific)
                        {
                            MaskItemIndexed<R, FacePartItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, FacePartItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.BodyData = GenderedItem.TranslateHelper(
                    this.BodyData,
                    eval,
                    (m, e) => m?.Translate(e));
                if (Hairs != null)
                {
                    obj.Hairs = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Hairs.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Hairs.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Hairs.Specific = l;
                        foreach (var item in Hairs.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Eyes != null)
                {
                    obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Eyes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Eyes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Eyes.Specific = l;
                        foreach (var item in Eyes.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.FaceGenData = this.FaceGenData == null ? null : new MaskItem<R, FaceGenData.Mask<R>?>(eval(this.FaceGenData.Overall), this.FaceGenData.Specific?.Translate(eval));
                obj.SNAM = eval(this.SNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Race.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Race.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Race.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Spells?.Overall ?? true)
                        && Spells is {} SpellsItem)
                    {
                        sb.AppendLine("Spells =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SpellsItem.Overall);
                            if (SpellsItem.Specific != null)
                            {
                                foreach (var subItem in SpellsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Relations?.Overall ?? true)
                        && Relations is {} RelationsItem)
                    {
                        sb.AppendLine("Relations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RelationsItem.Overall);
                            if (RelationsItem.Specific != null)
                            {
                                foreach (var subItem in RelationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if (Voices != null
                        && (printMask?.Voices?.Overall ?? true))
                    {
                        sb.AppendLine($"Voices => {Voices}");
                    }
                    if (DefaultHair != null
                        && (printMask?.DefaultHair?.Overall ?? true))
                    {
                        sb.AppendLine($"DefaultHair => {DefaultHair}");
                    }
                    if (printMask?.DefaultHairColor ?? true)
                    {
                        sb.AppendItem(DefaultHairColor, "DefaultHairColor");
                    }
                    if (printMask?.FaceGenMainClamp ?? true)
                    {
                        sb.AppendItem(FaceGenMainClamp, "FaceGenMainClamp");
                    }
                    if (printMask?.FaceGenFaceClamp ?? true)
                    {
                        sb.AppendItem(FaceGenFaceClamp, "FaceGenFaceClamp");
                    }
                    if (RaceStats != null
                        && (printMask?.RaceStats?.Overall ?? true))
                    {
                        sb.AppendLine($"RaceStats => {RaceStats}");
                    }
                    if ((printMask?.FaceData?.Overall ?? true)
                        && FaceData is {} FaceDataItem)
                    {
                        sb.AppendLine("FaceData =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FaceDataItem.Overall);
                            if (FaceDataItem.Specific != null)
                            {
                                foreach (var subItem in FaceDataItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (BodyData != null
                        && (printMask?.BodyData?.Overall ?? true))
                    {
                        sb.AppendLine($"BodyData => {BodyData}");
                    }
                    if ((printMask?.Hairs?.Overall ?? true)
                        && Hairs is {} HairsItem)
                    {
                        sb.AppendLine("Hairs =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(HairsItem.Overall);
                            if (HairsItem.Specific != null)
                            {
                                foreach (var subItem in HairsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Eyes?.Overall ?? true)
                        && Eyes is {} EyesItem)
                    {
                        sb.AppendLine("Eyes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EyesItem.Overall);
                            if (EyesItem.Specific != null)
                            {
                                foreach (var subItem in EyesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.FaceGenData?.Overall ?? true)
                    {
                        FaceGenData?.Print(sb);
                    }
                    if (printMask?.SNAM ?? true)
                    {
                        sb.AppendItem(SNAM, "SNAM");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>? Relations;
            public MaskItem<Exception?, RaceData.ErrorMask?>? Data;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? Voices;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? DefaultHair;
            public Exception? DefaultHairColor;
            public Exception? FaceGenMainClamp;
            public Exception? FaceGenFaceClamp;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? RaceStats;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePartItem.ErrorMask?>>?>? FaceData;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? BodyData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Hairs;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Eyes;
            public MaskItem<Exception?, FaceGenData.ErrorMask?>? FaceGenData;
            public Exception? SNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        return Name;
                    case Race_FieldIndex.Description:
                        return Description;
                    case Race_FieldIndex.Spells:
                        return Spells;
                    case Race_FieldIndex.Relations:
                        return Relations;
                    case Race_FieldIndex.Data:
                        return Data;
                    case Race_FieldIndex.Voices:
                        return Voices;
                    case Race_FieldIndex.DefaultHair:
                        return DefaultHair;
                    case Race_FieldIndex.DefaultHairColor:
                        return DefaultHairColor;
                    case Race_FieldIndex.FaceGenMainClamp:
                        return FaceGenMainClamp;
                    case Race_FieldIndex.FaceGenFaceClamp:
                        return FaceGenFaceClamp;
                    case Race_FieldIndex.RaceStats:
                        return RaceStats;
                    case Race_FieldIndex.FaceData:
                        return FaceData;
                    case Race_FieldIndex.BodyData:
                        return BodyData;
                    case Race_FieldIndex.Hairs:
                        return Hairs;
                    case Race_FieldIndex.Eyes:
                        return Eyes;
                    case Race_FieldIndex.FaceGenData:
                        return FaceGenData;
                    case Race_FieldIndex.SNAM:
                        return SNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Race_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Relations:
                        this.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, RaceData.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultHair:
                        this.DefaultHair = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.DefaultHairColor:
                        this.DefaultHairColor = ex;
                        break;
                    case Race_FieldIndex.FaceGenMainClamp:
                        this.FaceGenMainClamp = ex;
                        break;
                    case Race_FieldIndex.FaceGenFaceClamp:
                        this.FaceGenFaceClamp = ex;
                        break;
                    case Race_FieldIndex.RaceStats:
                        this.RaceStats = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.FaceData:
                        this.FaceData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePartItem.ErrorMask?>>?>(ex, null);
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Race_FieldIndex.FaceGenData:
                        this.FaceGenData = new MaskItem<Exception?, FaceGenData.ErrorMask?>(ex, null);
                        break;
                    case Race_FieldIndex.SNAM:
                        this.SNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Race_FieldIndex enu = (Race_FieldIndex)index;
                switch (enu)
                {
                    case Race_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Race_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Relations:
                        this.Relations = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, RaceData.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.Voices:
                        this.Voices = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultHair:
                        this.DefaultHair = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.DefaultHairColor:
                        this.DefaultHairColor = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FaceGenMainClamp:
                        this.FaceGenMainClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.FaceGenFaceClamp:
                        this.FaceGenFaceClamp = (Exception?)obj;
                        break;
                    case Race_FieldIndex.RaceStats:
                        this.RaceStats = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.FaceData:
                        this.FaceData = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePartItem.ErrorMask?>>?>)obj;
                        break;
                    case Race_FieldIndex.BodyData:
                        this.BodyData = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Race_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Race_FieldIndex.FaceGenData:
                        this.FaceGenData = (MaskItem<Exception?, FaceGenData.ErrorMask?>?)obj;
                        break;
                    case Race_FieldIndex.SNAM:
                        this.SNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Spells != null) return true;
                if (Relations != null) return true;
                if (Data != null) return true;
                if (Voices != null) return true;
                if (DefaultHair != null) return true;
                if (DefaultHairColor != null) return true;
                if (FaceGenMainClamp != null) return true;
                if (FaceGenFaceClamp != null) return true;
                if (RaceStats != null) return true;
                if (FaceData != null) return true;
                if (BodyData != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (FaceGenData != null) return true;
                if (SNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (Spells is {} SpellsItem)
                {
                    sb.AppendLine("Spells =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SpellsItem.Overall);
                        if (SpellsItem.Specific != null)
                        {
                            foreach (var subItem in SpellsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Relations is {} RelationsItem)
                {
                    sb.AppendLine("Relations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RelationsItem.Overall);
                        if (RelationsItem.Specific != null)
                        {
                            foreach (var subItem in RelationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Data?.Print(sb);
                if (Voices != null)
                {
                    sb.AppendLine($"Voices => {Voices}");
                }
                if (DefaultHair != null)
                {
                    sb.AppendLine($"DefaultHair => {DefaultHair}");
                }
                {
                    sb.AppendItem(DefaultHairColor, "DefaultHairColor");
                }
                {
                    sb.AppendItem(FaceGenMainClamp, "FaceGenMainClamp");
                }
                {
                    sb.AppendItem(FaceGenFaceClamp, "FaceGenFaceClamp");
                }
                if (RaceStats != null)
                {
                    sb.AppendLine($"RaceStats => {RaceStats}");
                }
                if (FaceData is {} FaceDataItem)
                {
                    sb.AppendLine("FaceData =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FaceDataItem.Overall);
                        if (FaceDataItem.Specific != null)
                        {
                            foreach (var subItem in FaceDataItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (BodyData != null)
                {
                    sb.AppendLine($"BodyData => {BodyData}");
                }
                if (Hairs is {} HairsItem)
                {
                    sb.AppendLine("Hairs =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(HairsItem.Overall);
                        if (HairsItem.Specific != null)
                        {
                            foreach (var subItem in HairsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Eyes is {} EyesItem)
                {
                    sb.AppendLine("Eyes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EyesItem.Overall);
                        if (EyesItem.Specific != null)
                        {
                            foreach (var subItem in EyesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                FaceGenData?.Print(sb);
                {
                    sb.AppendItem(SNAM, "SNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), Noggog.ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RaceRelation.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Relations?.Overall, rhs.Relations?.Overall), Noggog.ExceptionExt.Combine(this.Relations?.Specific, rhs.Relations?.Specific));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.Voices = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.Voices?.Overall, rhs.Voices?.Overall), GenderedItem.Combine(this.Voices?.Specific, rhs.Voices?.Specific));
                ret.DefaultHair = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.DefaultHair?.Overall, rhs.DefaultHair?.Overall), GenderedItem.Combine(this.DefaultHair?.Specific, rhs.DefaultHair?.Specific));
                ret.DefaultHairColor = this.DefaultHairColor.Combine(rhs.DefaultHairColor);
                ret.FaceGenMainClamp = this.FaceGenMainClamp.Combine(rhs.FaceGenMainClamp);
                ret.FaceGenFaceClamp = this.FaceGenFaceClamp.Combine(rhs.FaceGenFaceClamp);
                ret.RaceStats = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.RaceStats?.Overall, rhs.RaceStats?.Overall), GenderedItem.Combine(this.RaceStats?.Specific, rhs.RaceStats?.Specific));
                ret.FaceData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, FacePartItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.FaceData?.Overall, rhs.FaceData?.Overall), Noggog.ExceptionExt.Combine(this.FaceData?.Specific, rhs.FaceData?.Specific));
                ret.BodyData = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.BodyData?.Overall, rhs.BodyData?.Overall), GenderedItem.Combine(this.BodyData?.Specific, rhs.BodyData?.Specific));
                ret.Hairs = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Hairs?.Overall, rhs.Hairs?.Overall), Noggog.ExceptionExt.Combine(this.Hairs?.Specific, rhs.Hairs?.Specific));
                ret.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Eyes?.Overall, rhs.Eyes?.Overall), Noggog.ExceptionExt.Combine(this.Eyes?.Specific, rhs.Eyes?.Specific));
                ret.FaceGenData = this.FaceGenData.Combine(rhs.FaceGenData, (l, r) => l.Combine(r));
                ret.SNAM = this.SNAM.Combine(rhs.SNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool Spells;
            public RaceRelation.TranslationMask? Relations;
            public RaceData.TranslationMask? Data;
            public GenderedItem<bool>? Voices;
            public GenderedItem<bool>? DefaultHair;
            public bool DefaultHairColor;
            public bool FaceGenMainClamp;
            public bool FaceGenFaceClamp;
            public GenderedItem<RaceStats.TranslationMask>? RaceStats;
            public FacePartItem.TranslationMask? FaceData;
            public GenderedItem<BodyData.TranslationMask>? BodyData;
            public bool Hairs;
            public bool Eyes;
            public FaceGenData.TranslationMask? FaceGenData;
            public bool SNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Spells = defaultOn;
                this.DefaultHairColor = defaultOn;
                this.FaceGenMainClamp = defaultOn;
                this.FaceGenFaceClamp = defaultOn;
                this.Hairs = defaultOn;
                this.Eyes = defaultOn;
                this.SNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Spells, null));
                ret.Add((Relations == null ? DefaultOn : !Relations.GetCrystal().CopyNothing, Relations?.GetCrystal()));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((Voices != null || DefaultOn, null));
                ret.Add((DefaultHair != null || DefaultOn, null));
                ret.Add((DefaultHairColor, null));
                ret.Add((FaceGenMainClamp, null));
                ret.Add((FaceGenFaceClamp, null));
                ret.Add((RaceStats != null || DefaultOn, null));
                ret.Add((FaceData == null ? DefaultOn : !FaceData.GetCrystal().CopyNothing, FaceData?.GetCrystal()));
                ret.Add((BodyData != null || DefaultOn, null));
                ret.Add((Hairs, null));
                ret.Add((Eyes, null));
                ret.Add((FaceGenData != null ? FaceGenData.OnOverall : DefaultOn, FaceGenData?.GetCrystal()));
                ret.Add((SNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Race_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => RaceCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => RaceSetterCommon.Instance.RemapLinks(this, mapping);
        public Race(
            FormKey formKey,
            OblivionRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Race(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Race(IOblivionMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.OblivionRelease)
        {
        }

        public Race(IOblivionMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.OblivionRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Race>.ToString(this);
        }

        protected override Type LinkType => typeof(IRace);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRaceGetter rhs) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRaceGetter? obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Race CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Race();
            ((RaceSetterCommon)((IRaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Race item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((RaceSetterCommon)((IRaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Race GetNew()
        {
            return new Race();
        }

    }
    #endregion

    #region Interface
    public partial interface IRace :
        IFormLinkContainer,
        ILoquiObjectSetter<IRaceInternal>,
        INamed,
        INamedRequired,
        IOblivionMajorRecordInternal,
        IRaceGetter,
        IRelatable
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new String? Description { get; set; }
        new ExtendedList<IFormLinkGetter<ISpellGetter>> Spells { get; }
        new ExtendedList<RaceRelation> Relations { get; }
        new RaceData? Data { get; set; }
        new IGenderedItem<IFormLinkGetter<IRaceGetter>>? Voices { get; set; }
        new IGenderedItem<IFormLinkGetter<IHairGetter>>? DefaultHair { get; set; }
        new Byte? DefaultHairColor { get; set; }
        new Int32? FaceGenMainClamp { get; set; }
        new Int32? FaceGenFaceClamp { get; set; }
        new IGenderedItem<RaceStats>? RaceStats { get; set; }
        new ExtendedList<FacePartItem> FaceData { get; }
        new IGenderedItem<BodyData?>? BodyData { get; set; }
        new ExtendedList<IFormLinkGetter<IHairGetter>>? Hairs { get; set; }
        new ExtendedList<IFormLinkGetter<IEyeGetter>>? Eyes { get; set; }
        new FaceGenData? FaceGenData { get; set; }
        new Int16? SNAM { get; set; }
    }

    public partial interface IRaceInternal :
        IOblivionMajorRecordInternal,
        IRace,
        IRaceGetter
    {
        new IGenderedItem<IFormLinkGetter<IRaceGetter>>? Voices { get; set; }
        new IGenderedItem<IFormLinkGetter<IHairGetter>>? DefaultHair { get; set; }
        new IGenderedItem<RaceStats>? RaceStats { get; set; }
        new IGenderedItem<BodyData?>? BodyData { get; set; }
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.RACE)]
    public partial interface IRaceGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IRaceGetter>,
        IMapsToGetter<IRaceGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IRelatableGetter
    {
        static new ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        String? Description { get; }
        IReadOnlyList<IFormLinkGetter<ISpellGetter>> Spells { get; }
        IReadOnlyList<IRaceRelationGetter> Relations { get; }
        IRaceDataGetter? Data { get; }
        IGenderedItemGetter<IFormLinkGetter<IRaceGetter>>? Voices { get; }
        IGenderedItemGetter<IFormLinkGetter<IHairGetter>>? DefaultHair { get; }
        Byte? DefaultHairColor { get; }
        Int32? FaceGenMainClamp { get; }
        Int32? FaceGenFaceClamp { get; }
        IGenderedItemGetter<IRaceStatsGetter>? RaceStats { get; }
        IReadOnlyList<IFacePartItemGetter> FaceData { get; }
        IGenderedItemGetter<IBodyDataGetter?>? BodyData { get; }
        IReadOnlyList<IFormLinkGetter<IHairGetter>>? Hairs { get; }
        IReadOnlyList<IFormLinkGetter<IEyeGetter>>? Eyes { get; }
        IFaceGenDataGetter? FaceGenData { get; }
        Int16? SNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RaceMixIn
    {
        public static void Clear(this IRaceInternal item)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Race.Mask<bool> GetEqualsMask(
            this IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IRaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRaceGetter item,
            IRaceGetter rhs,
            Race.TranslationMask? equalsMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRaceInternal lhs,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RaceSetterTranslationCommon)((IRaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Race DeepCopy(
            this IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RaceSetterTranslationCommon)((IRaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Race Duplicate(
            this IRaceGetter item,
            FormKey formKey,
            Race.TranslationMask? copyMask = null)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Race Duplicate(
            this IRaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((RaceCommon)((IRaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((RaceSetterCommon)((IRaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum Race_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Description = 6,
        Spells = 7,
        Relations = 8,
        Data = 9,
        Voices = 10,
        DefaultHair = 11,
        DefaultHairColor = 12,
        FaceGenMainClamp = 13,
        FaceGenFaceClamp = 14,
        RaceStats = 15,
        FaceData = 16,
        BodyData = 17,
        Hairs = 18,
        Eyes = 19,
        FaceGenData = 20,
        SNAM = 21,
    }
    #endregion

    #region Registration
    internal partial class Race_Registration : ILoquiRegistration
    {
        public static readonly Race_Registration Instance = new Race_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(Race.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Race.ErrorMask);

        public static readonly Type ClassType = typeof(Race);

        public static readonly Type GetterType = typeof(IRaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRace);

        public static readonly Type? InternalSetterType = typeof(IRaceInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Race";

        public const string Name = "Race";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.RACE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.RACE);
            var all = RecordCollection.Factory(
                RecordTypes.RACE,
                RecordTypes.FULL,
                RecordTypes.DESC,
                RecordTypes.SPLO,
                RecordTypes.XNAM,
                RecordTypes.DATA,
                RecordTypes.VNAM,
                RecordTypes.DNAM,
                RecordTypes.CNAM,
                RecordTypes.PNAM,
                RecordTypes.UNAM,
                RecordTypes.ATTR,
                RecordTypes.NAM0,
                RecordTypes.INDX,
                RecordTypes.MODL,
                RecordTypes.ICON,
                RecordTypes.NAM1,
                RecordTypes.MNAM,
                RecordTypes.FNAM,
                RecordTypes.HNAM,
                RecordTypes.ENAM,
                RecordTypes.FGGS,
                RecordTypes.FGGA,
                RecordTypes.FGTS,
                RecordTypes.SNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(RaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class RaceSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly RaceSetterCommon Instance = new RaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRaceInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Description = default;
            item.Spells.Clear();
            item.Relations.Clear();
            item.Data = null;
            item.Voices = null;
            item.DefaultHair = null;
            item.DefaultHairColor = default;
            item.FaceGenMainClamp = default;
            item.FaceGenFaceClamp = default;
            item.RaceStats = null;
            item.FaceData.Clear();
            item.BodyData = null;
            item.Hairs = null;
            item.Eyes = null;
            item.FaceGenData = null;
            item.SNAM = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IRace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Relations.RemapLinks(mapping);
            obj.Voices?.RemapLinks(mapping);
            obj.DefaultHair?.RemapLinks(mapping);
            obj.Hairs?.RemapLinks(mapping);
            obj.Eyes?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IRaceInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Race)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class RaceCommon : OblivionMajorRecordCommon
    {
        public new static readonly RaceCommon Instance = new RaceCommon();

        public Race.Mask<bool> GetEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Race.Mask<bool>(false);
            ((RaceCommon)((IRaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRaceGetter item,
            IRaceGetter rhs,
            Race.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Voices = GenderedItem.EqualityMaskHelper(
                lhs: item.Voices,
                rhs: rhs.Voices,
                maskGetter: (l, r, i) => EqualityComparer<IFormLinkGetter<IRaceGetter>>.Default.Equals(l, r),
                include: include);
            ret.DefaultHair = GenderedItem.EqualityMaskHelper(
                lhs: item.DefaultHair,
                rhs: rhs.DefaultHair,
                maskGetter: (l, r, i) => EqualityComparer<IFormLinkGetter<IHairGetter>>.Default.Equals(l, r),
                include: include);
            ret.DefaultHairColor = item.DefaultHairColor == rhs.DefaultHairColor;
            ret.FaceGenMainClamp = item.FaceGenMainClamp == rhs.FaceGenMainClamp;
            ret.FaceGenFaceClamp = item.FaceGenFaceClamp == rhs.FaceGenFaceClamp;
            ret.RaceStats = GenderedItem.EqualityMaskHelper(
                lhs: item.RaceStats,
                rhs: rhs.RaceStats,
                maskGetter: (l, r, i) => l.GetEqualsMask(r, i),
                include: include);
            ret.FaceData = item.FaceData.CollectionEqualsHelper(
                rhs.FaceData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.BodyData = GenderedItem.EqualityMaskHelper(
                lhs: item.BodyData,
                rhs: rhs.BodyData,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.Hairs = item.Hairs.CollectionEqualsHelper(
                rhs.Hairs,
                (l, r) => object.Equals(l, r),
                include);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.FaceGenData = EqualsMaskHelper.EqualsHelper(
                item.FaceGenData,
                rhs.FaceGenData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SNAM = item.SNAM == rhs.SNAM;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IRaceGetter item,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IRaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Race.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Race =>");
            }
            else
            {
                sb.AppendLine($"{name} (Race) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IRaceGetter item,
            StructuredStringBuilder sb,
            Race.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                sb.AppendLine("Spells =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Spells)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Relations?.Overall ?? true)
            {
                sb.AppendLine("Relations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Relations)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if ((printMask?.Voices?.Overall ?? true)
                && item.Voices is {} VoicesItem)
            {
                VoicesItem?.Print(sb, "Voices");
            }
            if ((printMask?.DefaultHair?.Overall ?? true)
                && item.DefaultHair is {} DefaultHairItem)
            {
                DefaultHairItem?.Print(sb, "DefaultHair");
            }
            if ((printMask?.DefaultHairColor ?? true)
                && item.DefaultHairColor is {} DefaultHairColorItem)
            {
                sb.AppendItem(DefaultHairColorItem, "DefaultHairColor");
            }
            if ((printMask?.FaceGenMainClamp ?? true)
                && item.FaceGenMainClamp is {} FaceGenMainClampItem)
            {
                sb.AppendItem(FaceGenMainClampItem, "FaceGenMainClamp");
            }
            if ((printMask?.FaceGenFaceClamp ?? true)
                && item.FaceGenFaceClamp is {} FaceGenFaceClampItem)
            {
                sb.AppendItem(FaceGenFaceClampItem, "FaceGenFaceClamp");
            }
            if ((printMask?.RaceStats?.Overall ?? true)
                && item.RaceStats is {} RaceStatsItem)
            {
                RaceStatsItem?.Print(sb, "RaceStats");
            }
            if (printMask?.FaceData?.Overall ?? true)
            {
                sb.AppendLine("FaceData =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.FaceData)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.BodyData?.Overall ?? true)
                && item.BodyData is {} BodyDataItem)
            {
                BodyDataItem?.Print(sb, "BodyData");
            }
            if ((printMask?.Hairs?.Overall ?? true)
                && item.Hairs is {} HairsItem)
            {
                sb.AppendLine("Hairs =>");
                using (sb.Brace())
                {
                    foreach (var subItem in HairsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Eyes?.Overall ?? true)
                && item.Eyes is {} EyesItem)
            {
                sb.AppendLine("Eyes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in EyesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.FaceGenData?.Overall ?? true)
                && item.FaceGenData is {} FaceGenDataItem)
            {
                FaceGenDataItem?.Print(sb, "FaceGenData");
            }
            if ((printMask?.SNAM ?? true)
                && item.SNAM is {} SNAMItem)
            {
                sb.AppendItem(SNAMItem, "SNAM");
            }
        }
        
        public static Race_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Race_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Race_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Race_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRaceGetter? lhs,
            IRaceGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Spells) ?? true))
            {
                if (!lhs.Spells.SequenceEqualNullable(rhs.Spells)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Relations) ?? true))
            {
                if (!lhs.Relations.SequenceEqual(rhs.Relations, (l, r) => ((RaceRelationCommon)((IRaceRelationGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.Relations)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((RaceDataCommon)((IRaceDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)Race_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Voices) ?? true))
            {
                if (!Equals(lhs.Voices, rhs.Voices)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHair) ?? true))
            {
                if (!Equals(lhs.DefaultHair, rhs.DefaultHair)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColor) ?? true))
            {
                if (lhs.DefaultHairColor != rhs.DefaultHairColor) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenMainClamp) ?? true))
            {
                if (lhs.FaceGenMainClamp != rhs.FaceGenMainClamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenFaceClamp) ?? true))
            {
                if (lhs.FaceGenFaceClamp != rhs.FaceGenFaceClamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.RaceStats) ?? true))
            {
                if (!Equals(lhs.RaceStats, rhs.RaceStats)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FaceData) ?? true))
            {
                if (!lhs.FaceData.SequenceEqual(rhs.FaceData, (l, r) => ((FacePartItemCommon)((IFacePartItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Race_FieldIndex.FaceData)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.BodyData) ?? true))
            {
                if (!Equals(lhs.BodyData, rhs.BodyData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                if (!lhs.Hairs.SequenceEqualNullable(rhs.Hairs)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                if (!lhs.Eyes.SequenceEqualNullable(rhs.Eyes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FaceGenData, rhs.FaceGenData, out var lhsFaceGenData, out var rhsFaceGenData, out var isFaceGenDataEqual))
                {
                    if (!((FaceGenDataCommon)((IFaceGenDataGetter)lhsFaceGenData).CommonInstance()!).Equals(lhsFaceGenData, rhsFaceGenData, equalsMask?.GetSubCrystal((int)Race_FieldIndex.FaceGenData))) return false;
                }
                else if (!isFaceGenDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Race_FieldIndex.SNAM) ?? true))
            {
                if (lhs.SNAM != rhs.SNAM) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IRaceGetter?)lhs,
                rhs: rhs as IRaceGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IRaceGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.Spells);
            hash.Add(item.Relations);
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            if (item.Voices is {} Voicesitem)
            {
                hash.Add(HashCode.Combine(Voicesitem.Male, Voicesitem.Female));
            }
            if (item.DefaultHair is {} DefaultHairitem)
            {
                hash.Add(HashCode.Combine(DefaultHairitem.Male, DefaultHairitem.Female));
            }
            if (item.DefaultHairColor is {} DefaultHairColoritem)
            {
                hash.Add(DefaultHairColoritem);
            }
            if (item.FaceGenMainClamp is {} FaceGenMainClampitem)
            {
                hash.Add(FaceGenMainClampitem);
            }
            if (item.FaceGenFaceClamp is {} FaceGenFaceClampitem)
            {
                hash.Add(FaceGenFaceClampitem);
            }
            if (item.RaceStats is {} RaceStatsitem)
            {
                hash.Add(HashCode.Combine(RaceStatsitem.Male, RaceStatsitem.Female));
            }
            hash.Add(item.FaceData);
            if (item.BodyData is {} BodyDataitem)
            {
                hash.Add(HashCode.Combine(BodyDataitem.Male, BodyDataitem.Female));
            }
            hash.Add(item.Hairs);
            hash.Add(item.Eyes);
            if (item.FaceGenData is {} FaceGenDataitem)
            {
                hash.Add(FaceGenDataitem);
            }
            if (item.SNAM is {} SNAMitem)
            {
                hash.Add(SNAMitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Race.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IRaceGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Spells)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Relations.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Voices is {} VoicesItem)
            {
                foreach (var item in VoicesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.DefaultHair is {} DefaultHairItem)
            {
                foreach (var item in DefaultHairItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Hairs is {} HairsItem)
            {
                foreach (var item in HairsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Eyes is {} EyesItem)
            {
                foreach (var item in EyesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Race Duplicate(
            IRaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Race(formKey, default(OblivionRelease));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class RaceSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly RaceSetterTranslationCommon Instance = new RaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRaceInternal item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Spells);
                try
                {
                    item.Spells.SetTo(
                        rhs.Spells
                            .Select(b => (IFormLinkGetter<ISpellGetter>)new FormLink<ISpellGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Relations) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Relations);
                try
                {
                    item.Relations.SetTo(
                        rhs.Relations
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (rhs.Voices is not {} rhsVoicesitem)
            {
                item.Voices = null;
            }
            else
            {
                item.Voices = new GenderedItem<IFormLinkGetter<IRaceGetter>>(
                    male: new FormLink<IRaceGetter>(rhsVoicesitem.Male.FormKey),
                    female: new FormLink<IRaceGetter>(rhsVoicesitem.Female.FormKey));
            }
            if (rhs.DefaultHair is not {} rhsDefaultHairitem)
            {
                item.DefaultHair = null;
            }
            else
            {
                item.DefaultHair = new GenderedItem<IFormLinkGetter<IHairGetter>>(
                    male: new FormLink<IHairGetter>(rhsDefaultHairitem.Male.FormKey),
                    female: new FormLink<IHairGetter>(rhsDefaultHairitem.Female.FormKey));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.DefaultHairColor) ?? true))
            {
                item.DefaultHairColor = rhs.DefaultHairColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenMainClamp) ?? true))
            {
                item.FaceGenMainClamp = rhs.FaceGenMainClamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenFaceClamp) ?? true))
            {
                item.FaceGenFaceClamp = rhs.FaceGenFaceClamp;
            }
            if (rhs.RaceStats is not {} rhsRaceStatsitem)
            {
                item.RaceStats = null;
            }
            else
            {
                item.RaceStats = new GenderedItem<RaceStats>(
                    male: rhsRaceStatsitem.Male.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsRaceStatsitem.Female.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceData) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceData);
                try
                {
                    item.FaceData.SetTo(
                        rhs.FaceData
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if (rhs.BodyData is not {} rhsBodyDataitem)
            {
                item.BodyData = null;
            }
            else
            {
                item.BodyData = new GenderedItem<BodyData?>(
                    male: rhsBodyDataitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsBodyDataitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Hairs);
                try
                {
                    if ((rhs.Hairs != null))
                    {
                        item.Hairs = 
                            rhs.Hairs
                                .Select(b => (IFormLinkGetter<IHairGetter>)new FormLink<IHairGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IHairGetter>>();
                    }
                    else
                    {
                        item.Hairs = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.Eyes);
                try
                {
                    if ((rhs.Eyes != null))
                    {
                        item.Eyes = 
                            rhs.Eyes
                                .Select(b => (IFormLinkGetter<IEyeGetter>)new FormLink<IEyeGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IEyeGetter>>();
                    }
                    else
                    {
                        item.Eyes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.FaceGenData) ?? true))
            {
                errorMask?.PushIndex((int)Race_FieldIndex.FaceGenData);
                try
                {
                    if(rhs.FaceGenData is {} rhsFaceGenData)
                    {
                        item.FaceGenData = rhsFaceGenData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Race_FieldIndex.FaceGenData));
                    }
                    else
                    {
                        item.FaceGenData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Race_FieldIndex.SNAM) ?? true))
            {
                item.SNAM = rhs.SNAM;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IRace item,
            IRaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRaceInternal)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRace)item,
                rhs: (IRaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Race DeepCopy(
            IRaceGetter item,
            Race.TranslationMask? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            out Race.ErrorMask errorMask,
            Race.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Race.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Race DeepCopy(
            IRaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Race ret = (Race)((RaceCommon)((IRaceGetter)item).CommonInstance()!).GetNew();
            ((RaceSetterTranslationCommon)((IRaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Race
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class RaceBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly RaceBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IRaceGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.SPLO));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRaceRelationGetter>.Instance.Write(
                writer: writer,
                items: item.Relations,
                transl: (MutagenWriter subWriter, IRaceRelationGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((RaceRelationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.Data is {} DataItem)
            {
                ((RaceDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.Voices,
                recordType: RecordTypes.VNAM,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IRaceGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.DefaultHair,
                recordType: RecordTypes.DNAM,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IHairGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultHairColor,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FaceGenMainClamp,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FaceGenFaceClamp,
                header: translationParams.ConvertToCustom(RecordTypes.UNAM));
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.RaceStats,
                recordType: RecordTypes.ATTR,
                transl: (MutagenWriter subWriter, IRaceStatsGetter subItem) =>
                {
                    var Item = subItem;
                    ((RaceStatsBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter);
                });
            using (HeaderExport.Subrecord(writer, RecordTypes.NAM0)) { }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFacePartItemGetter>.Instance.Write(
                writer: writer,
                items: item.FaceData,
                transl: (MutagenWriter subWriter, IFacePartItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((FacePartItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.BodyData,
                markerType: RecordTypes.NAM1,
                maleMarker: RecordTypes.MNAM,
                femaleMarker: RecordTypes.FNAM,
                markerWrap: false,
                transl: (MutagenWriter subWriter, IBodyDataGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((BodyDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IHairGetter>>.Instance.Write(
                writer: writer,
                items: item.Hairs,
                recordType: translationParams.ConvertToCustom(RecordTypes.HNAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IHairGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Write(
                writer: writer,
                items: item.Eyes,
                recordType: translationParams.ConvertToCustom(RecordTypes.ENAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IEyeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.FaceGenData is {} FaceGenDataItem)
            {
                ((FaceGenDataBinaryWriteTranslation)((IBinaryItem)FaceGenDataItem).BinaryWriteTranslator).Write(
                    item: FaceGenDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.SNAM,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
        }

        public void Write(
            MutagenWriter writer,
            IRaceGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.RACE,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IRaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class RaceBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly RaceBinaryCreateTranslation Instance = new RaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.RACE;
        public static ParseResult FillBinaryRecordTypes(
            IRaceInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Race_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Race_FieldIndex.Description;
                }
                case RecordTypeInts.SPLO:
                {
                    item.Spells.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SPLO),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Race_FieldIndex.Spells;
                }
                case RecordTypeInts.XNAM:
                {
                    item.Relations.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<RaceRelation>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RaceRelation_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: RaceRelation.TryCreateFromBinary));
                    return (int)Race_FieldIndex.Relations;
                }
                case RecordTypeInts.DATA:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.RaceData.CreateFromBinary(frame: frame);
                    return (int)Race_FieldIndex.Data;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Voices = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<IFormLinkGetter<IRaceGetter>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return (int)Race_FieldIndex.Voices;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultHair = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<IFormLinkGetter<IHairGetter>>(
                        frame: frame,
                        transl: FormLinkBinaryTranslation.Instance.Parse);
                    return (int)Race_FieldIndex.DefaultHair;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultHairColor = frame.ReadUInt8();
                    return (int)Race_FieldIndex.DefaultHairColor;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceGenMainClamp = frame.ReadInt32();
                    return (int)Race_FieldIndex.FaceGenMainClamp;
                }
                case RecordTypeInts.UNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceGenFaceClamp = frame.ReadInt32();
                    return (int)Race_FieldIndex.FaceGenFaceClamp;
                }
                case RecordTypeInts.ATTR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RaceStats = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.ParseRequired<RaceStats>(
                        frame: frame,
                        transl: RaceStats.TryCreateFromBinary);
                    return (int)Race_FieldIndex.RaceStats;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.FaceData.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<FacePartItem>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: FacePartItem_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: FacePartItem.TryCreateFromBinary));
                    return (int)Race_FieldIndex.FaceData;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.BodyData = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<BodyData>(
                        frame: frame,
                        maleMarker: RecordTypes.MNAM,
                        femaleMarker: RecordTypes.FNAM,
                        transl: BodyData.TryCreateFromBinary);
                    return (int)Race_FieldIndex.BodyData;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Hairs = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IHairGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IHairGetter>>();
                    return (int)Race_FieldIndex.Hairs;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Eyes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IEyeGetter>>();
                    return (int)Race_FieldIndex.Eyes;
                }
                case RecordTypeInts.FGGS:
                case RecordTypeInts.FGGA:
                case RecordTypeInts.FGTS:
                {
                    item.FaceGenData = Mutagen.Bethesda.Oblivion.FaceGenData.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Race_FieldIndex.FaceGenData;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SNAM = frame.ReadInt16();
                    return (int)Race_FieldIndex.SNAM;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class RaceBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IRaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Race_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Race_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => RaceCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IRace);


        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISpellGetter>> Spells { get; private set; } = Array.Empty<IFormLinkGetter<ISpellGetter>>();
        public IReadOnlyList<IRaceRelationGetter> Relations { get; private set; } = Array.Empty<IRaceRelationGetter>();
        #region Data
        private RangeInt32? _DataLocation;
        public IRaceDataGetter? Data => _DataLocation.HasValue ? RaceDataBinaryOverlay.RaceDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        #region Voices
        private int? _VoicesLocation;
        public IGenderedItemGetter<IFormLinkGetter<IRaceGetter>>? Voices
        {
            get
            {
                if (!_VoicesLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_recordData, _VoicesLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IFormLinkGetter<IRaceGetter>>(
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IRaceGetter>(_package, data),
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IRaceGetter>(_package, data.Slice(4)));
            }
        }
        #endregion
        #region DefaultHair
        private int? _DefaultHairLocation;
        public IGenderedItemGetter<IFormLinkGetter<IHairGetter>>? DefaultHair
        {
            get
            {
                if (!_DefaultHairLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_recordData, _DefaultHairLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IFormLinkGetter<IHairGetter>>(
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IHairGetter>(_package, data),
                    FormLinkBinaryTranslation.Instance.OverlayFactory<IHairGetter>(_package, data.Slice(4)));
            }
        }
        #endregion
        #region DefaultHairColor
        private int? _DefaultHairColorLocation;
        public Byte? DefaultHairColor => _DefaultHairColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DefaultHairColorLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region FaceGenMainClamp
        private int? _FaceGenMainClampLocation;
        public Int32? FaceGenMainClamp => _FaceGenMainClampLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FaceGenMainClampLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region FaceGenFaceClamp
        private int? _FaceGenFaceClampLocation;
        public Int32? FaceGenFaceClamp => _FaceGenFaceClampLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FaceGenFaceClampLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region RaceStats
        private int? _RaceStatsLocation;
        public IGenderedItemGetter<IRaceStatsGetter>? RaceStats
        {
            get
            {
                if (!_RaceStatsLocation.HasValue) return default;
                var data = HeaderTranslation.ExtractSubrecordMemory(_recordData, _RaceStatsLocation.Value, _package.MetaData.Constants);
                return new GenderedItem<IRaceStatsGetter>(
                    RaceStatsBinaryOverlay.RaceStatsFactory(data, _package),
                    RaceStatsBinaryOverlay.RaceStatsFactory(data.Slice(8), _package));
            }
        }
        #endregion
        public IReadOnlyList<IFacePartItemGetter> FaceData { get; private set; } = Array.Empty<IFacePartItemGetter>();
        #region BodyData
        private IGenderedItemGetter<IBodyDataGetter?>? _BodyDataOverlay;
        public IGenderedItemGetter<IBodyDataGetter?>? BodyData => _BodyDataOverlay;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IHairGetter>>? Hairs { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IEyeGetter>>? Eyes { get; private set; }
        public IFaceGenDataGetter? FaceGenData { get; private set; }
        #region SNAM
        private int? _SNAMLocation;
        public Int16? SNAM => _SNAMLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SNAMLocation.Value, _package.MetaData.Constants)) : default(Int16?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RaceBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IRaceGetter RaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new RaceBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IRaceGetter RaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return RaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Description;
                }
                case RecordTypeInts.SPLO:
                {
                    this.Spells = BinaryOverlayList.FactoryByArray<IFormLinkGetter<ISpellGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.SPLO,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Race_FieldIndex.Spells;
                }
                case RecordTypeInts.XNAM:
                {
                    this.Relations = BinaryOverlayList.FactoryByArray<IRaceRelationGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => RaceRelationBinaryOverlay.RaceRelationFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: RaceRelation_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Race_FieldIndex.Relations;
                }
                case RecordTypeInts.DATA:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Race_FieldIndex.Data;
                }
                case RecordTypeInts.VNAM:
                {
                    _VoicesLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.Voices;
                }
                case RecordTypeInts.DNAM:
                {
                    _DefaultHairLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.DefaultHair;
                }
                case RecordTypeInts.CNAM:
                {
                    _DefaultHairColorLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.DefaultHairColor;
                }
                case RecordTypeInts.PNAM:
                {
                    _FaceGenMainClampLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.FaceGenMainClamp;
                }
                case RecordTypeInts.UNAM:
                {
                    _FaceGenFaceClampLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.FaceGenFaceClamp;
                }
                case RecordTypeInts.ATTR:
                {
                    _RaceStatsLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.RaceStats;
                }
                case RecordTypeInts.NAM0:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.FaceData = this.ParseRepeatedTypelessSubrecord<IFacePartItemGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: FacePartItem_Registration.TriggerSpecs,
                        factory: FacePartItemBinaryOverlay.FacePartItemFactory);
                    return (int)Race_FieldIndex.FaceData;
                }
                case RecordTypeInts.NAM1:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    _BodyDataOverlay = GenderedItemBinaryOverlay.FactorySkipMarkersPreRead<IBodyDataGetter>(
                        package: _package,
                        male: RecordTypes.MNAM,
                        female: RecordTypes.FNAM,
                        stream: stream,
                        creator: static (s, p, r) => BodyDataBinaryOverlay.BodyDataFactory(s, p, r),
                        translationParams: translationParams);
                    return (int)Race_FieldIndex.BodyData;
                }
                case RecordTypeInts.HNAM:
                {
                    this.Hairs = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IHairGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IHairGetter>(p, s));
                    return (int)Race_FieldIndex.Hairs;
                }
                case RecordTypeInts.ENAM:
                {
                    this.Eyes = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IEyeGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IEyeGetter>(p, s));
                    return (int)Race_FieldIndex.Eyes;
                }
                case RecordTypeInts.FGGS:
                case RecordTypeInts.FGGA:
                case RecordTypeInts.FGTS:
                {
                    this.FaceGenData = FaceGenDataBinaryOverlay.FaceGenDataFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Race_FieldIndex.FaceGenData;
                }
                case RecordTypeInts.SNAM:
                {
                    _SNAMLocation = (stream.Position - offset);
                    return (int)Race_FieldIndex.SNAM;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Race>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRaceGetter rhs) return false;
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRaceGetter? obj)
        {
            return ((RaceCommon)((IRaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RaceCommon)((IRaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

