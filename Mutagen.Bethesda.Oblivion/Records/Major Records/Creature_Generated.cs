/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Creature :
        OblivionMajorRecord,
        ICreatureInternal,
        IEquatable<ICreatureGetter>,
        ILoquiObjectSetter<Creature>
    {
        #region Ctor
        protected Creature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICreatureGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ICreatureGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ItemEntry> _Items = new ExtendedList<ItemEntry>();
        public ExtendedList<ItemEntry> Items
        {
            get => this._Items;
            init => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IItemEntryGetter> ICreatureGetter.Items => _Items;
        #endregion

        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellRecordGetter>> _Spells = new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
        public ExtendedList<IFormLinkGetter<ISpellRecordGetter>> Spells
        {
            get => this._Spells;
            init => this._Spells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>> ICreatureGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Models
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String>? _Models;
        public ExtendedList<String>? Models
        {
            get => this._Models;
            set => this._Models = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String>? ICreatureGetter.Models => _Models;
        #endregion

        #endregion
        #region NIFT
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NIFT;
        public MemorySlice<Byte>? NIFT
        {
            get => this._NIFT;
            set => this._NIFT = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? ICreatureGetter.NIFT => this.NIFT;
        #endregion
        #region Configuration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CreatureConfiguration? _Configuration;
        public CreatureConfiguration? Configuration
        {
            get => _Configuration;
            set => _Configuration = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICreatureConfigurationGetter? ICreatureGetter.Configuration => this.Configuration;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RankPlacement> _Factions = new ExtendedList<RankPlacement>();
        public ExtendedList<RankPlacement> Factions
        {
            get => this._Factions;
            init => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankPlacementGetter> ICreatureGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        private readonly IFormLinkNullable<IItemGetter> _DeathItem = new FormLinkNullable<IItemGetter>();
        public IFormLinkNullable<IItemGetter> DeathItem
        {
            get => _DeathItem;
            set => _DeathItem.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IItemGetter> ICreatureGetter.DeathItem => this.DeathItem;
        #endregion
        #region Script
        private readonly IFormLinkNullable<IScriptGetter> _Script = new FormLinkNullable<IScriptGetter>();
        public IFormLinkNullable<IScriptGetter> Script
        {
            get => _Script;
            set => _Script.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> ICreatureGetter.Script => this.Script;
        #endregion
        #region AIData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CreatureAIData? _AIData;
        public CreatureAIData? AIData
        {
            get => _AIData;
            set => _AIData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICreatureAIDataGetter? ICreatureGetter.AIData => this.AIData;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IAIPackageGetter>> _AIPackages = new ExtendedList<IFormLinkGetter<IAIPackageGetter>>();
        public ExtendedList<IFormLinkGetter<IAIPackageGetter>> AIPackages
        {
            get => this._AIPackages;
            init => this._AIPackages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IAIPackageGetter>> ICreatureGetter.AIPackages => _AIPackages;
        #endregion

        #endregion
        #region Animations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String>? _Animations;
        public ExtendedList<String>? Animations
        {
            get => this._Animations;
            set => this._Animations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String>? ICreatureGetter.Animations => _Animations;
        #endregion

        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CreatureData? _Data;
        public CreatureData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICreatureDataGetter? ICreatureGetter.Data => this.Data;
        #endregion
        #region AttackReach
        public Byte? AttackReach { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Byte? ICreatureGetter.AttackReach => this.AttackReach;
        #endregion
        #region CombatStyle
        private readonly IFormLinkNullable<ICombatStyleGetter> _CombatStyle = new FormLinkNullable<ICombatStyleGetter>();
        public IFormLinkNullable<ICombatStyleGetter> CombatStyle
        {
            get => _CombatStyle;
            set => _CombatStyle.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICombatStyleGetter> ICreatureGetter.CombatStyle => this.CombatStyle;
        #endregion
        #region TurningSpeed
        public Single? TurningSpeed { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICreatureGetter.TurningSpeed => this.TurningSpeed;
        #endregion
        #region BaseScale
        public Single? BaseScale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICreatureGetter.BaseScale => this.BaseScale;
        #endregion
        #region FootWeight
        public Single? FootWeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICreatureGetter.FootWeight => this.FootWeight;
        #endregion
        #region BloodSpray
        public String? BloodSpray { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICreatureGetter.BloodSpray => this.BloodSpray;
        #endregion
        #region BloodDecal
        public String? BloodDecal { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICreatureGetter.BloodDecal => this.BloodDecal;
        #endregion
        #region InheritsSoundFrom
        private readonly IFormLinkNullable<ICreatureGetter> _InheritsSoundFrom = new FormLinkNullable<ICreatureGetter>();
        public IFormLinkNullable<ICreatureGetter> InheritsSoundFrom
        {
            get => _InheritsSoundFrom;
            set => _InheritsSoundFrom.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICreatureGetter> ICreatureGetter.InheritsSoundFrom => this.InheritsSoundFrom;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<CreatureSound> _Sounds = new ExtendedList<CreatureSound>();
        public ExtendedList<CreatureSound> Sounds
        {
            get => this._Sounds;
            init => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ICreatureSoundGetter> ICreatureGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CreatureMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>());
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Models = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.NIFT = initialValue;
                this.Configuration = new MaskItem<TItem, CreatureConfiguration.Mask<TItem>?>(initialValue, new CreatureConfiguration.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = initialValue;
                this.Script = initialValue;
                this.AIData = new MaskItem<TItem, CreatureAIData.Mask<TItem>?>(initialValue, new CreatureAIData.Mask<TItem>(initialValue));
                this.AIPackages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Data = new MaskItem<TItem, CreatureData.Mask<TItem>?>(initialValue, new CreatureData.Mask<TItem>(initialValue));
                this.AttackReach = initialValue;
                this.CombatStyle = initialValue;
                this.TurningSpeed = initialValue;
                this.BaseScale = initialValue;
                this.FootWeight = initialValue;
                this.BloodSpray = initialValue;
                this.BloodDecal = initialValue;
                this.InheritsSoundFrom = initialValue;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Model,
                TItem Items,
                TItem Spells,
                TItem Models,
                TItem NIFT,
                TItem Configuration,
                TItem Factions,
                TItem DeathItem,
                TItem Script,
                TItem AIData,
                TItem AIPackages,
                TItem Animations,
                TItem Data,
                TItem AttackReach,
                TItem CombatStyle,
                TItem TurningSpeed,
                TItem BaseScale,
                TItem FootWeight,
                TItem BloodSpray,
                TItem BloodDecal,
                TItem InheritsSoundFrom,
                TItem Sounds)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>());
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Spells, Enumerable.Empty<(int Index, TItem Value)>());
                this.Models = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Models, Enumerable.Empty<(int Index, TItem Value)>());
                this.NIFT = NIFT;
                this.Configuration = new MaskItem<TItem, CreatureConfiguration.Mask<TItem>?>(Configuration, new CreatureConfiguration.Mask<TItem>(Configuration));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(Factions, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = DeathItem;
                this.Script = Script;
                this.AIData = new MaskItem<TItem, CreatureAIData.Mask<TItem>?>(AIData, new CreatureAIData.Mask<TItem>(AIData));
                this.AIPackages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AIPackages, Enumerable.Empty<(int Index, TItem Value)>());
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Animations, Enumerable.Empty<(int Index, TItem Value)>());
                this.Data = new MaskItem<TItem, CreatureData.Mask<TItem>?>(Data, new CreatureData.Mask<TItem>(Data));
                this.AttackReach = AttackReach;
                this.CombatStyle = CombatStyle;
                this.TurningSpeed = TurningSpeed;
                this.BaseScale = BaseScale;
                this.FootWeight = FootWeight;
                this.BloodSpray = BloodSpray;
                this.BloodDecal = BloodDecal;
                this.InheritsSoundFrom = InheritsSoundFrom;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>? Items;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Spells;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Models;
            public TItem NIFT;
            public MaskItem<TItem, CreatureConfiguration.Mask<TItem>?>? Configuration { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>? Factions;
            public TItem DeathItem;
            public TItem Script;
            public MaskItem<TItem, CreatureAIData.Mask<TItem>?>? AIData { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AIPackages;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Animations;
            public MaskItem<TItem, CreatureData.Mask<TItem>?>? Data { get; set; }
            public TItem AttackReach;
            public TItem CombatStyle;
            public TItem TurningSpeed;
            public TItem BaseScale;
            public TItem FootWeight;
            public TItem BloodSpray;
            public TItem BloodDecal;
            public TItem InheritsSoundFrom;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CreatureSound.Mask<TItem>?>>?>? Sounds;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Models, rhs.Models)) return false;
                if (!object.Equals(this.NIFT, rhs.NIFT)) return false;
                if (!object.Equals(this.Configuration, rhs.Configuration)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.AIData, rhs.AIData)) return false;
                if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
                if (!object.Equals(this.Animations, rhs.Animations)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.AttackReach, rhs.AttackReach)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.TurningSpeed, rhs.TurningSpeed)) return false;
                if (!object.Equals(this.BaseScale, rhs.BaseScale)) return false;
                if (!object.Equals(this.FootWeight, rhs.FootWeight)) return false;
                if (!object.Equals(this.BloodSpray, rhs.BloodSpray)) return false;
                if (!object.Equals(this.BloodDecal, rhs.BloodDecal)) return false;
                if (!object.Equals(this.InheritsSoundFrom, rhs.InheritsSoundFrom)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Items);
                hash.Add(this.Spells);
                hash.Add(this.Models);
                hash.Add(this.NIFT);
                hash.Add(this.Configuration);
                hash.Add(this.Factions);
                hash.Add(this.DeathItem);
                hash.Add(this.Script);
                hash.Add(this.AIData);
                hash.Add(this.AIPackages);
                hash.Add(this.Animations);
                hash.Add(this.Data);
                hash.Add(this.AttackReach);
                hash.Add(this.CombatStyle);
                hash.Add(this.TurningSpeed);
                hash.Add(this.BaseScale);
                hash.Add(this.FootWeight);
                hash.Add(this.BloodSpray);
                hash.Add(this.BloodDecal);
                hash.Add(this.InheritsSoundFrom);
                hash.Add(this.Sounds);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Models != null)
                {
                    if (!eval(this.Models.Overall)) return false;
                    if (this.Models.Specific != null)
                    {
                        foreach (var item in this.Models.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.NIFT)) return false;
                if (Configuration != null)
                {
                    if (!eval(this.Configuration.Overall)) return false;
                    if (this.Configuration.Specific != null && !this.Configuration.Specific.All(eval)) return false;
                }
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DeathItem)) return false;
                if (!eval(this.Script)) return false;
                if (AIData != null)
                {
                    if (!eval(this.AIData.Overall)) return false;
                    if (this.AIData.Specific != null && !this.AIData.Specific.All(eval)) return false;
                }
                if (this.AIPackages != null)
                {
                    if (!eval(this.AIPackages.Overall)) return false;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (!eval(this.Animations.Overall)) return false;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (!eval(this.AttackReach)) return false;
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.TurningSpeed)) return false;
                if (!eval(this.BaseScale)) return false;
                if (!eval(this.FootWeight)) return false;
                if (!eval(this.BloodSpray)) return false;
                if (!eval(this.BloodDecal)) return false;
                if (!eval(this.InheritsSoundFrom)) return false;
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Models != null)
                {
                    if (eval(this.Models.Overall)) return true;
                    if (this.Models.Specific != null)
                    {
                        foreach (var item in this.Models.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.NIFT)) return true;
                if (Configuration != null)
                {
                    if (eval(this.Configuration.Overall)) return true;
                    if (this.Configuration.Specific != null && this.Configuration.Specific.Any(eval)) return true;
                }
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DeathItem)) return true;
                if (eval(this.Script)) return true;
                if (AIData != null)
                {
                    if (eval(this.AIData.Overall)) return true;
                    if (this.AIData.Specific != null && this.AIData.Specific.Any(eval)) return true;
                }
                if (this.AIPackages != null)
                {
                    if (eval(this.AIPackages.Overall)) return true;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (eval(this.Animations.Overall)) return true;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (eval(this.AttackReach)) return true;
                if (eval(this.CombatStyle)) return true;
                if (eval(this.TurningSpeed)) return true;
                if (eval(this.BaseScale)) return true;
                if (eval(this.FootWeight)) return true;
                if (eval(this.BloodSpray)) return true;
                if (eval(this.BloodDecal)) return true;
                if (eval(this.InheritsSoundFrom)) return true;
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Creature.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ItemEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ItemEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ItemEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, ItemEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ItemEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Models != null)
                {
                    obj.Models = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Models.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Models.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Models.Specific = l;
                        foreach (var item in Models.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.NIFT = eval(this.NIFT);
                obj.Configuration = this.Configuration == null ? null : new MaskItem<R, CreatureConfiguration.Mask<R>?>(eval(this.Configuration.Overall), this.Configuration.Specific?.Translate(eval));
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement.Mask<R>?>>?>(eval(this.Factions.Overall), Enumerable.Empty<MaskItemIndexed<R, RankPlacement.Mask<R>?>>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RankPlacement.Mask<R>?>>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific)
                        {
                            MaskItemIndexed<R, RankPlacement.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, RankPlacement.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DeathItem = eval(this.DeathItem);
                obj.Script = eval(this.Script);
                obj.AIData = this.AIData == null ? null : new MaskItem<R, CreatureAIData.Mask<R>?>(eval(this.AIData.Overall), this.AIData.Specific?.Translate(eval));
                if (AIPackages != null)
                {
                    obj.AIPackages = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AIPackages.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AIPackages.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AIPackages.Specific = l;
                        foreach (var item in AIPackages.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Animations != null)
                {
                    obj.Animations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Animations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Animations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Animations.Specific = l;
                        foreach (var item in Animations.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Data = this.Data == null ? null : new MaskItem<R, CreatureData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                obj.AttackReach = eval(this.AttackReach);
                obj.CombatStyle = eval(this.CombatStyle);
                obj.TurningSpeed = eval(this.TurningSpeed);
                obj.BaseScale = eval(this.BaseScale);
                obj.FootWeight = eval(this.FootWeight);
                obj.BloodSpray = eval(this.BloodSpray);
                obj.BloodDecal = eval(this.BloodDecal);
                obj.InheritsSoundFrom = eval(this.InheritsSoundFrom);
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CreatureSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, CreatureSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, CreatureSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific)
                        {
                            MaskItemIndexed<R, CreatureSound.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, CreatureSound.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Creature.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Creature.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Creature.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        sb.AppendLine("Items =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Spells?.Overall ?? true)
                        && Spells is {} SpellsItem)
                    {
                        sb.AppendLine("Spells =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SpellsItem.Overall);
                            if (SpellsItem.Specific != null)
                            {
                                foreach (var subItem in SpellsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Models?.Overall ?? true)
                        && Models is {} ModelsItem)
                    {
                        sb.AppendLine("Models =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ModelsItem.Overall);
                            if (ModelsItem.Specific != null)
                            {
                                foreach (var subItem in ModelsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.NIFT ?? true)
                    {
                        sb.AppendItem(NIFT, "NIFT");
                    }
                    if (printMask?.Configuration?.Overall ?? true)
                    {
                        Configuration?.Print(sb);
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions is {} FactionsItem)
                    {
                        sb.AppendLine("Factions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DeathItem ?? true)
                    {
                        sb.AppendItem(DeathItem, "DeathItem");
                    }
                    if (printMask?.Script ?? true)
                    {
                        sb.AppendItem(Script, "Script");
                    }
                    if (printMask?.AIData?.Overall ?? true)
                    {
                        AIData?.Print(sb);
                    }
                    if ((printMask?.AIPackages?.Overall ?? true)
                        && AIPackages is {} AIPackagesItem)
                    {
                        sb.AppendLine("AIPackages =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AIPackagesItem.Overall);
                            if (AIPackagesItem.Specific != null)
                            {
                                foreach (var subItem in AIPackagesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Animations?.Overall ?? true)
                        && Animations is {} AnimationsItem)
                    {
                        sb.AppendLine("Animations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AnimationsItem.Overall);
                            if (AnimationsItem.Specific != null)
                            {
                                foreach (var subItem in AnimationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if (printMask?.AttackReach ?? true)
                    {
                        sb.AppendItem(AttackReach, "AttackReach");
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        sb.AppendItem(CombatStyle, "CombatStyle");
                    }
                    if (printMask?.TurningSpeed ?? true)
                    {
                        sb.AppendItem(TurningSpeed, "TurningSpeed");
                    }
                    if (printMask?.BaseScale ?? true)
                    {
                        sb.AppendItem(BaseScale, "BaseScale");
                    }
                    if (printMask?.FootWeight ?? true)
                    {
                        sb.AppendItem(FootWeight, "FootWeight");
                    }
                    if (printMask?.BloodSpray ?? true)
                    {
                        sb.AppendItem(BloodSpray, "BloodSpray");
                    }
                    if (printMask?.BloodDecal ?? true)
                    {
                        sb.AppendItem(BloodDecal, "BloodDecal");
                    }
                    if (printMask?.InheritsSoundFrom ?? true)
                    {
                        sb.AppendItem(InheritsSoundFrom, "InheritsSoundFrom");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds is {} SoundsItem)
                    {
                        sb.AppendLine("Sounds =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>? Items;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Models;
            public Exception? NIFT;
            public MaskItem<Exception?, CreatureConfiguration.ErrorMask?>? Configuration;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>? Factions;
            public Exception? DeathItem;
            public Exception? Script;
            public MaskItem<Exception?, CreatureAIData.ErrorMask?>? AIData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AIPackages;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Animations;
            public MaskItem<Exception?, CreatureData.ErrorMask?>? Data;
            public Exception? AttackReach;
            public Exception? CombatStyle;
            public Exception? TurningSpeed;
            public Exception? BaseScale;
            public Exception? FootWeight;
            public Exception? BloodSpray;
            public Exception? BloodDecal;
            public Exception? InheritsSoundFrom;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>? Sounds;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Creature_FieldIndex enu = (Creature_FieldIndex)index;
                switch (enu)
                {
                    case Creature_FieldIndex.Name:
                        return Name;
                    case Creature_FieldIndex.Model:
                        return Model;
                    case Creature_FieldIndex.Items:
                        return Items;
                    case Creature_FieldIndex.Spells:
                        return Spells;
                    case Creature_FieldIndex.Models:
                        return Models;
                    case Creature_FieldIndex.NIFT:
                        return NIFT;
                    case Creature_FieldIndex.Configuration:
                        return Configuration;
                    case Creature_FieldIndex.Factions:
                        return Factions;
                    case Creature_FieldIndex.DeathItem:
                        return DeathItem;
                    case Creature_FieldIndex.Script:
                        return Script;
                    case Creature_FieldIndex.AIData:
                        return AIData;
                    case Creature_FieldIndex.AIPackages:
                        return AIPackages;
                    case Creature_FieldIndex.Animations:
                        return Animations;
                    case Creature_FieldIndex.Data:
                        return Data;
                    case Creature_FieldIndex.AttackReach:
                        return AttackReach;
                    case Creature_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case Creature_FieldIndex.TurningSpeed:
                        return TurningSpeed;
                    case Creature_FieldIndex.BaseScale:
                        return BaseScale;
                    case Creature_FieldIndex.FootWeight:
                        return FootWeight;
                    case Creature_FieldIndex.BloodSpray:
                        return BloodSpray;
                    case Creature_FieldIndex.BloodDecal:
                        return BloodDecal;
                    case Creature_FieldIndex.InheritsSoundFrom:
                        return InheritsSoundFrom;
                    case Creature_FieldIndex.Sounds:
                        return Sounds;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Creature_FieldIndex enu = (Creature_FieldIndex)index;
                switch (enu)
                {
                    case Creature_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Creature_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Creature_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Models:
                        this.Models = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.NIFT:
                        this.NIFT = ex;
                        break;
                    case Creature_FieldIndex.Configuration:
                        this.Configuration = new MaskItem<Exception?, CreatureConfiguration.ErrorMask?>(ex, null);
                        break;
                    case Creature_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Creature_FieldIndex.DeathItem:
                        this.DeathItem = ex;
                        break;
                    case Creature_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case Creature_FieldIndex.AIData:
                        this.AIData = new MaskItem<Exception?, CreatureAIData.ErrorMask?>(ex, null);
                        break;
                    case Creature_FieldIndex.AIPackages:
                        this.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Animations:
                        this.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Creature_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, CreatureData.ErrorMask?>(ex, null);
                        break;
                    case Creature_FieldIndex.AttackReach:
                        this.AttackReach = ex;
                        break;
                    case Creature_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case Creature_FieldIndex.TurningSpeed:
                        this.TurningSpeed = ex;
                        break;
                    case Creature_FieldIndex.BaseScale:
                        this.BaseScale = ex;
                        break;
                    case Creature_FieldIndex.FootWeight:
                        this.FootWeight = ex;
                        break;
                    case Creature_FieldIndex.BloodSpray:
                        this.BloodSpray = ex;
                        break;
                    case Creature_FieldIndex.BloodDecal:
                        this.BloodDecal = ex;
                        break;
                    case Creature_FieldIndex.InheritsSoundFrom:
                        this.InheritsSoundFrom = ex;
                        break;
                    case Creature_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Creature_FieldIndex enu = (Creature_FieldIndex)index;
                switch (enu)
                {
                    case Creature_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Creature_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>)obj;
                        break;
                    case Creature_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.Models:
                        this.Models = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.NIFT:
                        this.NIFT = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Configuration:
                        this.Configuration = (MaskItem<Exception?, CreatureConfiguration.ErrorMask?>?)obj;
                        break;
                    case Creature_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Creature_FieldIndex.DeathItem:
                        this.DeathItem = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.AIData:
                        this.AIData = (MaskItem<Exception?, CreatureAIData.ErrorMask?>?)obj;
                        break;
                    case Creature_FieldIndex.AIPackages:
                        this.AIPackages = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.Animations:
                        this.Animations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Creature_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, CreatureData.ErrorMask?>?)obj;
                        break;
                    case Creature_FieldIndex.AttackReach:
                        this.AttackReach = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.TurningSpeed:
                        this.TurningSpeed = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BaseScale:
                        this.BaseScale = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.FootWeight:
                        this.FootWeight = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BloodSpray:
                        this.BloodSpray = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.BloodDecal:
                        this.BloodDecal = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.InheritsSoundFrom:
                        this.InheritsSoundFrom = (Exception?)obj;
                        break;
                    case Creature_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Items != null) return true;
                if (Spells != null) return true;
                if (Models != null) return true;
                if (NIFT != null) return true;
                if (Configuration != null) return true;
                if (Factions != null) return true;
                if (DeathItem != null) return true;
                if (Script != null) return true;
                if (AIData != null) return true;
                if (AIPackages != null) return true;
                if (Animations != null) return true;
                if (Data != null) return true;
                if (AttackReach != null) return true;
                if (CombatStyle != null) return true;
                if (TurningSpeed != null) return true;
                if (BaseScale != null) return true;
                if (FootWeight != null) return true;
                if (BloodSpray != null) return true;
                if (BloodDecal != null) return true;
                if (InheritsSoundFrom != null) return true;
                if (Sounds != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                if (Items is {} ItemsItem)
                {
                    sb.AppendLine("Items =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Spells is {} SpellsItem)
                {
                    sb.AppendLine("Spells =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SpellsItem.Overall);
                        if (SpellsItem.Specific != null)
                        {
                            foreach (var subItem in SpellsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Models is {} ModelsItem)
                {
                    sb.AppendLine("Models =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ModelsItem.Overall);
                        if (ModelsItem.Specific != null)
                        {
                            foreach (var subItem in ModelsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(NIFT, "NIFT");
                }
                Configuration?.Print(sb);
                if (Factions is {} FactionsItem)
                {
                    sb.AppendLine("Factions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DeathItem, "DeathItem");
                }
                {
                    sb.AppendItem(Script, "Script");
                }
                AIData?.Print(sb);
                if (AIPackages is {} AIPackagesItem)
                {
                    sb.AppendLine("AIPackages =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AIPackagesItem.Overall);
                        if (AIPackagesItem.Specific != null)
                        {
                            foreach (var subItem in AIPackagesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Animations is {} AnimationsItem)
                {
                    sb.AppendLine("Animations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AnimationsItem.Overall);
                        if (AnimationsItem.Specific != null)
                        {
                            foreach (var subItem in AnimationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                Data?.Print(sb);
                {
                    sb.AppendItem(AttackReach, "AttackReach");
                }
                {
                    sb.AppendItem(CombatStyle, "CombatStyle");
                }
                {
                    sb.AppendItem(TurningSpeed, "TurningSpeed");
                }
                {
                    sb.AppendItem(BaseScale, "BaseScale");
                }
                {
                    sb.AppendItem(FootWeight, "FootWeight");
                }
                {
                    sb.AppendItem(BloodSpray, "BloodSpray");
                }
                {
                    sb.AppendItem(BloodDecal, "BloodDecal");
                }
                {
                    sb.AppendItem(InheritsSoundFrom, "InheritsSoundFrom");
                }
                if (Sounds is {} SoundsItem)
                {
                    sb.AppendLine("Sounds =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), Noggog.ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), Noggog.ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Models = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Models?.Overall, rhs.Models?.Overall), Noggog.ExceptionExt.Combine(this.Models?.Specific, rhs.Models?.Specific));
                ret.NIFT = this.NIFT.Combine(rhs.NIFT);
                ret.Configuration = this.Configuration.Combine(rhs.Configuration, (l, r) => l.Combine(r));
                ret.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), Noggog.ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
                ret.Script = this.Script.Combine(rhs.Script);
                ret.AIData = this.AIData.Combine(rhs.AIData, (l, r) => l.Combine(r));
                ret.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AIPackages?.Overall, rhs.AIPackages?.Overall), Noggog.ExceptionExt.Combine(this.AIPackages?.Specific, rhs.AIPackages?.Specific));
                ret.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Animations?.Overall, rhs.Animations?.Overall), Noggog.ExceptionExt.Combine(this.Animations?.Specific, rhs.Animations?.Specific));
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.AttackReach = this.AttackReach.Combine(rhs.AttackReach);
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.TurningSpeed = this.TurningSpeed.Combine(rhs.TurningSpeed);
                ret.BaseScale = this.BaseScale.Combine(rhs.BaseScale);
                ret.FootWeight = this.FootWeight.Combine(rhs.FootWeight);
                ret.BloodSpray = this.BloodSpray.Combine(rhs.BloodSpray);
                ret.BloodDecal = this.BloodDecal.Combine(rhs.BloodDecal);
                ret.InheritsSoundFrom = this.InheritsSoundFrom.Combine(rhs.InheritsSoundFrom);
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CreatureSound.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), Noggog.ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public Model.TranslationMask? Model;
            public ItemEntry.TranslationMask? Items;
            public bool Spells;
            public bool Models;
            public bool NIFT;
            public CreatureConfiguration.TranslationMask? Configuration;
            public RankPlacement.TranslationMask? Factions;
            public bool DeathItem;
            public bool Script;
            public CreatureAIData.TranslationMask? AIData;
            public bool AIPackages;
            public bool Animations;
            public CreatureData.TranslationMask? Data;
            public bool AttackReach;
            public bool CombatStyle;
            public bool TurningSpeed;
            public bool BaseScale;
            public bool FootWeight;
            public bool BloodSpray;
            public bool BloodDecal;
            public bool InheritsSoundFrom;
            public CreatureSound.TranslationMask? Sounds;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Spells = defaultOn;
                this.Models = defaultOn;
                this.NIFT = defaultOn;
                this.DeathItem = defaultOn;
                this.Script = defaultOn;
                this.AIPackages = defaultOn;
                this.Animations = defaultOn;
                this.AttackReach = defaultOn;
                this.CombatStyle = defaultOn;
                this.TurningSpeed = defaultOn;
                this.BaseScale = defaultOn;
                this.FootWeight = defaultOn;
                this.BloodSpray = defaultOn;
                this.BloodDecal = defaultOn;
                this.InheritsSoundFrom = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((Spells, null));
                ret.Add((Models, null));
                ret.Add((NIFT, null));
                ret.Add((Configuration != null ? Configuration.OnOverall : DefaultOn, Configuration?.GetCrystal()));
                ret.Add((Factions == null ? DefaultOn : !Factions.GetCrystal().CopyNothing, Factions?.GetCrystal()));
                ret.Add((DeathItem, null));
                ret.Add((Script, null));
                ret.Add((AIData != null ? AIData.OnOverall : DefaultOn, AIData?.GetCrystal()));
                ret.Add((AIPackages, null));
                ret.Add((Animations, null));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((AttackReach, null));
                ret.Add((CombatStyle, null));
                ret.Add((TurningSpeed, null));
                ret.Add((BaseScale, null));
                ret.Add((FootWeight, null));
                ret.Add((BloodSpray, null));
                ret.Add((BloodDecal, null));
                ret.Add((InheritsSoundFrom, null));
                ret.Add((Sounds == null ? DefaultOn : !Sounds.GetCrystal().CopyNothing, Sounds?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Creature_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CreatureCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CreatureSetterCommon.Instance.RemapLinks(this, mapping);
        public Creature(
            FormKey formKey,
            OblivionRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Creature(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Creature(IOblivionMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.OblivionRelease)
        {
        }

        public Creature(IOblivionMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.OblivionRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Creature>.ToString(this);
        }

        protected override Type LinkType => typeof(ICreature);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICreatureGetter rhs) return false;
            return ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICreatureGetter? obj)
        {
            return ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Creature CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Creature();
            ((CreatureSetterCommon)((ICreatureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Creature item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CreatureSetterCommon)((ICreatureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Creature GetNew()
        {
            return new Creature();
        }

    }
    #endregion

    #region Interface
    public partial interface ICreature :
        ICreatureGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICreatureInternal>,
        IModeled,
        INamed,
        INamedRequired,
        INpcRecord,
        INpcSpawn,
        IOblivionMajorRecordInternal
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new ExtendedList<ItemEntry> Items { get; }
        new ExtendedList<IFormLinkGetter<ISpellRecordGetter>> Spells { get; }
        new ExtendedList<String>? Models { get; set; }
        new MemorySlice<Byte>? NIFT { get; set; }
        new CreatureConfiguration? Configuration { get; set; }
        new ExtendedList<RankPlacement> Factions { get; }
        new IFormLinkNullable<IItemGetter> DeathItem { get; set; }
        new IFormLinkNullable<IScriptGetter> Script { get; set; }
        new CreatureAIData? AIData { get; set; }
        new ExtendedList<IFormLinkGetter<IAIPackageGetter>> AIPackages { get; }
        new ExtendedList<String>? Animations { get; set; }
        new CreatureData? Data { get; set; }
        new Byte? AttackReach { get; set; }
        new IFormLinkNullable<ICombatStyleGetter> CombatStyle { get; set; }
        new Single? TurningSpeed { get; set; }
        new Single? BaseScale { get; set; }
        new Single? FootWeight { get; set; }
        new String? BloodSpray { get; set; }
        new String? BloodDecal { get; set; }
        new IFormLinkNullable<ICreatureGetter> InheritsSoundFrom { get; set; }
        new ExtendedList<CreatureSound> Sounds { get; }
    }

    public partial interface ICreatureInternal :
        IOblivionMajorRecordInternal,
        ICreature,
        ICreatureGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.CREA)]
    public partial interface ICreatureGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ICreatureGetter>,
        IMapsToGetter<ICreatureGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        INpcRecordGetter,
        INpcSpawnGetter
    {
        static new ILoquiRegistration StaticRegistration => Creature_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IReadOnlyList<IItemEntryGetter> Items { get; }
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>> Spells { get; }
        IReadOnlyList<String>? Models { get; }
        ReadOnlyMemorySlice<Byte>? NIFT { get; }
        ICreatureConfigurationGetter? Configuration { get; }
        IReadOnlyList<IRankPlacementGetter> Factions { get; }
        IFormLinkNullableGetter<IItemGetter> DeathItem { get; }
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        ICreatureAIDataGetter? AIData { get; }
        IReadOnlyList<IFormLinkGetter<IAIPackageGetter>> AIPackages { get; }
        IReadOnlyList<String>? Animations { get; }
        ICreatureDataGetter? Data { get; }
        Byte? AttackReach { get; }
        IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle { get; }
        Single? TurningSpeed { get; }
        Single? BaseScale { get; }
        Single? FootWeight { get; }
        String? BloodSpray { get; }
        String? BloodDecal { get; }
        IFormLinkNullableGetter<ICreatureGetter> InheritsSoundFrom { get; }
        IReadOnlyList<ICreatureSoundGetter> Sounds { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CreatureMixIn
    {
        public static void Clear(this ICreatureInternal item)
        {
            ((CreatureSetterCommon)((ICreatureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Creature.Mask<bool> GetEqualsMask(
            this ICreatureGetter item,
            ICreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICreatureGetter item,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICreatureGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICreatureGetter item,
            ICreatureGetter rhs,
            Creature.TranslationMask? equalsMask = null)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICreatureInternal lhs,
            ICreatureGetter rhs,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CreatureSetterTranslationCommon)((ICreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Creature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICreatureInternal lhs,
            ICreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CreatureSetterTranslationCommon)((ICreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Creature DeepCopy(
            this ICreatureGetter item,
            Creature.TranslationMask? copyMask = null)
        {
            return ((CreatureSetterTranslationCommon)((ICreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Creature DeepCopy(
            this ICreatureGetter item,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? copyMask = null)
        {
            return ((CreatureSetterTranslationCommon)((ICreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Creature DeepCopy(
            this ICreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CreatureSetterTranslationCommon)((ICreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Creature Duplicate(
            this ICreatureGetter item,
            FormKey formKey,
            Creature.TranslationMask? copyMask = null)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Creature Duplicate(
            this ICreatureGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICreatureInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CreatureSetterCommon)((ICreatureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum Creature_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Items = 7,
        Spells = 8,
        Models = 9,
        NIFT = 10,
        Configuration = 11,
        Factions = 12,
        DeathItem = 13,
        Script = 14,
        AIData = 15,
        AIPackages = 16,
        Animations = 17,
        Data = 18,
        AttackReach = 19,
        CombatStyle = 20,
        TurningSpeed = 21,
        BaseScale = 22,
        FootWeight = 23,
        BloodSpray = 24,
        BloodDecal = 25,
        InheritsSoundFrom = 26,
        Sounds = 27,
    }
    #endregion

    #region Registration
    internal partial class Creature_Registration : ILoquiRegistration
    {
        public static readonly Creature_Registration Instance = new Creature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 23;

        public const ushort FieldCount = 28;

        public static readonly Type MaskType = typeof(Creature.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Creature.ErrorMask);

        public static readonly Type ClassType = typeof(Creature);

        public static readonly Type GetterType = typeof(ICreatureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICreature);

        public static readonly Type? InternalSetterType = typeof(ICreatureInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Creature";

        public const string Name = "Creature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CREA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CREA);
            var all = RecordCollection.Factory(
                RecordTypes.CREA,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.CNTO,
                RecordTypes.SPLO,
                RecordTypes.NIFZ,
                RecordTypes.NIFT,
                RecordTypes.ACBS,
                RecordTypes.SNAM,
                RecordTypes.INAM,
                RecordTypes.SCRI,
                RecordTypes.AIDT,
                RecordTypes.PKID,
                RecordTypes.KFFZ,
                RecordTypes.DATA,
                RecordTypes.RNAM,
                RecordTypes.ZNAM,
                RecordTypes.TNAM,
                RecordTypes.BNAM,
                RecordTypes.WNAM,
                RecordTypes.NAM0,
                RecordTypes.NAM1,
                RecordTypes.CSCR,
                RecordTypes.CSDT,
                RecordTypes.CSDI,
                RecordTypes.CSDC);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CreatureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CreatureSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly CreatureSetterCommon Instance = new CreatureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICreatureInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Items.Clear();
            item.Spells.Clear();
            item.Models = null;
            item.NIFT = default;
            item.Configuration = null;
            item.Factions.Clear();
            item.DeathItem.Clear();
            item.Script.Clear();
            item.AIData = null;
            item.AIPackages.Clear();
            item.Animations = null;
            item.Data = null;
            item.AttackReach = default;
            item.CombatStyle.Clear();
            item.TurningSpeed = default;
            item.BaseScale = default;
            item.FootWeight = default;
            item.BloodSpray = default;
            item.BloodDecal = default;
            item.InheritsSoundFrom.Clear();
            item.Sounds.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ICreatureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICreatureInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ICreature obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Items.RemapLinks(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.DeathItem.Relink(mapping);
            obj.Script.Relink(mapping);
            obj.AIPackages.RemapLinks(mapping);
            obj.CombatStyle.Relink(mapping);
            obj.InheritsSoundFrom.Relink(mapping);
            obj.Sounds.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICreatureInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ICreatureInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CreatureBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CreatureBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Creature)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Creature)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class CreatureCommon : OblivionMajorRecordCommon
    {
        public new static readonly CreatureCommon Instance = new CreatureCommon();

        public Creature.Mask<bool> GetEqualsMask(
            ICreatureGetter item,
            ICreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Creature.Mask<bool>(false);
            ((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICreatureGetter item,
            ICreatureGetter rhs,
            Creature.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Models = item.Models.CollectionEqualsHelper(
                rhs.Models,
                (l, r) => string.Equals(l, r),
                include);
            ret.NIFT = MemorySliceExt.SequenceEqual(item.NIFT, rhs.NIFT);
            ret.Configuration = EqualsMaskHelper.EqualsHelper(
                item.Configuration,
                rhs.Configuration,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = item.DeathItem.Equals(rhs.DeathItem);
            ret.Script = item.Script.Equals(rhs.Script);
            ret.AIData = EqualsMaskHelper.EqualsHelper(
                item.AIData,
                rhs.AIData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AIPackages = item.AIPackages.CollectionEqualsHelper(
                rhs.AIPackages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Animations = item.Animations.CollectionEqualsHelper(
                rhs.Animations,
                (l, r) => string.Equals(l, r),
                include);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AttackReach = item.AttackReach == rhs.AttackReach;
            ret.CombatStyle = item.CombatStyle.Equals(rhs.CombatStyle);
            ret.TurningSpeed = item.TurningSpeed.EqualsWithin(rhs.TurningSpeed);
            ret.BaseScale = item.BaseScale.EqualsWithin(rhs.BaseScale);
            ret.FootWeight = item.FootWeight.EqualsWithin(rhs.FootWeight);
            ret.BloodSpray = string.Equals(item.BloodSpray, rhs.BloodSpray);
            ret.BloodDecal = string.Equals(item.BloodDecal, rhs.BloodDecal);
            ret.InheritsSoundFrom = item.InheritsSoundFrom.Equals(rhs.InheritsSoundFrom);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ICreatureGetter item,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICreatureGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Creature.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Creature =>");
            }
            else
            {
                sb.AppendLine($"{name} (Creature) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICreatureGetter item,
            StructuredStringBuilder sb,
            Creature.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                sb.AppendLine("Items =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Items)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                sb.AppendLine("Spells =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Spells)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Models?.Overall ?? true)
                && item.Models is {} ModelsItem)
            {
                sb.AppendLine("Models =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ModelsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if ((printMask?.NIFT ?? true)
                && item.NIFT is {} NIFTItem)
            {
                sb.AppendLine($"NIFT => {SpanExt.ToHexString(NIFTItem)}");
            }
            if ((printMask?.Configuration?.Overall ?? true)
                && item.Configuration is {} ConfigurationItem)
            {
                ConfigurationItem?.Print(sb, "Configuration");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                sb.AppendLine("Factions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Factions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.DeathItem ?? true)
            {
                sb.AppendItem(item.DeathItem.FormKeyNullable, "DeathItem");
            }
            if (printMask?.Script ?? true)
            {
                sb.AppendItem(item.Script.FormKeyNullable, "Script");
            }
            if ((printMask?.AIData?.Overall ?? true)
                && item.AIData is {} AIDataItem)
            {
                AIDataItem?.Print(sb, "AIData");
            }
            if (printMask?.AIPackages?.Overall ?? true)
            {
                sb.AppendLine("AIPackages =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.AIPackages)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Animations?.Overall ?? true)
                && item.Animations is {} AnimationsItem)
            {
                sb.AppendLine("Animations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AnimationsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if ((printMask?.AttackReach ?? true)
                && item.AttackReach is {} AttackReachItem)
            {
                sb.AppendItem(AttackReachItem, "AttackReach");
            }
            if (printMask?.CombatStyle ?? true)
            {
                sb.AppendItem(item.CombatStyle.FormKeyNullable, "CombatStyle");
            }
            if ((printMask?.TurningSpeed ?? true)
                && item.TurningSpeed is {} TurningSpeedItem)
            {
                sb.AppendItem(TurningSpeedItem, "TurningSpeed");
            }
            if ((printMask?.BaseScale ?? true)
                && item.BaseScale is {} BaseScaleItem)
            {
                sb.AppendItem(BaseScaleItem, "BaseScale");
            }
            if ((printMask?.FootWeight ?? true)
                && item.FootWeight is {} FootWeightItem)
            {
                sb.AppendItem(FootWeightItem, "FootWeight");
            }
            if ((printMask?.BloodSpray ?? true)
                && item.BloodSpray is {} BloodSprayItem)
            {
                sb.AppendItem(BloodSprayItem, "BloodSpray");
            }
            if ((printMask?.BloodDecal ?? true)
                && item.BloodDecal is {} BloodDecalItem)
            {
                sb.AppendItem(BloodDecalItem, "BloodDecal");
            }
            if (printMask?.InheritsSoundFrom ?? true)
            {
                sb.AppendItem(item.InheritsSoundFrom.FormKeyNullable, "InheritsSoundFrom");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                sb.AppendLine("Sounds =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Sounds)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Creature_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Creature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Creature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Creature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICreatureGetter? lhs,
            ICreatureGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Creature_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqual(rhs.Items, (l, r) => ((ItemEntryCommon)((IItemEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Creature_FieldIndex.Items)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Spells) ?? true))
            {
                if (!lhs.Spells.SequenceEqualNullable(rhs.Spells)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Models) ?? true))
            {
                if (!lhs.Models.SequenceEqualNullable(rhs.Models)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.NIFT) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NIFT, rhs.NIFT)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Configuration) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Configuration, rhs.Configuration, out var lhsConfiguration, out var rhsConfiguration, out var isConfigurationEqual))
                {
                    if (!((CreatureConfigurationCommon)((ICreatureConfigurationGetter)lhsConfiguration).CommonInstance()!).Equals(lhsConfiguration, rhsConfiguration, equalsMask?.GetSubCrystal((int)Creature_FieldIndex.Configuration))) return false;
                }
                else if (!isConfigurationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Factions) ?? true))
            {
                if (!lhs.Factions.SequenceEqual(rhs.Factions, (l, r) => ((RankPlacementCommon)((IRankPlacementGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Creature_FieldIndex.Factions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.DeathItem) ?? true))
            {
                if (!lhs.DeathItem.Equals(rhs.DeathItem)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Script) ?? true))
            {
                if (!lhs.Script.Equals(rhs.Script)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.AIData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AIData, rhs.AIData, out var lhsAIData, out var rhsAIData, out var isAIDataEqual))
                {
                    if (!((CreatureAIDataCommon)((ICreatureAIDataGetter)lhsAIData).CommonInstance()!).Equals(lhsAIData, rhsAIData, equalsMask?.GetSubCrystal((int)Creature_FieldIndex.AIData))) return false;
                }
                else if (!isAIDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.AIPackages) ?? true))
            {
                if (!lhs.AIPackages.SequenceEqualNullable(rhs.AIPackages)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Animations) ?? true))
            {
                if (!lhs.Animations.SequenceEqualNullable(rhs.Animations)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((CreatureDataCommon)((ICreatureDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)Creature_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.AttackReach) ?? true))
            {
                if (lhs.AttackReach != rhs.AttackReach) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.CombatStyle) ?? true))
            {
                if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.TurningSpeed) ?? true))
            {
                if (!lhs.TurningSpeed.EqualsWithin(rhs.TurningSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.BaseScale) ?? true))
            {
                if (!lhs.BaseScale.EqualsWithin(rhs.BaseScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.FootWeight) ?? true))
            {
                if (!lhs.FootWeight.EqualsWithin(rhs.FootWeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodSpray) ?? true))
            {
                if (!string.Equals(lhs.BloodSpray, rhs.BloodSpray)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodDecal) ?? true))
            {
                if (!string.Equals(lhs.BloodDecal, rhs.BloodDecal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.InheritsSoundFrom) ?? true))
            {
                if (!lhs.InheritsSoundFrom.Equals(rhs.InheritsSoundFrom)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Creature_FieldIndex.Sounds) ?? true))
            {
                if (!lhs.Sounds.SequenceEqual(rhs.Sounds, (l, r) => ((CreatureSoundCommon)((ICreatureSoundGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Creature_FieldIndex.Sounds)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICreatureGetter?)lhs,
                rhs: rhs as ICreatureGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICreatureGetter?)lhs,
                rhs: rhs as ICreatureGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ICreatureGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.Items);
            hash.Add(item.Spells);
            hash.Add(item.Models);
            if (item.NIFT is {} NIFTItem)
            {
                hash.Add(NIFTItem);
            }
            if (item.Configuration is {} Configurationitem)
            {
                hash.Add(Configurationitem);
            }
            hash.Add(item.Factions);
            hash.Add(item.DeathItem);
            hash.Add(item.Script);
            if (item.AIData is {} AIDataitem)
            {
                hash.Add(AIDataitem);
            }
            hash.Add(item.AIPackages);
            hash.Add(item.Animations);
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            if (item.AttackReach is {} AttackReachitem)
            {
                hash.Add(AttackReachitem);
            }
            hash.Add(item.CombatStyle);
            if (item.TurningSpeed is {} TurningSpeeditem)
            {
                hash.Add(TurningSpeeditem);
            }
            if (item.BaseScale is {} BaseScaleitem)
            {
                hash.Add(BaseScaleitem);
            }
            if (item.FootWeight is {} FootWeightitem)
            {
                hash.Add(FootWeightitem);
            }
            if (item.BloodSpray is {} BloodSprayitem)
            {
                hash.Add(BloodSprayitem);
            }
            if (item.BloodDecal is {} BloodDecalitem)
            {
                hash.Add(BloodDecalitem);
            }
            hash.Add(item.InheritsSoundFrom);
            hash.Add(item.Sounds);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ICreatureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICreatureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Creature.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICreatureGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Items.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Spells)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Factions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.DeathItem, out var DeathItemInfo))
            {
                yield return DeathItemInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Script, out var ScriptInfo))
            {
                yield return ScriptInfo;
            }
            foreach (var item in obj.AIPackages)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.CombatStyle, out var CombatStyleInfo))
            {
                yield return CombatStyleInfo;
            }
            if (FormLinkInformation.TryFactory(obj.InheritsSoundFrom, out var InheritsSoundFromInfo))
            {
                yield return InheritsSoundFromInfo;
            }
            foreach (var item in obj.Sounds.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public Creature Duplicate(
            ICreatureGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Creature(formKey, default(OblivionRelease));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICreatureGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICreatureGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class CreatureSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly CreatureSetterTranslationCommon Instance = new CreatureSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICreatureInternal item,
            ICreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICreature item,
            ICreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Creature_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Items);
                try
                {
                    item.Items.SetTo(
                        rhs.Items
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Spells);
                try
                {
                    item.Spells.SetTo(
                        rhs.Spells
                            .Select(b => (IFormLinkGetter<ISpellRecordGetter>)new FormLink<ISpellRecordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Models) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Models);
                try
                {
                    if ((rhs.Models != null))
                    {
                        item.Models = 
                            rhs.Models
                            .ToExtendedList<String>();
                    }
                    else
                    {
                        item.Models = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.NIFT) ?? true))
            {
                if(rhs.NIFT is {} NIFTrhs)
                {
                    item.NIFT = NIFTrhs.ToArray();
                }
                else
                {
                    item.NIFT = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Configuration) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Configuration);
                try
                {
                    if(rhs.Configuration is {} rhsConfiguration)
                    {
                        item.Configuration = rhsConfiguration.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Creature_FieldIndex.Configuration));
                    }
                    else
                    {
                        item.Configuration = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Factions);
                try
                {
                    item.Factions.SetTo(
                        rhs.Factions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.DeathItem) ?? true))
            {
                item.DeathItem.SetTo(rhs.DeathItem.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Script) ?? true))
            {
                item.Script.SetTo(rhs.Script.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.AIData) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.AIData);
                try
                {
                    if(rhs.AIData is {} rhsAIData)
                    {
                        item.AIData = rhsAIData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Creature_FieldIndex.AIData));
                    }
                    else
                    {
                        item.AIData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.AIPackages) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.AIPackages);
                try
                {
                    item.AIPackages.SetTo(
                        rhs.AIPackages
                            .Select(b => (IFormLinkGetter<IAIPackageGetter>)new FormLink<IAIPackageGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Animations) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Animations);
                try
                {
                    if ((rhs.Animations != null))
                    {
                        item.Animations = 
                            rhs.Animations
                            .ToExtendedList<String>();
                    }
                    else
                    {
                        item.Animations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Creature_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.AttackReach) ?? true))
            {
                item.AttackReach = rhs.AttackReach;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle.SetTo(rhs.CombatStyle.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.TurningSpeed) ?? true))
            {
                item.TurningSpeed = rhs.TurningSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BaseScale) ?? true))
            {
                item.BaseScale = rhs.BaseScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.FootWeight) ?? true))
            {
                item.FootWeight = rhs.FootWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodSpray) ?? true))
            {
                item.BloodSpray = rhs.BloodSpray;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.BloodDecal) ?? true))
            {
                item.BloodDecal = rhs.BloodDecal;
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.InheritsSoundFrom) ?? true))
            {
                item.InheritsSoundFrom.SetTo(rhs.InheritsSoundFrom.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Creature_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)Creature_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetTo(
                        rhs.Sounds
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICreature item,
            ICreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICreatureInternal)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICreature)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICreatureInternal)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICreature)item,
                rhs: (ICreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Creature DeepCopy(
            ICreatureGetter item,
            Creature.TranslationMask? copyMask = null)
        {
            Creature ret = (Creature)((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetNew();
            ((CreatureSetterTranslationCommon)((ICreatureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Creature DeepCopy(
            ICreatureGetter item,
            out Creature.ErrorMask errorMask,
            Creature.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Creature ret = (Creature)((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetNew();
            ((CreatureSetterTranslationCommon)((ICreatureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Creature.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Creature DeepCopy(
            ICreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Creature ret = (Creature)((CreatureCommon)((ICreatureGetter)item).CommonInstance()!).GetNew();
            ((CreatureSetterTranslationCommon)((ICreatureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Creature
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Creature_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Creature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CreatureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CreatureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class CreatureBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly CreatureBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ICreatureGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IItemEntryGetter>.Instance.Write(
                writer: writer,
                items: item.Items,
                transl: (MutagenWriter subWriter, IItemEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ItemEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.SPLO));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Models,
                recordType: translationParams.ConvertToCustom(RecordTypes.NIFZ),
                writeNullSuffix: true,
                transl: StringBinaryTranslation.Instance.Write);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NIFT,
                header: translationParams.ConvertToCustom(RecordTypes.NIFT));
            if (item.Configuration is {} ConfigurationItem)
            {
                ((CreatureConfigurationBinaryWriteTranslation)((IBinaryItem)ConfigurationItem).BinaryWriteTranslator).Write(
                    item: ConfigurationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRankPlacementGetter>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IRankPlacementGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((RankPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DeathItem,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: translationParams.ConvertToCustom(RecordTypes.SCRI));
            if (item.AIData is {} AIDataItem)
            {
                ((CreatureAIDataBinaryWriteTranslation)((IBinaryItem)AIDataItem).BinaryWriteTranslator).Write(
                    item: AIDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IAIPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.AIPackages,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IAIPackageGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.PKID));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Animations,
                recordType: translationParams.ConvertToCustom(RecordTypes.KFFZ),
                writeNullSuffix: true,
                transl: StringBinaryTranslation.Instance.Write);
            if (item.Data is {} DataItem)
            {
                ((CreatureDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.AttackReach,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.TurningSpeed,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.BaseScale,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FootWeight,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BloodSpray,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BloodDecal,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.InheritsSoundFrom,
                header: translationParams.ConvertToCustom(RecordTypes.CSCR));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ICreatureSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                transl: (MutagenWriter subWriter, ICreatureSoundGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((CreatureSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ICreatureGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.CREA,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICreatureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICreatureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICreatureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CreatureBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly CreatureBinaryCreateTranslation Instance = new CreatureBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CREA;
        public static ParseResult FillBinaryRecordTypes(
            ICreatureInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Creature_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Creature_FieldIndex.Model;
                }
                case RecordTypeInts.CNTO:
                {
                    item.Items.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ItemEntry>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: ItemEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ItemEntry.TryCreateFromBinary));
                    return (int)Creature_FieldIndex.Items;
                }
                case RecordTypeInts.SPLO:
                {
                    item.Spells.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SPLO),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Creature_FieldIndex.Spells;
                }
                case RecordTypeInts.NIFZ:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Models = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.ParseTrimNullEnding(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, [MaybeNullWhen(false)] out String listSubItem) =>
                            {
                                return StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: false,
                                    binaryType: StringBinaryType.NullTerminate);
                            })
                        .CastExtendedList<String>();
                    return (int)Creature_FieldIndex.Models;
                }
                case RecordTypeInts.NIFT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NIFT = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Creature_FieldIndex.NIFT;
                }
                case RecordTypeInts.ACBS:
                {
                    item.Configuration = Mutagen.Bethesda.Oblivion.CreatureConfiguration.CreateFromBinary(frame: frame);
                    return (int)Creature_FieldIndex.Configuration;
                }
                case RecordTypeInts.SNAM:
                {
                    item.Factions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<RankPlacement>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RankPlacement_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: RankPlacement.TryCreateFromBinary));
                    return (int)Creature_FieldIndex.Factions;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DeathItem.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Creature_FieldIndex.DeathItem;
                }
                case RecordTypeInts.SCRI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Script.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Creature_FieldIndex.Script;
                }
                case RecordTypeInts.AIDT:
                {
                    item.AIData = Mutagen.Bethesda.Oblivion.CreatureAIData.CreateFromBinary(frame: frame);
                    return (int)Creature_FieldIndex.AIData;
                }
                case RecordTypeInts.PKID:
                {
                    item.AIPackages.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IAIPackageGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.PKID),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Creature_FieldIndex.AIPackages;
                }
                case RecordTypeInts.KFFZ:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Animations = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.ParseTrimNullEnding(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, [MaybeNullWhen(false)] out String listSubItem) =>
                            {
                                return StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: false,
                                    binaryType: StringBinaryType.NullTerminate);
                            })
                        .CastExtendedList<String>();
                    return (int)Creature_FieldIndex.Animations;
                }
                case RecordTypeInts.DATA:
                {
                    item.Data = Mutagen.Bethesda.Oblivion.CreatureData.CreateFromBinary(frame: frame);
                    return (int)Creature_FieldIndex.Data;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackReach = frame.ReadUInt8();
                    return (int)Creature_FieldIndex.AttackReach;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatStyle.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Creature_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TurningSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Creature_FieldIndex.TurningSpeed;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Creature_FieldIndex.BaseScale;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FootWeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Creature_FieldIndex.FootWeight;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BloodSpray = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Creature_FieldIndex.BloodSpray;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BloodDecal = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Creature_FieldIndex.BloodDecal;
                }
                case RecordTypeInts.CSCR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InheritsSoundFrom.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Creature_FieldIndex.InheritsSoundFrom;
                }
                case RecordTypeInts.CSDT:
                case RecordTypeInts.CSDI:
                case RecordTypeInts.CSDC:
                {
                    item.Sounds.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<CreatureSound>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: CreatureSound_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: CreatureSound.TryCreateFromBinary));
                    return (int)Creature_FieldIndex.Sounds;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CreatureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class CreatureBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ICreatureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Creature_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Creature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CreatureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CreatureCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ICreature);


        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        public IReadOnlyList<IItemEntryGetter> Items { get; private set; } = Array.Empty<IItemEntryGetter>();
        public IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>> Spells { get; private set; } = Array.Empty<IFormLinkGetter<ISpellRecordGetter>>();
        public IReadOnlyList<String>? Models { get; private set; }
        #region NIFT
        private int? _NIFTLocation;
        public ReadOnlyMemorySlice<Byte>? NIFT => _NIFTLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NIFTLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Configuration
        private RangeInt32? _ConfigurationLocation;
        public ICreatureConfigurationGetter? Configuration => _ConfigurationLocation.HasValue ? CreatureConfigurationBinaryOverlay.CreatureConfigurationFactory(_recordData.Slice(_ConfigurationLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IRankPlacementGetter> Factions { get; private set; } = Array.Empty<IRankPlacementGetter>();
        #region DeathItem
        private int? _DeathItemLocation;
        public IFormLinkNullableGetter<IItemGetter> DeathItem => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IItemGetter>(_package, _recordData, _DeathItemLocation);
        #endregion
        #region Script
        private int? _ScriptLocation;
        public IFormLinkNullableGetter<IScriptGetter> Script => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IScriptGetter>(_package, _recordData, _ScriptLocation);
        #endregion
        #region AIData
        private RangeInt32? _AIDataLocation;
        public ICreatureAIDataGetter? AIData => _AIDataLocation.HasValue ? CreatureAIDataBinaryOverlay.CreatureAIDataFactory(_recordData.Slice(_AIDataLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IAIPackageGetter>> AIPackages { get; private set; } = Array.Empty<IFormLinkGetter<IAIPackageGetter>>();
        public IReadOnlyList<String>? Animations { get; private set; }
        #region Data
        private RangeInt32? _DataLocation;
        public ICreatureDataGetter? Data => _DataLocation.HasValue ? CreatureDataBinaryOverlay.CreatureDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        #region AttackReach
        private int? _AttackReachLocation;
        public Byte? AttackReach => _AttackReachLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _AttackReachLocation.Value, _package.MetaData.Constants)[0] : default(Byte?);
        #endregion
        #region CombatStyle
        private int? _CombatStyleLocation;
        public IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICombatStyleGetter>(_package, _recordData, _CombatStyleLocation);
        #endregion
        #region TurningSpeed
        private int? _TurningSpeedLocation;
        public Single? TurningSpeed => _TurningSpeedLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TurningSpeedLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region BaseScale
        private int? _BaseScaleLocation;
        public Single? BaseScale => _BaseScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BaseScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region FootWeight
        private int? _FootWeightLocation;
        public Single? FootWeight => _FootWeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FootWeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region BloodSpray
        private int? _BloodSprayLocation;
        public String? BloodSpray => _BloodSprayLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BloodSprayLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region BloodDecal
        private int? _BloodDecalLocation;
        public String? BloodDecal => _BloodDecalLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BloodDecalLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region InheritsSoundFrom
        private int? _InheritsSoundFromLocation;
        public IFormLinkNullableGetter<ICreatureGetter> InheritsSoundFrom => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICreatureGetter>(_package, _recordData, _InheritsSoundFromLocation);
        #endregion
        public IReadOnlyList<ICreatureSoundGetter> Sounds { get; private set; } = Array.Empty<ICreatureSoundGetter>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CreatureBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICreatureGetter CreatureFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new CreatureBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ICreatureGetter CreatureFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CreatureFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Creature_FieldIndex.Model;
                }
                case RecordTypeInts.CNTO:
                {
                    this.Items = BinaryOverlayList.FactoryByArray<IItemEntryGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ItemEntryBinaryOverlay.ItemEntryFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: ItemEntry_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Creature_FieldIndex.Items;
                }
                case RecordTypeInts.SPLO:
                {
                    this.Spells = BinaryOverlayList.FactoryByArray<IFormLinkGetter<ISpellRecordGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellRecordGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.SPLO,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Creature_FieldIndex.Spells;
                }
                case RecordTypeInts.NIFZ:
                {
                    this.Models = BinaryOverlayList.FactoryByLazyParseWithTrigger<String>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        getter: (s, p) => BinaryStringUtility.ParseUnknownLengthString(s, encoding: p.MetaData.Encodings.NonTranslated),
                        trimNullSuffix: true);
                    return (int)Creature_FieldIndex.Models;
                }
                case RecordTypeInts.NIFT:
                {
                    _NIFTLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.NIFT;
                }
                case RecordTypeInts.ACBS:
                {
                    _ConfigurationLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Creature_FieldIndex.Configuration;
                }
                case RecordTypeInts.SNAM:
                {
                    this.Factions = BinaryOverlayList.FactoryByArray<IRankPlacementGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => RankPlacementBinaryOverlay.RankPlacementFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: RankPlacement_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Creature_FieldIndex.Factions;
                }
                case RecordTypeInts.INAM:
                {
                    _DeathItemLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.DeathItem;
                }
                case RecordTypeInts.SCRI:
                {
                    _ScriptLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.Script;
                }
                case RecordTypeInts.AIDT:
                {
                    _AIDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Creature_FieldIndex.AIData;
                }
                case RecordTypeInts.PKID:
                {
                    this.AIPackages = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IAIPackageGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IAIPackageGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.PKID,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Creature_FieldIndex.AIPackages;
                }
                case RecordTypeInts.KFFZ:
                {
                    this.Animations = BinaryOverlayList.FactoryByLazyParseWithTrigger<String>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        getter: (s, p) => BinaryStringUtility.ParseUnknownLengthString(s, encoding: p.MetaData.Encodings.NonTranslated),
                        trimNullSuffix: true);
                    return (int)Creature_FieldIndex.Animations;
                }
                case RecordTypeInts.DATA:
                {
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Creature_FieldIndex.Data;
                }
                case RecordTypeInts.RNAM:
                {
                    _AttackReachLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.AttackReach;
                }
                case RecordTypeInts.ZNAM:
                {
                    _CombatStyleLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.TNAM:
                {
                    _TurningSpeedLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.TurningSpeed;
                }
                case RecordTypeInts.BNAM:
                {
                    _BaseScaleLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.BaseScale;
                }
                case RecordTypeInts.WNAM:
                {
                    _FootWeightLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.FootWeight;
                }
                case RecordTypeInts.NAM0:
                {
                    _BloodSprayLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.BloodSpray;
                }
                case RecordTypeInts.NAM1:
                {
                    _BloodDecalLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.BloodDecal;
                }
                case RecordTypeInts.CSCR:
                {
                    _InheritsSoundFromLocation = (stream.Position - offset);
                    return (int)Creature_FieldIndex.InheritsSoundFrom;
                }
                case RecordTypeInts.CSDT:
                case RecordTypeInts.CSDI:
                case RecordTypeInts.CSDC:
                {
                    this.Sounds = this.ParseRepeatedTypelessSubrecord<ICreatureSoundGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: CreatureSound_Registration.TriggerSpecs,
                        factory: CreatureSoundBinaryOverlay.CreatureSoundFactory);
                    return (int)Creature_FieldIndex.Sounds;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CreatureMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Creature>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICreatureGetter rhs) return false;
            return ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICreatureGetter? obj)
        {
            return ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CreatureCommon)((ICreatureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

