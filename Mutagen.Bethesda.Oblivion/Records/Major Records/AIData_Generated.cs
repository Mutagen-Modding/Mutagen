/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class AIData :
        IAIData,
        IEquatable<IAIDataGetter>,
        ILoquiObjectSetter<AIData>
    {
        #region Ctor
        public AIData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Aggression
        public Byte Aggression { get; set; } = default(Byte);
        #endregion
        #region Confidence
        public Byte Confidence { get; set; } = default(Byte);
        #endregion
        #region EnergyLevel
        public Byte EnergyLevel { get; set; } = default(Byte);
        #endregion
        #region Responsibility
        public Byte Responsibility { get; set; } = default(Byte);
        #endregion
        #region BuySellServices
        public Npc.BuySellServiceFlag BuySellServices { get; set; } = default(Npc.BuySellServiceFlag);
        #endregion
        #region Teaches
        public Skill? Teaches { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Skill? IAIDataGetter.Teaches => this.Teaches;
        #endregion
        #region MaximumTrainingLevel
        public Byte MaximumTrainingLevel { get; set; } = default(Byte);
        #endregion
        #region Unused
        public Int16 Unused { get; set; } = default(Int16);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AIDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAIDataGetter rhs) return false;
            return ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAIDataGetter? obj)
        {
            return ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Aggression = initialValue;
                this.Confidence = initialValue;
                this.EnergyLevel = initialValue;
                this.Responsibility = initialValue;
                this.BuySellServices = initialValue;
                this.Teaches = initialValue;
                this.MaximumTrainingLevel = initialValue;
                this.Unused = initialValue;
            }

            public Mask(
                TItem Aggression,
                TItem Confidence,
                TItem EnergyLevel,
                TItem Responsibility,
                TItem BuySellServices,
                TItem Teaches,
                TItem MaximumTrainingLevel,
                TItem Unused)
            {
                this.Aggression = Aggression;
                this.Confidence = Confidence;
                this.EnergyLevel = EnergyLevel;
                this.Responsibility = Responsibility;
                this.BuySellServices = BuySellServices;
                this.Teaches = Teaches;
                this.MaximumTrainingLevel = MaximumTrainingLevel;
                this.Unused = Unused;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Aggression;
            public TItem Confidence;
            public TItem EnergyLevel;
            public TItem Responsibility;
            public TItem BuySellServices;
            public TItem Teaches;
            public TItem MaximumTrainingLevel;
            public TItem Unused;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Aggression, rhs.Aggression)) return false;
                if (!object.Equals(this.Confidence, rhs.Confidence)) return false;
                if (!object.Equals(this.EnergyLevel, rhs.EnergyLevel)) return false;
                if (!object.Equals(this.Responsibility, rhs.Responsibility)) return false;
                if (!object.Equals(this.BuySellServices, rhs.BuySellServices)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.MaximumTrainingLevel, rhs.MaximumTrainingLevel)) return false;
                if (!object.Equals(this.Unused, rhs.Unused)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Aggression);
                hash.Add(this.Confidence);
                hash.Add(this.EnergyLevel);
                hash.Add(this.Responsibility);
                hash.Add(this.BuySellServices);
                hash.Add(this.Teaches);
                hash.Add(this.MaximumTrainingLevel);
                hash.Add(this.Unused);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Aggression)) return false;
                if (!eval(this.Confidence)) return false;
                if (!eval(this.EnergyLevel)) return false;
                if (!eval(this.Responsibility)) return false;
                if (!eval(this.BuySellServices)) return false;
                if (!eval(this.Teaches)) return false;
                if (!eval(this.MaximumTrainingLevel)) return false;
                if (!eval(this.Unused)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Aggression)) return true;
                if (eval(this.Confidence)) return true;
                if (eval(this.EnergyLevel)) return true;
                if (eval(this.Responsibility)) return true;
                if (eval(this.BuySellServices)) return true;
                if (eval(this.Teaches)) return true;
                if (eval(this.MaximumTrainingLevel)) return true;
                if (eval(this.Unused)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AIData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Aggression = eval(this.Aggression);
                obj.Confidence = eval(this.Confidence);
                obj.EnergyLevel = eval(this.EnergyLevel);
                obj.Responsibility = eval(this.Responsibility);
                obj.BuySellServices = eval(this.BuySellServices);
                obj.Teaches = eval(this.Teaches);
                obj.MaximumTrainingLevel = eval(this.MaximumTrainingLevel);
                obj.Unused = eval(this.Unused);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AIData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AIData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AIData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Aggression ?? true)
                    {
                        sb.AppendItem(Aggression, "Aggression");
                    }
                    if (printMask?.Confidence ?? true)
                    {
                        sb.AppendItem(Confidence, "Confidence");
                    }
                    if (printMask?.EnergyLevel ?? true)
                    {
                        sb.AppendItem(EnergyLevel, "EnergyLevel");
                    }
                    if (printMask?.Responsibility ?? true)
                    {
                        sb.AppendItem(Responsibility, "Responsibility");
                    }
                    if (printMask?.BuySellServices ?? true)
                    {
                        sb.AppendItem(BuySellServices, "BuySellServices");
                    }
                    if (printMask?.Teaches ?? true)
                    {
                        sb.AppendItem(Teaches, "Teaches");
                    }
                    if (printMask?.MaximumTrainingLevel ?? true)
                    {
                        sb.AppendItem(MaximumTrainingLevel, "MaximumTrainingLevel");
                    }
                    if (printMask?.Unused ?? true)
                    {
                        sb.AppendItem(Unused, "Unused");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Aggression;
            public Exception? Confidence;
            public Exception? EnergyLevel;
            public Exception? Responsibility;
            public Exception? BuySellServices;
            public Exception? Teaches;
            public Exception? MaximumTrainingLevel;
            public Exception? Unused;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                AIData_FieldIndex enu = (AIData_FieldIndex)index;
                switch (enu)
                {
                    case AIData_FieldIndex.Aggression:
                        return Aggression;
                    case AIData_FieldIndex.Confidence:
                        return Confidence;
                    case AIData_FieldIndex.EnergyLevel:
                        return EnergyLevel;
                    case AIData_FieldIndex.Responsibility:
                        return Responsibility;
                    case AIData_FieldIndex.BuySellServices:
                        return BuySellServices;
                    case AIData_FieldIndex.Teaches:
                        return Teaches;
                    case AIData_FieldIndex.MaximumTrainingLevel:
                        return MaximumTrainingLevel;
                    case AIData_FieldIndex.Unused:
                        return Unused;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                AIData_FieldIndex enu = (AIData_FieldIndex)index;
                switch (enu)
                {
                    case AIData_FieldIndex.Aggression:
                        this.Aggression = ex;
                        break;
                    case AIData_FieldIndex.Confidence:
                        this.Confidence = ex;
                        break;
                    case AIData_FieldIndex.EnergyLevel:
                        this.EnergyLevel = ex;
                        break;
                    case AIData_FieldIndex.Responsibility:
                        this.Responsibility = ex;
                        break;
                    case AIData_FieldIndex.BuySellServices:
                        this.BuySellServices = ex;
                        break;
                    case AIData_FieldIndex.Teaches:
                        this.Teaches = ex;
                        break;
                    case AIData_FieldIndex.MaximumTrainingLevel:
                        this.MaximumTrainingLevel = ex;
                        break;
                    case AIData_FieldIndex.Unused:
                        this.Unused = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                AIData_FieldIndex enu = (AIData_FieldIndex)index;
                switch (enu)
                {
                    case AIData_FieldIndex.Aggression:
                        this.Aggression = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Confidence:
                        this.Confidence = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.EnergyLevel:
                        this.EnergyLevel = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Responsibility:
                        this.Responsibility = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.BuySellServices:
                        this.BuySellServices = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Teaches:
                        this.Teaches = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.MaximumTrainingLevel:
                        this.MaximumTrainingLevel = (Exception?)obj;
                        break;
                    case AIData_FieldIndex.Unused:
                        this.Unused = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Aggression != null) return true;
                if (Confidence != null) return true;
                if (EnergyLevel != null) return true;
                if (Responsibility != null) return true;
                if (BuySellServices != null) return true;
                if (Teaches != null) return true;
                if (MaximumTrainingLevel != null) return true;
                if (Unused != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Aggression, "Aggression");
                }
                {
                    sb.AppendItem(Confidence, "Confidence");
                }
                {
                    sb.AppendItem(EnergyLevel, "EnergyLevel");
                }
                {
                    sb.AppendItem(Responsibility, "Responsibility");
                }
                {
                    sb.AppendItem(BuySellServices, "BuySellServices");
                }
                {
                    sb.AppendItem(Teaches, "Teaches");
                }
                {
                    sb.AppendItem(MaximumTrainingLevel, "MaximumTrainingLevel");
                }
                {
                    sb.AppendItem(Unused, "Unused");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Aggression = this.Aggression.Combine(rhs.Aggression);
                ret.Confidence = this.Confidence.Combine(rhs.Confidence);
                ret.EnergyLevel = this.EnergyLevel.Combine(rhs.EnergyLevel);
                ret.Responsibility = this.Responsibility.Combine(rhs.Responsibility);
                ret.BuySellServices = this.BuySellServices.Combine(rhs.BuySellServices);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches);
                ret.MaximumTrainingLevel = this.MaximumTrainingLevel.Combine(rhs.MaximumTrainingLevel);
                ret.Unused = this.Unused.Combine(rhs.Unused);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Aggression;
            public bool Confidence;
            public bool EnergyLevel;
            public bool Responsibility;
            public bool BuySellServices;
            public bool Teaches;
            public bool MaximumTrainingLevel;
            public bool Unused;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Aggression = defaultOn;
                this.Confidence = defaultOn;
                this.EnergyLevel = defaultOn;
                this.Responsibility = defaultOn;
                this.BuySellServices = defaultOn;
                this.Teaches = defaultOn;
                this.MaximumTrainingLevel = defaultOn;
                this.Unused = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Aggression, null));
                ret.Add((Confidence, null));
                ret.Add((EnergyLevel, null));
                ret.Add((Responsibility, null));
                ret.Add((BuySellServices, null));
                ret.Add((Teaches, null));
                ret.Add((MaximumTrainingLevel, null));
                ret.Add((Unused, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AIDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static AIData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AIData();
            ((AIDataSetterCommon)((IAIDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AIData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AIDataSetterCommon)((IAIDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static AIData GetNew()
        {
            return new AIData();
        }

    }
    #endregion

    #region Interface
    public partial interface IAIData :
        IAIDataGetter,
        ILoquiObjectSetter<IAIData>
    {
        new Byte Aggression { get; set; }
        new Byte Confidence { get; set; }
        new Byte EnergyLevel { get; set; }
        new Byte Responsibility { get; set; }
        new Npc.BuySellServiceFlag BuySellServices { get; set; }
        new Skill? Teaches { get; set; }
        new Byte MaximumTrainingLevel { get; set; }
        new Int16 Unused { get; set; }
    }

    public partial interface IAIDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IAIDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => AIData_Registration.Instance;
        Byte Aggression { get; }
        Byte Confidence { get; }
        Byte EnergyLevel { get; }
        Byte Responsibility { get; }
        Npc.BuySellServiceFlag BuySellServices { get; }
        Skill? Teaches { get; }
        Byte MaximumTrainingLevel { get; }
        Int16 Unused { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AIDataMixIn
    {
        public static void Clear(this IAIData item)
        {
            ((AIDataSetterCommon)((IAIDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AIData.Mask<bool> GetEqualsMask(
            this IAIDataGetter item,
            IAIDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAIDataGetter item,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            return ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAIDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAIDataGetter item,
            IAIDataGetter rhs,
            AIData.TranslationMask? equalsMask = null)
        {
            return ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs)
        {
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs,
            AIData.TranslationMask? copyMask = null)
        {
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AIData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAIData lhs,
            IAIDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AIDataSetterTranslationCommon)((IAIDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AIData DeepCopy(
            this IAIDataGetter item,
            AIData.TranslationMask? copyMask = null)
        {
            return ((AIDataSetterTranslationCommon)((IAIDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AIData DeepCopy(
            this IAIDataGetter item,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? copyMask = null)
        {
            return ((AIDataSetterTranslationCommon)((IAIDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AIData DeepCopy(
            this IAIDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AIDataSetterTranslationCommon)((IAIDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAIData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AIDataSetterCommon)((IAIDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum AIData_FieldIndex
    {
        Aggression = 0,
        Confidence = 1,
        EnergyLevel = 2,
        Responsibility = 3,
        BuySellServices = 4,
        Teaches = 5,
        MaximumTrainingLevel = 6,
        Unused = 7,
    }
    #endregion

    #region Registration
    internal partial class AIData_Registration : ILoquiRegistration
    {
        public static readonly AIData_Registration Instance = new AIData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(AIData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AIData.ErrorMask);

        public static readonly Type ClassType = typeof(AIData);

        public static readonly Type GetterType = typeof(IAIDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAIData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.AIData";

        public const string Name = "AIData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.AIDT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.AIDT);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AIDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AIDataSetterCommon
    {
        public static readonly AIDataSetterCommon Instance = new AIDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAIData item)
        {
            ClearPartial();
            item.Aggression = default(Byte);
            item.Confidence = default(Byte);
            item.EnergyLevel = default(Byte);
            item.Responsibility = default(Byte);
            item.BuySellServices = default(Npc.BuySellServiceFlag);
            item.Teaches = default;
            item.MaximumTrainingLevel = default(Byte);
            item.Unused = default(Int16);
        }
        
        #region Mutagen
        public void RemapLinks(IAIData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAIData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.AIDT),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AIDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class AIDataCommon
    {
        public static readonly AIDataCommon Instance = new AIDataCommon();

        public AIData.Mask<bool> GetEqualsMask(
            IAIDataGetter item,
            IAIDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AIData.Mask<bool>(false);
            ((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAIDataGetter item,
            IAIDataGetter rhs,
            AIData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Aggression = item.Aggression == rhs.Aggression;
            ret.Confidence = item.Confidence == rhs.Confidence;
            ret.EnergyLevel = item.EnergyLevel == rhs.EnergyLevel;
            ret.Responsibility = item.Responsibility == rhs.Responsibility;
            ret.BuySellServices = item.BuySellServices == rhs.BuySellServices;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaximumTrainingLevel = item.MaximumTrainingLevel == rhs.MaximumTrainingLevel;
            ret.Unused = item.Unused == rhs.Unused;
        }
        
        public string Print(
            IAIDataGetter item,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAIDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AIData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AIData =>");
            }
            else
            {
                sb.AppendLine($"{name} (AIData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAIDataGetter item,
            StructuredStringBuilder sb,
            AIData.Mask<bool>? printMask = null)
        {
            if (printMask?.Aggression ?? true)
            {
                sb.AppendItem(item.Aggression, "Aggression");
            }
            if (printMask?.Confidence ?? true)
            {
                sb.AppendItem(item.Confidence, "Confidence");
            }
            if (printMask?.EnergyLevel ?? true)
            {
                sb.AppendItem(item.EnergyLevel, "EnergyLevel");
            }
            if (printMask?.Responsibility ?? true)
            {
                sb.AppendItem(item.Responsibility, "Responsibility");
            }
            if (printMask?.BuySellServices ?? true)
            {
                sb.AppendItem(item.BuySellServices, "BuySellServices");
            }
            if ((printMask?.Teaches ?? true)
                && item.Teaches is {} TeachesItem)
            {
                sb.AppendItem(TeachesItem, "Teaches");
            }
            if (printMask?.MaximumTrainingLevel ?? true)
            {
                sb.AppendItem(item.MaximumTrainingLevel, "MaximumTrainingLevel");
            }
            if (printMask?.Unused ?? true)
            {
                sb.AppendItem(item.Unused, "Unused");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAIDataGetter? lhs,
            IAIDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)AIData_FieldIndex.Aggression) ?? true))
            {
                if (lhs.Aggression != rhs.Aggression) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIData_FieldIndex.Confidence) ?? true))
            {
                if (lhs.Confidence != rhs.Confidence) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIData_FieldIndex.EnergyLevel) ?? true))
            {
                if (lhs.EnergyLevel != rhs.EnergyLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIData_FieldIndex.Responsibility) ?? true))
            {
                if (lhs.Responsibility != rhs.Responsibility) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIData_FieldIndex.BuySellServices) ?? true))
            {
                if (lhs.BuySellServices != rhs.BuySellServices) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIData_FieldIndex.Teaches) ?? true))
            {
                if (lhs.Teaches != rhs.Teaches) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIData_FieldIndex.MaximumTrainingLevel) ?? true))
            {
                if (lhs.MaximumTrainingLevel != rhs.MaximumTrainingLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AIData_FieldIndex.Unused) ?? true))
            {
                if (lhs.Unused != rhs.Unused) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IAIDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Aggression);
            hash.Add(item.Confidence);
            hash.Add(item.EnergyLevel);
            hash.Add(item.Responsibility);
            hash.Add(item.BuySellServices);
            if (item.Teaches is {} Teachesitem)
            {
                hash.Add(Teachesitem);
            }
            hash.Add(item.MaximumTrainingLevel);
            hash.Add(item.Unused);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return AIData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAIDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class AIDataSetterTranslationCommon
    {
        public static readonly AIDataSetterTranslationCommon Instance = new AIDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAIData item,
            IAIDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Aggression) ?? true))
            {
                item.Aggression = rhs.Aggression;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Confidence) ?? true))
            {
                item.Confidence = rhs.Confidence;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.EnergyLevel) ?? true))
            {
                item.EnergyLevel = rhs.EnergyLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Responsibility) ?? true))
            {
                item.Responsibility = rhs.Responsibility;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.BuySellServices) ?? true))
            {
                item.BuySellServices = rhs.BuySellServices;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Teaches) ?? true))
            {
                item.Teaches = rhs.Teaches;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.MaximumTrainingLevel) ?? true))
            {
                item.MaximumTrainingLevel = rhs.MaximumTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)AIData_FieldIndex.Unused) ?? true))
            {
                item.Unused = rhs.Unused;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAIData item,
            IAIDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public AIData DeepCopy(
            IAIDataGetter item,
            AIData.TranslationMask? copyMask = null)
        {
            AIData ret = (AIData)((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetNew();
            ((AIDataSetterTranslationCommon)((IAIDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AIData DeepCopy(
            IAIDataGetter item,
            out AIData.ErrorMask errorMask,
            AIData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AIData ret = (AIData)((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetNew();
            ((AIDataSetterTranslationCommon)((IAIDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AIData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AIData DeepCopy(
            IAIDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AIData ret = (AIData)((AIDataCommon)((IAIDataGetter)item).CommonInstance()!).GetNew();
            ((AIDataSetterTranslationCommon)((IAIDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => AIData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return AIDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IAIDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IAIDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class AIDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly AIDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IAIDataGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Aggression);
            writer.Write(item.Confidence);
            writer.Write(item.EnergyLevel);
            writer.Write(item.Responsibility);
            EnumBinaryTranslation<Npc.BuySellServiceFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.BuySellServices,
                length: 4);
            EnumBinaryTranslation<Skill, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                ((int?)item.Teaches) ?? -1,
                length: 1);
            writer.Write(item.MaximumTrainingLevel);
            writer.Write(item.Unused);
        }

        public void Write(
            MutagenWriter writer,
            IAIDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.AIDT),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAIDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AIDataBinaryCreateTranslation
    {
        public static readonly AIDataBinaryCreateTranslation Instance = new AIDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IAIData item,
            MutagenFrame frame)
        {
            item.Aggression = frame.ReadUInt8();
            item.Confidence = frame.ReadUInt8();
            item.EnergyLevel = frame.ReadUInt8();
            item.Responsibility = frame.ReadUInt8();
            item.BuySellServices = EnumBinaryTranslation<Npc.BuySellServiceFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            if (frame.Complete) return;
            item.Teaches = EnumBinaryTranslation<Skill, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.MaximumTrainingLevel = frame.ReadUInt8();
            item.Unused = frame.ReadInt16();
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class AIDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IAIDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AIDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class AIDataBinaryOverlay :
        PluginBinaryOverlay,
        IAIDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AIData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => AIData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => AIDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => AIDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IAIDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IAIDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IAIDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => AIDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AIDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Byte Aggression => _structData.Span[0x0];
        public Byte Confidence => _structData.Span[0x1];
        public Byte EnergyLevel => _structData.Span[0x2];
        public Byte Responsibility => _structData.Span[0x3];
        public Npc.BuySellServiceFlag BuySellServices => (Npc.BuySellServiceFlag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x4, 0x4));
        #region Teaches
        public Skill? Teaches
        {
            get
            {
                var val = (Skill)_structData.Span.Slice(0x8, 0x1)[0];
                if (((int)val) == -1) return null;
                return val;
            }
        }
        #endregion
        public Byte MaximumTrainingLevel => _structData.Span[0x9];
        public Int16 Unused => BinaryPrimitives.ReadInt16LittleEndian(_structData.Slice(0xA, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AIDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAIDataGetter AIDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0xC,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new AIDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0xC + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IAIDataGetter AIDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AIDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AIDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IAIDataGetter rhs) return false;
            return ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAIDataGetter? obj)
        {
            return ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AIDataCommon)((IAIDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

