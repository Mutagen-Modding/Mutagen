/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class CreatureSound :
        ICreatureSound,
        IEquatable<ICreatureSoundGetter>,
        ILoquiObjectSetter<CreatureSound>
    {
        #region Ctor
        public CreatureSound()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SoundType
        public CreatureSound.CreatureSoundType? SoundType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        CreatureSound.CreatureSoundType? ICreatureSoundGetter.SoundType => this.SoundType;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<SoundItem> _Sounds = new ExtendedList<SoundItem>();
        public ExtendedList<SoundItem> Sounds
        {
            get => this._Sounds;
            init => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ISoundItemGetter> ICreatureSoundGetter.Sounds => _Sounds;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CreatureSoundMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICreatureSoundGetter rhs) return false;
            return ((CreatureSoundCommon)((ICreatureSoundGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICreatureSoundGetter? obj)
        {
            return ((CreatureSoundCommon)((ICreatureSoundGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CreatureSoundCommon)((ICreatureSoundGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SoundType = initialValue;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SoundItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, SoundItem.Mask<TItem>?>>());
            }

            public Mask(
                TItem SoundType,
                TItem Sounds)
            {
                this.SoundType = SoundType;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SoundItem.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, SoundItem.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem SoundType;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, SoundItem.Mask<TItem>?>>?>? Sounds;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SoundType, rhs.SoundType)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SoundType);
                hash.Add(this.Sounds);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.SoundType)) return false;
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.SoundType)) return true;
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new CreatureSound.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.SoundType = eval(this.SoundType);
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, SoundItem.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, SoundItem.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, SoundItem.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific)
                        {
                            MaskItemIndexed<R, SoundItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, SoundItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(CreatureSound.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, CreatureSound.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(CreatureSound.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.SoundType ?? true)
                    {
                        sb.AppendItem(SoundType, "SoundType");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds is {} SoundsItem)
                    {
                        sb.AppendLine("Sounds =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? SoundType;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SoundItem.ErrorMask?>>?>? Sounds;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
                switch (enu)
                {
                    case CreatureSound_FieldIndex.SoundType:
                        return SoundType;
                    case CreatureSound_FieldIndex.Sounds:
                        return Sounds;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
                switch (enu)
                {
                    case CreatureSound_FieldIndex.SoundType:
                        this.SoundType = ex;
                        break;
                    case CreatureSound_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SoundItem.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                CreatureSound_FieldIndex enu = (CreatureSound_FieldIndex)index;
                switch (enu)
                {
                    case CreatureSound_FieldIndex.SoundType:
                        this.SoundType = (Exception?)obj;
                        break;
                    case CreatureSound_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SoundItem.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SoundType != null) return true;
                if (Sounds != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(SoundType, "SoundType");
                }
                if (Sounds is {} SoundsItem)
                {
                    sb.AppendLine("Sounds =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SoundType = this.SoundType.Combine(rhs.SoundType);
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, SoundItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), Noggog.ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool SoundType;
            public SoundItem.TranslationMask? Sounds;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.SoundType = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SoundType, null));
                ret.Add((Sounds == null ? DefaultOn : !Sounds.GetCrystal().CopyNothing, Sounds?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CreatureSoundCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CreatureSoundSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CreatureSoundBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CreatureSoundBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static CreatureSound CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new CreatureSound();
            ((CreatureSoundSetterCommon)((ICreatureSoundGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out CreatureSound item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CreatureSoundSetterCommon)((ICreatureSoundGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static CreatureSound GetNew()
        {
            return new CreatureSound();
        }

    }
    #endregion

    #region Interface
    public partial interface ICreatureSound :
        ICreatureSoundGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICreatureSound>
    {
        new CreatureSound.CreatureSoundType? SoundType { get; set; }
        new ExtendedList<SoundItem> Sounds { get; }
    }

    public partial interface ICreatureSoundGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ICreatureSoundGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => CreatureSound_Registration.Instance;
        CreatureSound.CreatureSoundType? SoundType { get; }
        IReadOnlyList<ISoundItemGetter> Sounds { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CreatureSoundMixIn
    {
        public static void Clear(this ICreatureSound item)
        {
            ((CreatureSoundSetterCommon)((ICreatureSoundGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static CreatureSound.Mask<bool> GetEqualsMask(
            this ICreatureSoundGetter item,
            ICreatureSoundGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CreatureSoundCommon)((ICreatureSoundGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICreatureSoundGetter item,
            string? name = null,
            CreatureSound.Mask<bool>? printMask = null)
        {
            return ((CreatureSoundCommon)((ICreatureSoundGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICreatureSoundGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CreatureSound.Mask<bool>? printMask = null)
        {
            ((CreatureSoundCommon)((ICreatureSoundGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICreatureSoundGetter item,
            ICreatureSoundGetter rhs,
            CreatureSound.TranslationMask? equalsMask = null)
        {
            return ((CreatureSoundCommon)((ICreatureSoundGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICreatureSound lhs,
            ICreatureSoundGetter rhs)
        {
            ((CreatureSoundSetterTranslationCommon)((ICreatureSoundGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICreatureSound lhs,
            ICreatureSoundGetter rhs,
            CreatureSound.TranslationMask? copyMask = null)
        {
            ((CreatureSoundSetterTranslationCommon)((ICreatureSoundGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ICreatureSound lhs,
            ICreatureSoundGetter rhs,
            out CreatureSound.ErrorMask errorMask,
            CreatureSound.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CreatureSoundSetterTranslationCommon)((ICreatureSoundGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = CreatureSound.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICreatureSound lhs,
            ICreatureSoundGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CreatureSoundSetterTranslationCommon)((ICreatureSoundGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static CreatureSound DeepCopy(
            this ICreatureSoundGetter item,
            CreatureSound.TranslationMask? copyMask = null)
        {
            return ((CreatureSoundSetterTranslationCommon)((ICreatureSoundGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static CreatureSound DeepCopy(
            this ICreatureSoundGetter item,
            out CreatureSound.ErrorMask errorMask,
            CreatureSound.TranslationMask? copyMask = null)
        {
            return ((CreatureSoundSetterTranslationCommon)((ICreatureSoundGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static CreatureSound DeepCopy(
            this ICreatureSoundGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CreatureSoundSetterTranslationCommon)((ICreatureSoundGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICreatureSound item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CreatureSoundSetterCommon)((ICreatureSoundGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum CreatureSound_FieldIndex
    {
        SoundType = 0,
        Sounds = 1,
    }
    #endregion

    #region Registration
    internal partial class CreatureSound_Registration : ILoquiRegistration
    {
        public static readonly CreatureSound_Registration Instance = new CreatureSound_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 2;

        public const ushort FieldCount = 2;

        public static readonly Type MaskType = typeof(CreatureSound.Mask<>);

        public static readonly Type ErrorMaskType = typeof(CreatureSound.ErrorMask);

        public static readonly Type ClassType = typeof(CreatureSound);

        public static readonly Type GetterType = typeof(ICreatureSoundGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICreatureSound);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.CreatureSound";

        public const string Name = "CreatureSound";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.CSDT,
                RecordTypes.CSDI,
                RecordTypes.CSDC);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CreatureSoundBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CreatureSoundSetterCommon
    {
        public static readonly CreatureSoundSetterCommon Instance = new CreatureSoundSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICreatureSound item)
        {
            ClearPartial();
            item.SoundType = default;
            item.Sounds.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ICreatureSound obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Sounds.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICreatureSound item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: CreatureSoundBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class CreatureSoundCommon
    {
        public static readonly CreatureSoundCommon Instance = new CreatureSoundCommon();

        public CreatureSound.Mask<bool> GetEqualsMask(
            ICreatureSoundGetter item,
            ICreatureSoundGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new CreatureSound.Mask<bool>(false);
            ((CreatureSoundCommon)((ICreatureSoundGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICreatureSoundGetter item,
            ICreatureSoundGetter rhs,
            CreatureSound.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.SoundType = item.SoundType == rhs.SoundType;
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            ICreatureSoundGetter item,
            string? name = null,
            CreatureSound.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICreatureSoundGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            CreatureSound.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"CreatureSound =>");
            }
            else
            {
                sb.AppendLine($"{name} (CreatureSound) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICreatureSoundGetter item,
            StructuredStringBuilder sb,
            CreatureSound.Mask<bool>? printMask = null)
        {
            if ((printMask?.SoundType ?? true)
                && item.SoundType is {} SoundTypeItem)
            {
                sb.AppendItem(SoundTypeItem, "SoundType");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                sb.AppendLine("Sounds =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Sounds)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICreatureSoundGetter? lhs,
            ICreatureSoundGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)CreatureSound_FieldIndex.SoundType) ?? true))
            {
                if (lhs.SoundType != rhs.SoundType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)CreatureSound_FieldIndex.Sounds) ?? true))
            {
                if (!lhs.Sounds.SequenceEqual(rhs.Sounds, (l, r) => ((SoundItemCommon)((ISoundItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)CreatureSound_FieldIndex.Sounds)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ICreatureSoundGetter item)
        {
            var hash = new HashCode();
            if (item.SoundType is {} SoundTypeitem)
            {
                hash.Add(SoundTypeitem);
            }
            hash.Add(item.Sounds);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return CreatureSound.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICreatureSoundGetter obj)
        {
            foreach (var item in obj.Sounds.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class CreatureSoundSetterTranslationCommon
    {
        public static readonly CreatureSoundSetterTranslationCommon Instance = new CreatureSoundSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICreatureSound item,
            ICreatureSoundGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)CreatureSound_FieldIndex.SoundType) ?? true))
            {
                item.SoundType = rhs.SoundType;
            }
            if ((copyMask?.GetShouldTranslate((int)CreatureSound_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)CreatureSound_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetTo(
                        rhs.Sounds
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICreatureSound item,
            ICreatureSoundGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public CreatureSound DeepCopy(
            ICreatureSoundGetter item,
            CreatureSound.TranslationMask? copyMask = null)
        {
            CreatureSound ret = (CreatureSound)((CreatureSoundCommon)((ICreatureSoundGetter)item).CommonInstance()!).GetNew();
            ((CreatureSoundSetterTranslationCommon)((ICreatureSoundGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public CreatureSound DeepCopy(
            ICreatureSoundGetter item,
            out CreatureSound.ErrorMask errorMask,
            CreatureSound.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            CreatureSound ret = (CreatureSound)((CreatureSoundCommon)((ICreatureSoundGetter)item).CommonInstance()!).GetNew();
            ((CreatureSoundSetterTranslationCommon)((ICreatureSoundGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = CreatureSound.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public CreatureSound DeepCopy(
            ICreatureSoundGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            CreatureSound ret = (CreatureSound)((CreatureSoundCommon)((ICreatureSoundGetter)item).CommonInstance()!).GetNew();
            ((CreatureSoundSetterTranslationCommon)((ICreatureSoundGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class CreatureSound
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreatureSound_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CreatureSound_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CreatureSoundCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return CreatureSoundSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CreatureSoundSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICreatureSoundGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ICreatureSoundGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ICreatureSoundGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class CreatureSoundBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly CreatureSoundBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ICreatureSoundGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            EnumBinaryTranslation<CreatureSound.CreatureSoundType, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.SoundType,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.CSDT));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ISoundItemGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                transl: (MutagenWriter subWriter, ISoundItemGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((SoundItemBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ICreatureSoundGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICreatureSoundGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CreatureSoundBinaryCreateTranslation
    {
        public static readonly CreatureSoundBinaryCreateTranslation Instance = new CreatureSoundBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ICreatureSound item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CSDT:
                {
                    if (lastParsed.ShortCircuit((int)CreatureSound_FieldIndex.SoundType, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SoundType = EnumBinaryTranslation<CreatureSound.CreatureSoundType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)CreatureSound_FieldIndex.SoundType;
                }
                case RecordTypeInts.CSDI:
                case RecordTypeInts.CSDC:
                {
                    if (lastParsed.ShortCircuit((int)CreatureSound_FieldIndex.Sounds, translationParams)) return ParseResult.Stop;
                    item.Sounds.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<SoundItem>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: SoundItem_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: SoundItem.TryCreateFromBinary));
                    return (int)CreatureSound_FieldIndex.Sounds;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CreatureSoundBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ICreatureSoundGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CreatureSoundBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class CreatureSoundBinaryOverlay :
        PluginBinaryOverlay,
        ICreatureSoundGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => CreatureSound_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => CreatureSound_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => CreatureSoundCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => CreatureSoundSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ICreatureSoundGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ICreatureSoundGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ICreatureSoundGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CreatureSoundCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => CreatureSoundBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CreatureSoundBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region SoundType
        private int? _SoundTypeLocation;
        public CreatureSound.CreatureSoundType? SoundType => EnumBinaryTranslation<CreatureSound.CreatureSoundType, MutagenFrame, MutagenWriter>.Instance.ParseRecordNullable(_SoundTypeLocation, _recordData, _package, 4);
        #endregion
        public IReadOnlyList<ISoundItemGetter> Sounds { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CreatureSoundBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICreatureSoundGetter CreatureSoundFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new CreatureSoundBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ICreatureSoundGetter CreatureSoundFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CreatureSoundFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CSDT:
                {
                    if (lastParsed.ShortCircuit((int)CreatureSound_FieldIndex.SoundType, translationParams)) return ParseResult.Stop;
                    _SoundTypeLocation = (stream.Position - offset);
                    return (int)CreatureSound_FieldIndex.SoundType;
                }
                case RecordTypeInts.CSDI:
                case RecordTypeInts.CSDC:
                {
                    if (lastParsed.ShortCircuit((int)CreatureSound_FieldIndex.Sounds, translationParams)) return ParseResult.Stop;
                    this.Sounds = this.ParseRepeatedTypelessSubrecord<ISoundItemGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: SoundItem_Registration.TriggerSpecs,
                        factory: SoundItemBinaryOverlay.SoundItemFactory);
                    return (int)CreatureSound_FieldIndex.Sounds;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CreatureSoundMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ICreatureSoundGetter rhs) return false;
            return ((CreatureSoundCommon)((ICreatureSoundGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICreatureSoundGetter? obj)
        {
            return ((CreatureSoundCommon)((ICreatureSoundGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CreatureSoundCommon)((ICreatureSoundGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

