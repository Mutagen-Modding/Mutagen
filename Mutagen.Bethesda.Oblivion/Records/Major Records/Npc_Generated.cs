/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Npc :
        OblivionMajorRecord,
        IEquatable<INpcGetter>,
        ILoquiObjectSetter<Npc>,
        INpcInternal
    {
        #region Ctor
        protected Npc()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? INpcGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? INpcGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Configuration
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcConfiguration? _Configuration;
        public NpcConfiguration? Configuration
        {
            get => _Configuration;
            set => _Configuration = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcConfigurationGetter? INpcGetter.Configuration => this.Configuration;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RankPlacement> _Factions = new ExtendedList<RankPlacement>();
        public ExtendedList<RankPlacement> Factions
        {
            get => this._Factions;
            init => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankPlacementGetter> INpcGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        private readonly IFormLinkNullable<IItemGetter> _DeathItem = new FormLinkNullable<IItemGetter>();
        public IFormLinkNullable<IItemGetter> DeathItem
        {
            get => _DeathItem;
            set => _DeathItem.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IItemGetter> INpcGetter.DeathItem => this.DeathItem;
        #endregion
        #region Race
        private readonly IFormLinkNullable<IRaceGetter> _Race = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> Race
        {
            get => _Race;
            set => _Race.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> INpcGetter.Race => this.Race;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellRecordGetter>> _Spells = new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
        public ExtendedList<IFormLinkGetter<ISpellRecordGetter>> Spells
        {
            get => this._Spells;
            init => this._Spells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>> INpcGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Script
        private readonly IFormLinkNullable<IScriptGetter> _Script = new FormLinkNullable<IScriptGetter>();
        public IFormLinkNullable<IScriptGetter> Script
        {
            get => _Script;
            set => _Script.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IScriptGetter> INpcGetter.Script => this.Script;
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ItemEntry> _Items = new ExtendedList<ItemEntry>();
        public ExtendedList<ItemEntry> Items
        {
            get => this._Items;
            init => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IItemEntryGetter> INpcGetter.Items => _Items;
        #endregion

        #endregion
        #region AIData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AIData? _AIData;
        public AIData? AIData
        {
            get => _AIData;
            set => _AIData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIDataGetter? INpcGetter.AIData => this.AIData;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IAIPackageGetter>> _AIPackages = new ExtendedList<IFormLinkGetter<IAIPackageGetter>>();
        public ExtendedList<IFormLinkGetter<IAIPackageGetter>> AIPackages
        {
            get => this._AIPackages;
            init => this._AIPackages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IAIPackageGetter>> INpcGetter.AIPackages => _AIPackages;
        #endregion

        #endregion
        #region Animations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<String>? _Animations;
        public ExtendedList<String>? Animations
        {
            get => this._Animations;
            set => this._Animations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<String>? INpcGetter.Animations => _Animations;
        #endregion

        #endregion
        #region Class
        private readonly IFormLinkNullable<IClassGetter> _Class = new FormLinkNullable<IClassGetter>();
        public IFormLinkNullable<IClassGetter> Class
        {
            get => _Class;
            set => _Class.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IClassGetter> INpcGetter.Class => this.Class;
        #endregion
        #region Stats
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcData? _Stats;
        public NpcData? Stats
        {
            get => _Stats;
            set => _Stats = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcDataGetter? INpcGetter.Stats => this.Stats;
        #endregion
        #region Hair
        private readonly IFormLinkNullable<IHairGetter> _Hair = new FormLinkNullable<IHairGetter>();
        public IFormLinkNullable<IHairGetter> Hair
        {
            get => _Hair;
            set => _Hair.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IHairGetter> INpcGetter.Hair => this.Hair;
        #endregion
        #region HairLength
        public Single? HairLength { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? INpcGetter.HairLength => this.HairLength;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IEyeGetter>>? _Eyes;
        public ExtendedList<IFormLinkGetter<IEyeGetter>>? Eyes
        {
            get => this._Eyes;
            set => this._Eyes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IEyeGetter>>? INpcGetter.Eyes => _Eyes;
        #endregion

        #endregion
        #region HairColor
        public Color? HairColor { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? INpcGetter.HairColor => this.HairColor;
        #endregion
        #region CombatStyle
        private readonly IFormLinkNullable<ICombatStyleGetter> _CombatStyle = new FormLinkNullable<ICombatStyleGetter>();
        public IFormLinkNullable<ICombatStyleGetter> CombatStyle
        {
            get => _CombatStyle;
            set => _CombatStyle.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICombatStyleGetter> INpcGetter.CombatStyle => this.CombatStyle;
        #endregion
        #region FaceGenGeometrySymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FaceGenGeometrySymmetric;
        public MemorySlice<Byte>? FaceGenGeometrySymmetric
        {
            get => this._FaceGenGeometrySymmetric;
            set => this._FaceGenGeometrySymmetric = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INpcGetter.FaceGenGeometrySymmetric => this.FaceGenGeometrySymmetric;
        #endregion
        #region FaceGenGeometryAsymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FaceGenGeometryAsymmetric;
        public MemorySlice<Byte>? FaceGenGeometryAsymmetric
        {
            get => this._FaceGenGeometryAsymmetric;
            set => this._FaceGenGeometryAsymmetric = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INpcGetter.FaceGenGeometryAsymmetric => this.FaceGenGeometryAsymmetric;
        #endregion
        #region FaceGenTextureSymmetric
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FaceGenTextureSymmetric;
        public MemorySlice<Byte>? FaceGenTextureSymmetric
        {
            get => this._FaceGenTextureSymmetric;
            set => this._FaceGenTextureSymmetric = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INpcGetter.FaceGenTextureSymmetric => this.FaceGenTextureSymmetric;
        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? INpcGetter.FNAM => this.FNAM;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Configuration = new MaskItem<TItem, NpcConfiguration.Mask<TItem>?>(initialValue, new NpcConfiguration.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = initialValue;
                this.Race = initialValue;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Script = initialValue;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>());
                this.AIData = new MaskItem<TItem, AIData.Mask<TItem>?>(initialValue, new AIData.Mask<TItem>(initialValue));
                this.AIPackages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Class = initialValue;
                this.Stats = new MaskItem<TItem, NpcData.Mask<TItem>?>(initialValue, new NpcData.Mask<TItem>(initialValue));
                this.Hair = initialValue;
                this.HairLength = initialValue;
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.HairColor = initialValue;
                this.CombatStyle = initialValue;
                this.FaceGenGeometrySymmetric = initialValue;
                this.FaceGenGeometryAsymmetric = initialValue;
                this.FaceGenTextureSymmetric = initialValue;
                this.FNAM = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Model,
                TItem Configuration,
                TItem Factions,
                TItem DeathItem,
                TItem Race,
                TItem Spells,
                TItem Script,
                TItem Items,
                TItem AIData,
                TItem AIPackages,
                TItem Animations,
                TItem Class,
                TItem Stats,
                TItem Hair,
                TItem HairLength,
                TItem Eyes,
                TItem HairColor,
                TItem CombatStyle,
                TItem FaceGenGeometrySymmetric,
                TItem FaceGenGeometryAsymmetric,
                TItem FaceGenTextureSymmetric,
                TItem FNAM)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Configuration = new MaskItem<TItem, NpcConfiguration.Mask<TItem>?>(Configuration, new NpcConfiguration.Mask<TItem>(Configuration));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(Factions, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = DeathItem;
                this.Race = Race;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Spells, Enumerable.Empty<(int Index, TItem Value)>());
                this.Script = Script;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>());
                this.AIData = new MaskItem<TItem, AIData.Mask<TItem>?>(AIData, new AIData.Mask<TItem>(AIData));
                this.AIPackages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AIPackages, Enumerable.Empty<(int Index, TItem Value)>());
                this.Animations = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Animations, Enumerable.Empty<(int Index, TItem Value)>());
                this.Class = Class;
                this.Stats = new MaskItem<TItem, NpcData.Mask<TItem>?>(Stats, new NpcData.Mask<TItem>(Stats));
                this.Hair = Hair;
                this.HairLength = HairLength;
                this.Eyes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Eyes, Enumerable.Empty<(int Index, TItem Value)>());
                this.HairColor = HairColor;
                this.CombatStyle = CombatStyle;
                this.FaceGenGeometrySymmetric = FaceGenGeometrySymmetric;
                this.FaceGenGeometryAsymmetric = FaceGenGeometryAsymmetric;
                this.FaceGenTextureSymmetric = FaceGenTextureSymmetric;
                this.FNAM = FNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, NpcConfiguration.Mask<TItem>?>? Configuration { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>? Factions;
            public TItem DeathItem;
            public TItem Race;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Spells;
            public TItem Script;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ItemEntry.Mask<TItem>?>>?>? Items;
            public MaskItem<TItem, AIData.Mask<TItem>?>? AIData { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AIPackages;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Animations;
            public TItem Class;
            public MaskItem<TItem, NpcData.Mask<TItem>?>? Stats { get; set; }
            public TItem Hair;
            public TItem HairLength;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Eyes;
            public TItem HairColor;
            public TItem CombatStyle;
            public TItem FaceGenGeometrySymmetric;
            public TItem FaceGenGeometryAsymmetric;
            public TItem FaceGenTextureSymmetric;
            public TItem FNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Configuration, rhs.Configuration)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Script, rhs.Script)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.AIData, rhs.AIData)) return false;
                if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
                if (!object.Equals(this.Animations, rhs.Animations)) return false;
                if (!object.Equals(this.Class, rhs.Class)) return false;
                if (!object.Equals(this.Stats, rhs.Stats)) return false;
                if (!object.Equals(this.Hair, rhs.Hair)) return false;
                if (!object.Equals(this.HairLength, rhs.HairLength)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.HairColor, rhs.HairColor)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric)) return false;
                if (!object.Equals(this.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric)) return false;
                if (!object.Equals(this.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Configuration);
                hash.Add(this.Factions);
                hash.Add(this.DeathItem);
                hash.Add(this.Race);
                hash.Add(this.Spells);
                hash.Add(this.Script);
                hash.Add(this.Items);
                hash.Add(this.AIData);
                hash.Add(this.AIPackages);
                hash.Add(this.Animations);
                hash.Add(this.Class);
                hash.Add(this.Stats);
                hash.Add(this.Hair);
                hash.Add(this.HairLength);
                hash.Add(this.Eyes);
                hash.Add(this.HairColor);
                hash.Add(this.CombatStyle);
                hash.Add(this.FaceGenGeometrySymmetric);
                hash.Add(this.FaceGenGeometryAsymmetric);
                hash.Add(this.FaceGenTextureSymmetric);
                hash.Add(this.FNAM);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Configuration != null)
                {
                    if (!eval(this.Configuration.Overall)) return false;
                    if (this.Configuration.Specific != null && !this.Configuration.Specific.All(eval)) return false;
                }
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DeathItem)) return false;
                if (!eval(this.Race)) return false;
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Script)) return false;
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AIData != null)
                {
                    if (!eval(this.AIData.Overall)) return false;
                    if (this.AIData.Specific != null && !this.AIData.Specific.All(eval)) return false;
                }
                if (this.AIPackages != null)
                {
                    if (!eval(this.AIPackages.Overall)) return false;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (!eval(this.Animations.Overall)) return false;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Class)) return false;
                if (Stats != null)
                {
                    if (!eval(this.Stats.Overall)) return false;
                    if (this.Stats.Specific != null && !this.Stats.Specific.All(eval)) return false;
                }
                if (!eval(this.Hair)) return false;
                if (!eval(this.HairLength)) return false;
                if (this.Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.HairColor)) return false;
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.FaceGenGeometrySymmetric)) return false;
                if (!eval(this.FaceGenGeometryAsymmetric)) return false;
                if (!eval(this.FaceGenTextureSymmetric)) return false;
                if (!eval(this.FNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Configuration != null)
                {
                    if (eval(this.Configuration.Overall)) return true;
                    if (this.Configuration.Specific != null && this.Configuration.Specific.Any(eval)) return true;
                }
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DeathItem)) return true;
                if (eval(this.Race)) return true;
                if (this.Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Script)) return true;
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AIData != null)
                {
                    if (eval(this.AIData.Overall)) return true;
                    if (this.AIData.Specific != null && this.AIData.Specific.Any(eval)) return true;
                }
                if (this.AIPackages != null)
                {
                    if (eval(this.AIPackages.Overall)) return true;
                    if (this.AIPackages.Specific != null)
                    {
                        foreach (var item in this.AIPackages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Animations != null)
                {
                    if (eval(this.Animations.Overall)) return true;
                    if (this.Animations.Specific != null)
                    {
                        foreach (var item in this.Animations.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Class)) return true;
                if (Stats != null)
                {
                    if (eval(this.Stats.Overall)) return true;
                    if (this.Stats.Specific != null && this.Stats.Specific.Any(eval)) return true;
                }
                if (eval(this.Hair)) return true;
                if (eval(this.HairLength)) return true;
                if (this.Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null)
                    {
                        foreach (var item in this.Eyes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.HairColor)) return true;
                if (eval(this.CombatStyle)) return true;
                if (eval(this.FaceGenGeometrySymmetric)) return true;
                if (eval(this.FaceGenGeometryAsymmetric)) return true;
                if (eval(this.FaceGenTextureSymmetric)) return true;
                if (eval(this.FNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Npc.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Configuration = this.Configuration == null ? null : new MaskItem<R, NpcConfiguration.Mask<R>?>(eval(this.Configuration.Overall), this.Configuration.Specific?.Translate(eval));
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement.Mask<R>?>>?>(eval(this.Factions.Overall), Enumerable.Empty<MaskItemIndexed<R, RankPlacement.Mask<R>?>>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RankPlacement.Mask<R>?>>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific)
                        {
                            MaskItemIndexed<R, RankPlacement.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, RankPlacement.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DeathItem = eval(this.DeathItem);
                obj.Race = eval(this.Race);
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Script = eval(this.Script);
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ItemEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ItemEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ItemEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, ItemEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ItemEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.AIData = this.AIData == null ? null : new MaskItem<R, AIData.Mask<R>?>(eval(this.AIData.Overall), this.AIData.Specific?.Translate(eval));
                if (AIPackages != null)
                {
                    obj.AIPackages = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AIPackages.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AIPackages.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AIPackages.Specific = l;
                        foreach (var item in AIPackages.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Animations != null)
                {
                    obj.Animations = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Animations.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Animations.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Animations.Specific = l;
                        foreach (var item in Animations.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Class = eval(this.Class);
                obj.Stats = this.Stats == null ? null : new MaskItem<R, NpcData.Mask<R>?>(eval(this.Stats.Overall), this.Stats.Specific?.Translate(eval));
                obj.Hair = eval(this.Hair);
                obj.HairLength = eval(this.HairLength);
                if (Eyes != null)
                {
                    obj.Eyes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Eyes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Eyes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Eyes.Specific = l;
                        foreach (var item in Eyes.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.HairColor = eval(this.HairColor);
                obj.CombatStyle = eval(this.CombatStyle);
                obj.FaceGenGeometrySymmetric = eval(this.FaceGenGeometrySymmetric);
                obj.FaceGenGeometryAsymmetric = eval(this.FaceGenGeometryAsymmetric);
                obj.FaceGenTextureSymmetric = eval(this.FaceGenTextureSymmetric);
                obj.FNAM = eval(this.FNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Npc.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Npc.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Npc.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.Configuration?.Overall ?? true)
                    {
                        Configuration?.Print(sb);
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions is {} FactionsItem)
                    {
                        sb.AppendLine("Factions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DeathItem ?? true)
                    {
                        sb.AppendItem(DeathItem, "DeathItem");
                    }
                    if (printMask?.Race ?? true)
                    {
                        sb.AppendItem(Race, "Race");
                    }
                    if ((printMask?.Spells?.Overall ?? true)
                        && Spells is {} SpellsItem)
                    {
                        sb.AppendLine("Spells =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SpellsItem.Overall);
                            if (SpellsItem.Specific != null)
                            {
                                foreach (var subItem in SpellsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Script ?? true)
                    {
                        sb.AppendItem(Script, "Script");
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        sb.AppendLine("Items =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.AIData?.Overall ?? true)
                    {
                        AIData?.Print(sb);
                    }
                    if ((printMask?.AIPackages?.Overall ?? true)
                        && AIPackages is {} AIPackagesItem)
                    {
                        sb.AppendLine("AIPackages =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AIPackagesItem.Overall);
                            if (AIPackagesItem.Specific != null)
                            {
                                foreach (var subItem in AIPackagesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Animations?.Overall ?? true)
                        && Animations is {} AnimationsItem)
                    {
                        sb.AppendLine("Animations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AnimationsItem.Overall);
                            if (AnimationsItem.Specific != null)
                            {
                                foreach (var subItem in AnimationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Class ?? true)
                    {
                        sb.AppendItem(Class, "Class");
                    }
                    if (printMask?.Stats?.Overall ?? true)
                    {
                        Stats?.Print(sb);
                    }
                    if (printMask?.Hair ?? true)
                    {
                        sb.AppendItem(Hair, "Hair");
                    }
                    if (printMask?.HairLength ?? true)
                    {
                        sb.AppendItem(HairLength, "HairLength");
                    }
                    if ((printMask?.Eyes?.Overall ?? true)
                        && Eyes is {} EyesItem)
                    {
                        sb.AppendLine("Eyes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EyesItem.Overall);
                            if (EyesItem.Specific != null)
                            {
                                foreach (var subItem in EyesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.HairColor ?? true)
                    {
                        sb.AppendItem(HairColor, "HairColor");
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        sb.AppendItem(CombatStyle, "CombatStyle");
                    }
                    if (printMask?.FaceGenGeometrySymmetric ?? true)
                    {
                        sb.AppendItem(FaceGenGeometrySymmetric, "FaceGenGeometrySymmetric");
                    }
                    if (printMask?.FaceGenGeometryAsymmetric ?? true)
                    {
                        sb.AppendItem(FaceGenGeometryAsymmetric, "FaceGenGeometryAsymmetric");
                    }
                    if (printMask?.FaceGenTextureSymmetric ?? true)
                    {
                        sb.AppendItem(FaceGenTextureSymmetric, "FaceGenTextureSymmetric");
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, NpcConfiguration.ErrorMask?>? Configuration;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>? Factions;
            public Exception? DeathItem;
            public Exception? Race;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public Exception? Script;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>? Items;
            public MaskItem<Exception?, AIData.ErrorMask?>? AIData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AIPackages;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Animations;
            public Exception? Class;
            public MaskItem<Exception?, NpcData.ErrorMask?>? Stats;
            public Exception? Hair;
            public Exception? HairLength;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Eyes;
            public Exception? HairColor;
            public Exception? CombatStyle;
            public Exception? FaceGenGeometrySymmetric;
            public Exception? FaceGenGeometryAsymmetric;
            public Exception? FaceGenTextureSymmetric;
            public Exception? FNAM;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.Name:
                        return Name;
                    case Npc_FieldIndex.Model:
                        return Model;
                    case Npc_FieldIndex.Configuration:
                        return Configuration;
                    case Npc_FieldIndex.Factions:
                        return Factions;
                    case Npc_FieldIndex.DeathItem:
                        return DeathItem;
                    case Npc_FieldIndex.Race:
                        return Race;
                    case Npc_FieldIndex.Spells:
                        return Spells;
                    case Npc_FieldIndex.Script:
                        return Script;
                    case Npc_FieldIndex.Items:
                        return Items;
                    case Npc_FieldIndex.AIData:
                        return AIData;
                    case Npc_FieldIndex.AIPackages:
                        return AIPackages;
                    case Npc_FieldIndex.Animations:
                        return Animations;
                    case Npc_FieldIndex.Class:
                        return Class;
                    case Npc_FieldIndex.Stats:
                        return Stats;
                    case Npc_FieldIndex.Hair:
                        return Hair;
                    case Npc_FieldIndex.HairLength:
                        return HairLength;
                    case Npc_FieldIndex.Eyes:
                        return Eyes;
                    case Npc_FieldIndex.HairColor:
                        return HairColor;
                    case Npc_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case Npc_FieldIndex.FaceGenGeometrySymmetric:
                        return FaceGenGeometrySymmetric;
                    case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                        return FaceGenGeometryAsymmetric;
                    case Npc_FieldIndex.FaceGenTextureSymmetric:
                        return FaceGenTextureSymmetric;
                    case Npc_FieldIndex.FNAM:
                        return FNAM;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Npc_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Configuration:
                        this.Configuration = new MaskItem<Exception?, NpcConfiguration.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.DeathItem:
                        this.DeathItem = ex;
                        break;
                    case Npc_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case Npc_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Script:
                        this.Script = ex;
                        break;
                    case Npc_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.AIData:
                        this.AIData = new MaskItem<Exception?, AIData.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.AIPackages:
                        this.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Animations:
                        this.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Class:
                        this.Class = ex;
                        break;
                    case Npc_FieldIndex.Stats:
                        this.Stats = new MaskItem<Exception?, NpcData.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Hair:
                        this.Hair = ex;
                        break;
                    case Npc_FieldIndex.HairLength:
                        this.HairLength = ex;
                        break;
                    case Npc_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.HairColor:
                        this.HairColor = ex;
                        break;
                    case Npc_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case Npc_FieldIndex.FaceGenGeometrySymmetric:
                        this.FaceGenGeometrySymmetric = ex;
                        break;
                    case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                        this.FaceGenGeometryAsymmetric = ex;
                        break;
                    case Npc_FieldIndex.FaceGenTextureSymmetric:
                        this.FaceGenTextureSymmetric = ex;
                        break;
                    case Npc_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Configuration:
                        this.Configuration = (MaskItem<Exception?, NpcConfiguration.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.DeathItem:
                        this.DeathItem = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Race:
                        this.Race = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Script:
                        this.Script = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.AIData:
                        this.AIData = (MaskItem<Exception?, AIData.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.AIPackages:
                        this.AIPackages = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Animations:
                        this.Animations = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Class:
                        this.Class = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Stats:
                        this.Stats = (MaskItem<Exception?, NpcData.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Hair:
                        this.Hair = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.HairLength:
                        this.HairLength = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.HairColor:
                        this.HairColor = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FaceGenGeometrySymmetric:
                        this.FaceGenGeometrySymmetric = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FaceGenGeometryAsymmetric:
                        this.FaceGenGeometryAsymmetric = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FaceGenTextureSymmetric:
                        this.FaceGenTextureSymmetric = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Configuration != null) return true;
                if (Factions != null) return true;
                if (DeathItem != null) return true;
                if (Race != null) return true;
                if (Spells != null) return true;
                if (Script != null) return true;
                if (Items != null) return true;
                if (AIData != null) return true;
                if (AIPackages != null) return true;
                if (Animations != null) return true;
                if (Class != null) return true;
                if (Stats != null) return true;
                if (Hair != null) return true;
                if (HairLength != null) return true;
                if (Eyes != null) return true;
                if (HairColor != null) return true;
                if (CombatStyle != null) return true;
                if (FaceGenGeometrySymmetric != null) return true;
                if (FaceGenGeometryAsymmetric != null) return true;
                if (FaceGenTextureSymmetric != null) return true;
                if (FNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                Configuration?.Print(sb);
                if (Factions is {} FactionsItem)
                {
                    sb.AppendLine("Factions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DeathItem, "DeathItem");
                }
                {
                    sb.AppendItem(Race, "Race");
                }
                if (Spells is {} SpellsItem)
                {
                    sb.AppendLine("Spells =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SpellsItem.Overall);
                        if (SpellsItem.Specific != null)
                        {
                            foreach (var subItem in SpellsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Script, "Script");
                }
                if (Items is {} ItemsItem)
                {
                    sb.AppendLine("Items =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                AIData?.Print(sb);
                if (AIPackages is {} AIPackagesItem)
                {
                    sb.AppendLine("AIPackages =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AIPackagesItem.Overall);
                        if (AIPackagesItem.Specific != null)
                        {
                            foreach (var subItem in AIPackagesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Animations is {} AnimationsItem)
                {
                    sb.AppendLine("Animations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AnimationsItem.Overall);
                        if (AnimationsItem.Specific != null)
                        {
                            foreach (var subItem in AnimationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Class, "Class");
                }
                Stats?.Print(sb);
                {
                    sb.AppendItem(Hair, "Hair");
                }
                {
                    sb.AppendItem(HairLength, "HairLength");
                }
                if (Eyes is {} EyesItem)
                {
                    sb.AppendLine("Eyes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EyesItem.Overall);
                        if (EyesItem.Specific != null)
                        {
                            foreach (var subItem in EyesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(HairColor, "HairColor");
                }
                {
                    sb.AppendItem(CombatStyle, "CombatStyle");
                }
                {
                    sb.AppendItem(FaceGenGeometrySymmetric, "FaceGenGeometrySymmetric");
                }
                {
                    sb.AppendItem(FaceGenGeometryAsymmetric, "FaceGenGeometryAsymmetric");
                }
                {
                    sb.AppendItem(FaceGenTextureSymmetric, "FaceGenTextureSymmetric");
                }
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Configuration = this.Configuration.Combine(rhs.Configuration, (l, r) => l.Combine(r));
                ret.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), Noggog.ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
                ret.Race = this.Race.Combine(rhs.Race);
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), Noggog.ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Script = this.Script.Combine(rhs.Script);
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ItemEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), Noggog.ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.AIData = this.AIData.Combine(rhs.AIData, (l, r) => l.Combine(r));
                ret.AIPackages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AIPackages?.Overall, rhs.AIPackages?.Overall), Noggog.ExceptionExt.Combine(this.AIPackages?.Specific, rhs.AIPackages?.Specific));
                ret.Animations = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Animations?.Overall, rhs.Animations?.Overall), Noggog.ExceptionExt.Combine(this.Animations?.Specific, rhs.Animations?.Specific));
                ret.Class = this.Class.Combine(rhs.Class);
                ret.Stats = this.Stats.Combine(rhs.Stats, (l, r) => l.Combine(r));
                ret.Hair = this.Hair.Combine(rhs.Hair);
                ret.HairLength = this.HairLength.Combine(rhs.HairLength);
                ret.Eyes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Eyes?.Overall, rhs.Eyes?.Overall), Noggog.ExceptionExt.Combine(this.Eyes?.Specific, rhs.Eyes?.Specific));
                ret.HairColor = this.HairColor.Combine(rhs.HairColor);
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.FaceGenGeometrySymmetric = this.FaceGenGeometrySymmetric.Combine(rhs.FaceGenGeometrySymmetric);
                ret.FaceGenGeometryAsymmetric = this.FaceGenGeometryAsymmetric.Combine(rhs.FaceGenGeometryAsymmetric);
                ret.FaceGenTextureSymmetric = this.FaceGenTextureSymmetric.Combine(rhs.FaceGenTextureSymmetric);
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public Model.TranslationMask? Model;
            public NpcConfiguration.TranslationMask? Configuration;
            public RankPlacement.TranslationMask? Factions;
            public bool DeathItem;
            public bool Race;
            public bool Spells;
            public bool Script;
            public ItemEntry.TranslationMask? Items;
            public AIData.TranslationMask? AIData;
            public bool AIPackages;
            public bool Animations;
            public bool Class;
            public NpcData.TranslationMask? Stats;
            public bool Hair;
            public bool HairLength;
            public bool Eyes;
            public bool HairColor;
            public bool CombatStyle;
            public bool FaceGenGeometrySymmetric;
            public bool FaceGenGeometryAsymmetric;
            public bool FaceGenTextureSymmetric;
            public bool FNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.DeathItem = defaultOn;
                this.Race = defaultOn;
                this.Spells = defaultOn;
                this.Script = defaultOn;
                this.AIPackages = defaultOn;
                this.Animations = defaultOn;
                this.Class = defaultOn;
                this.Hair = defaultOn;
                this.HairLength = defaultOn;
                this.Eyes = defaultOn;
                this.HairColor = defaultOn;
                this.CombatStyle = defaultOn;
                this.FaceGenGeometrySymmetric = defaultOn;
                this.FaceGenGeometryAsymmetric = defaultOn;
                this.FaceGenTextureSymmetric = defaultOn;
                this.FNAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Configuration != null ? Configuration.OnOverall : DefaultOn, Configuration?.GetCrystal()));
                ret.Add((Factions == null ? DefaultOn : !Factions.GetCrystal().CopyNothing, Factions?.GetCrystal()));
                ret.Add((DeathItem, null));
                ret.Add((Race, null));
                ret.Add((Spells, null));
                ret.Add((Script, null));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((AIData != null ? AIData.OnOverall : DefaultOn, AIData?.GetCrystal()));
                ret.Add((AIPackages, null));
                ret.Add((Animations, null));
                ret.Add((Class, null));
                ret.Add((Stats != null ? Stats.OnOverall : DefaultOn, Stats?.GetCrystal()));
                ret.Add((Hair, null));
                ret.Add((HairLength, null));
                ret.Add((Eyes, null));
                ret.Add((HairColor, null));
                ret.Add((CombatStyle, null));
                ret.Add((FaceGenGeometrySymmetric, null));
                ret.Add((FaceGenGeometryAsymmetric, null));
                ret.Add((FaceGenTextureSymmetric, null));
                ret.Add((FNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Npc_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcSetterCommon.Instance.RemapLinks(this, mapping);
        public Npc(
            FormKey formKey,
            OblivionRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Npc(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Npc(IOblivionMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.OblivionRelease)
        {
        }

        public Npc(IOblivionMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.OblivionRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Npc>.ToString(this);
        }

        protected override Type LinkType => typeof(INpc);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not INpcGetter rhs) return false;
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcGetter? obj)
        {
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcCommon)((INpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Npc CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Npc();
            ((NpcSetterCommon)((INpcGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Npc item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcSetterCommon)((INpcGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Npc GetNew()
        {
            return new Npc();
        }

    }
    #endregion

    #region Interface
    public partial interface INpc :
        IFormLinkContainer,
        ILoquiObjectSetter<INpcInternal>,
        IModeled,
        INamed,
        INamedRequired,
        INpcGetter,
        INpcRecord,
        INpcSpawn,
        IOblivionMajorRecordInternal,
        IOwner
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new NpcConfiguration? Configuration { get; set; }
        new ExtendedList<RankPlacement> Factions { get; }
        new IFormLinkNullable<IItemGetter> DeathItem { get; set; }
        new IFormLinkNullable<IRaceGetter> Race { get; set; }
        new ExtendedList<IFormLinkGetter<ISpellRecordGetter>> Spells { get; }
        new IFormLinkNullable<IScriptGetter> Script { get; set; }
        new ExtendedList<ItemEntry> Items { get; }
        new AIData? AIData { get; set; }
        new ExtendedList<IFormLinkGetter<IAIPackageGetter>> AIPackages { get; }
        new ExtendedList<String>? Animations { get; set; }
        new IFormLinkNullable<IClassGetter> Class { get; set; }
        new NpcData? Stats { get; set; }
        new IFormLinkNullable<IHairGetter> Hair { get; set; }
        new Single? HairLength { get; set; }
        new ExtendedList<IFormLinkGetter<IEyeGetter>>? Eyes { get; set; }
        new Color? HairColor { get; set; }
        new IFormLinkNullable<ICombatStyleGetter> CombatStyle { get; set; }
        new MemorySlice<Byte>? FaceGenGeometrySymmetric { get; set; }
        new MemorySlice<Byte>? FaceGenGeometryAsymmetric { get; set; }
        new MemorySlice<Byte>? FaceGenTextureSymmetric { get; set; }
        new MemorySlice<Byte>? FNAM { get; set; }
    }

    public partial interface INpcInternal :
        IOblivionMajorRecordInternal,
        INpc,
        INpcGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.NPC_)]
    public partial interface INpcGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<INpcGetter>,
        IMapsToGetter<INpcGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        INpcRecordGetter,
        INpcSpawnGetter,
        IOwnerGetter
    {
        static new ILoquiRegistration StaticRegistration => Npc_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        INpcConfigurationGetter? Configuration { get; }
        IReadOnlyList<IRankPlacementGetter> Factions { get; }
        IFormLinkNullableGetter<IItemGetter> DeathItem { get; }
        IFormLinkNullableGetter<IRaceGetter> Race { get; }
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>> Spells { get; }
        IFormLinkNullableGetter<IScriptGetter> Script { get; }
        IReadOnlyList<IItemEntryGetter> Items { get; }
        IAIDataGetter? AIData { get; }
        IReadOnlyList<IFormLinkGetter<IAIPackageGetter>> AIPackages { get; }
        IReadOnlyList<String>? Animations { get; }
        IFormLinkNullableGetter<IClassGetter> Class { get; }
        INpcDataGetter? Stats { get; }
        IFormLinkNullableGetter<IHairGetter> Hair { get; }
        Single? HairLength { get; }
        IReadOnlyList<IFormLinkGetter<IEyeGetter>>? Eyes { get; }
        Color? HairColor { get; }
        IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle { get; }
        ReadOnlyMemorySlice<Byte>? FaceGenGeometrySymmetric { get; }
        ReadOnlyMemorySlice<Byte>? FaceGenGeometryAsymmetric { get; }
        ReadOnlyMemorySlice<Byte>? FaceGenTextureSymmetric { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class NpcMixIn
    {
        public static void Clear(this INpcInternal item)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Npc.Mask<bool> GetEqualsMask(
            this INpcGetter item,
            INpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcGetter item,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcGetter item,
            INpcGetter rhs,
            Npc.TranslationMask? equalsMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcInternal lhs,
            INpcGetter rhs,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcSetterTranslationCommon)((INpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcInternal lhs,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcSetterTranslationCommon)((INpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Npc Duplicate(
            this INpcGetter item,
            FormKey formKey,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Npc Duplicate(
            this INpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum Npc_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Model = 6,
        Configuration = 7,
        Factions = 8,
        DeathItem = 9,
        Race = 10,
        Spells = 11,
        Script = 12,
        Items = 13,
        AIData = 14,
        AIPackages = 15,
        Animations = 16,
        Class = 17,
        Stats = 18,
        Hair = 19,
        HairLength = 20,
        Eyes = 21,
        HairColor = 22,
        CombatStyle = 23,
        FaceGenGeometrySymmetric = 24,
        FaceGenGeometryAsymmetric = 25,
        FaceGenTextureSymmetric = 26,
        FNAM = 27,
    }
    #endregion

    #region Registration
    internal partial class Npc_Registration : ILoquiRegistration
    {
        public static readonly Npc_Registration Instance = new Npc_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 23;

        public const ushort FieldCount = 28;

        public static readonly Type MaskType = typeof(Npc.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Npc.ErrorMask);

        public static readonly Type ClassType = typeof(Npc);

        public static readonly Type GetterType = typeof(INpcGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpc);

        public static readonly Type? InternalSetterType = typeof(INpcInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Npc";

        public const string Name = "Npc";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NPC_;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NPC_);
            var all = RecordCollection.Factory(
                RecordTypes.NPC_,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.ACBS,
                RecordTypes.SNAM,
                RecordTypes.INAM,
                RecordTypes.RNAM,
                RecordTypes.SPLO,
                RecordTypes.SCRI,
                RecordTypes.CNTO,
                RecordTypes.AIDT,
                RecordTypes.PKID,
                RecordTypes.KFFZ,
                RecordTypes.CNAM,
                RecordTypes.DATA,
                RecordTypes.HNAM,
                RecordTypes.LNAM,
                RecordTypes.ENAM,
                RecordTypes.HCLR,
                RecordTypes.ZNAM,
                RecordTypes.FGGS,
                RecordTypes.FGGA,
                RecordTypes.FGTS,
                RecordTypes.FNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NpcBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly NpcSetterCommon Instance = new NpcSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Model = null;
            item.Configuration = null;
            item.Factions.Clear();
            item.DeathItem.Clear();
            item.Race.Clear();
            item.Spells.Clear();
            item.Script.Clear();
            item.Items.Clear();
            item.AIData = null;
            item.AIPackages.Clear();
            item.Animations = null;
            item.Class.Clear();
            item.Stats = null;
            item.Hair.Clear();
            item.HairLength = default;
            item.Eyes = null;
            item.HairColor = default;
            item.CombatStyle.Clear();
            item.FaceGenGeometrySymmetric = default;
            item.FaceGenGeometryAsymmetric = default;
            item.FaceGenTextureSymmetric = default;
            item.FNAM = default;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(INpc obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Factions.RemapLinks(mapping);
            obj.DeathItem.Relink(mapping);
            obj.Race.Relink(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Script.Relink(mapping);
            obj.Items.RemapLinks(mapping);
            obj.AIPackages.RemapLinks(mapping);
            obj.Class.Relink(mapping);
            obj.Hair.Relink(mapping);
            obj.Eyes?.RemapLinks(mapping);
            obj.CombatStyle.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<INpcInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NpcBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class NpcCommon : OblivionMajorRecordCommon
    {
        public new static readonly NpcCommon Instance = new NpcCommon();

        public Npc.Mask<bool> GetEqualsMask(
            INpcGetter item,
            INpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Npc.Mask<bool>(false);
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcGetter item,
            INpcGetter rhs,
            Npc.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Configuration = EqualsMaskHelper.EqualsHelper(
                item.Configuration,
                rhs.Configuration,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = item.DeathItem.Equals(rhs.DeathItem);
            ret.Race = item.Race.Equals(rhs.Race);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Script = item.Script.Equals(rhs.Script);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AIData = EqualsMaskHelper.EqualsHelper(
                item.AIData,
                rhs.AIData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AIPackages = item.AIPackages.CollectionEqualsHelper(
                rhs.AIPackages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Animations = item.Animations.CollectionEqualsHelper(
                rhs.Animations,
                (l, r) => string.Equals(l, r),
                include);
            ret.Class = item.Class.Equals(rhs.Class);
            ret.Stats = EqualsMaskHelper.EqualsHelper(
                item.Stats,
                rhs.Stats,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Hair = item.Hair.Equals(rhs.Hair);
            ret.HairLength = item.HairLength.EqualsWithin(rhs.HairLength);
            ret.Eyes = item.Eyes.CollectionEqualsHelper(
                rhs.Eyes,
                (l, r) => object.Equals(l, r),
                include);
            ret.HairColor = item.HairColor.ColorOnlyEquals(rhs.HairColor);
            ret.CombatStyle = item.CombatStyle.Equals(rhs.CombatStyle);
            ret.FaceGenGeometrySymmetric = MemorySliceExt.SequenceEqual(item.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric);
            ret.FaceGenGeometryAsymmetric = MemorySliceExt.SequenceEqual(item.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric);
            ret.FaceGenTextureSymmetric = MemorySliceExt.SequenceEqual(item.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric);
            ret.FNAM = MemorySliceExt.SequenceEqual(item.FNAM, rhs.FNAM);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            INpcGetter item,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Npc =>");
            }
            else
            {
                sb.AppendLine($"{name} (Npc) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcGetter item,
            StructuredStringBuilder sb,
            Npc.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.Configuration?.Overall ?? true)
                && item.Configuration is {} ConfigurationItem)
            {
                ConfigurationItem?.Print(sb, "Configuration");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                sb.AppendLine("Factions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Factions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.DeathItem ?? true)
            {
                sb.AppendItem(item.DeathItem.FormKeyNullable, "DeathItem");
            }
            if (printMask?.Race ?? true)
            {
                sb.AppendItem(item.Race.FormKeyNullable, "Race");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                sb.AppendLine("Spells =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Spells)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Script ?? true)
            {
                sb.AppendItem(item.Script.FormKeyNullable, "Script");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                sb.AppendLine("Items =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Items)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.AIData?.Overall ?? true)
                && item.AIData is {} AIDataItem)
            {
                AIDataItem?.Print(sb, "AIData");
            }
            if (printMask?.AIPackages?.Overall ?? true)
            {
                sb.AppendLine("AIPackages =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.AIPackages)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Animations?.Overall ?? true)
                && item.Animations is {} AnimationsItem)
            {
                sb.AppendLine("Animations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in AnimationsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.Class ?? true)
            {
                sb.AppendItem(item.Class.FormKeyNullable, "Class");
            }
            if ((printMask?.Stats?.Overall ?? true)
                && item.Stats is {} StatsItem)
            {
                StatsItem?.Print(sb, "Stats");
            }
            if (printMask?.Hair ?? true)
            {
                sb.AppendItem(item.Hair.FormKeyNullable, "Hair");
            }
            if ((printMask?.HairLength ?? true)
                && item.HairLength is {} HairLengthItem)
            {
                sb.AppendItem(HairLengthItem, "HairLength");
            }
            if ((printMask?.Eyes?.Overall ?? true)
                && item.Eyes is {} EyesItem)
            {
                sb.AppendLine("Eyes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in EyesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.HairColor ?? true)
                && item.HairColor is {} HairColorItem)
            {
                sb.AppendItem(HairColorItem, "HairColor");
            }
            if (printMask?.CombatStyle ?? true)
            {
                sb.AppendItem(item.CombatStyle.FormKeyNullable, "CombatStyle");
            }
            if ((printMask?.FaceGenGeometrySymmetric ?? true)
                && item.FaceGenGeometrySymmetric is {} FaceGenGeometrySymmetricItem)
            {
                sb.AppendLine($"FaceGenGeometrySymmetric => {SpanExt.ToHexString(FaceGenGeometrySymmetricItem)}");
            }
            if ((printMask?.FaceGenGeometryAsymmetric ?? true)
                && item.FaceGenGeometryAsymmetric is {} FaceGenGeometryAsymmetricItem)
            {
                sb.AppendLine($"FaceGenGeometryAsymmetric => {SpanExt.ToHexString(FaceGenGeometryAsymmetricItem)}");
            }
            if ((printMask?.FaceGenTextureSymmetric ?? true)
                && item.FaceGenTextureSymmetric is {} FaceGenTextureSymmetricItem)
            {
                sb.AppendLine($"FaceGenTextureSymmetric => {SpanExt.ToHexString(FaceGenTextureSymmetricItem)}");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
        }
        
        public static Npc_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Npc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Npc_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcGetter? lhs,
            INpcGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Configuration) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Configuration, rhs.Configuration, out var lhsConfiguration, out var rhsConfiguration, out var isConfigurationEqual))
                {
                    if (!((NpcConfigurationCommon)((INpcConfigurationGetter)lhsConfiguration).CommonInstance()!).Equals(lhsConfiguration, rhsConfiguration, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Configuration))) return false;
                }
                else if (!isConfigurationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Factions) ?? true))
            {
                if (!lhs.Factions.SequenceEqual(rhs.Factions, (l, r) => ((RankPlacementCommon)((IRankPlacementGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Factions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.DeathItem) ?? true))
            {
                if (!lhs.DeathItem.Equals(rhs.DeathItem)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Race) ?? true))
            {
                if (!lhs.Race.Equals(rhs.Race)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Spells) ?? true))
            {
                if (!lhs.Spells.SequenceEqualNullable(rhs.Spells)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Script) ?? true))
            {
                if (!lhs.Script.Equals(rhs.Script)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqual(rhs.Items, (l, r) => ((ItemEntryCommon)((IItemEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Items)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AIData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AIData, rhs.AIData, out var lhsAIData, out var rhsAIData, out var isAIDataEqual))
                {
                    if (!((AIDataCommon)((IAIDataGetter)lhsAIData).CommonInstance()!).Equals(lhsAIData, rhsAIData, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.AIData))) return false;
                }
                else if (!isAIDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AIPackages) ?? true))
            {
                if (!lhs.AIPackages.SequenceEqualNullable(rhs.AIPackages)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Animations) ?? true))
            {
                if (!lhs.Animations.SequenceEqualNullable(rhs.Animations)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Class) ?? true))
            {
                if (!lhs.Class.Equals(rhs.Class)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Stats) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Stats, rhs.Stats, out var lhsStats, out var rhsStats, out var isStatsEqual))
                {
                    if (!((NpcDataCommon)((INpcDataGetter)lhsStats).CommonInstance()!).Equals(lhsStats, rhsStats, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Stats))) return false;
                }
                else if (!isStatsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Hair) ?? true))
            {
                if (!lhs.Hair.Equals(rhs.Hair)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.HairLength) ?? true))
            {
                if (!lhs.HairLength.EqualsWithin(rhs.HairLength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Eyes) ?? true))
            {
                if (!lhs.Eyes.SequenceEqualNullable(rhs.Eyes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.HairColor) ?? true))
            {
                if (!lhs.HairColor.ColorOnlyEquals(rhs.HairColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatStyle) ?? true))
            {
                if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenGeometrySymmetric) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FaceGenGeometrySymmetric, rhs.FaceGenGeometrySymmetric)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenGeometryAsymmetric) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FaceGenGeometryAsymmetric, rhs.FaceGenGeometryAsymmetric)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenTextureSymmetric) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FaceGenTextureSymmetric, rhs.FaceGenTextureSymmetric)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNAM, rhs.FNAM)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(INpcGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.Configuration is {} Configurationitem)
            {
                hash.Add(Configurationitem);
            }
            hash.Add(item.Factions);
            hash.Add(item.DeathItem);
            hash.Add(item.Race);
            hash.Add(item.Spells);
            hash.Add(item.Script);
            hash.Add(item.Items);
            if (item.AIData is {} AIDataitem)
            {
                hash.Add(AIDataitem);
            }
            hash.Add(item.AIPackages);
            hash.Add(item.Animations);
            hash.Add(item.Class);
            if (item.Stats is {} Statsitem)
            {
                hash.Add(Statsitem);
            }
            hash.Add(item.Hair);
            if (item.HairLength is {} HairLengthitem)
            {
                hash.Add(HairLengthitem);
            }
            hash.Add(item.Eyes);
            if (item.HairColor is {} HairColoritem)
            {
                hash.Add(HairColoritem);
            }
            hash.Add(item.CombatStyle);
            if (item.FaceGenGeometrySymmetric is {} FaceGenGeometrySymmetricItem)
            {
                hash.Add(FaceGenGeometrySymmetricItem);
            }
            if (item.FaceGenGeometryAsymmetric is {} FaceGenGeometryAsymmetricItem)
            {
                hash.Add(FaceGenGeometryAsymmetricItem);
            }
            if (item.FaceGenTextureSymmetric is {} FaceGenTextureSymmetricItem)
            {
                hash.Add(FaceGenTextureSymmetricItem);
            }
            if (item.FNAM is {} FNAMItem)
            {
                hash.Add(FNAMItem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Npc.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Factions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.DeathItem, out var DeathItemInfo))
            {
                yield return DeathItemInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Race, out var RaceInfo))
            {
                yield return RaceInfo;
            }
            foreach (var item in obj.Spells)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Script, out var ScriptInfo))
            {
                yield return ScriptInfo;
            }
            foreach (var item in obj.Items.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.AIPackages)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Class, out var ClassInfo))
            {
                yield return ClassInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Hair, out var HairInfo))
            {
                yield return HairInfo;
            }
            if (obj.Eyes is {} EyesItem)
            {
                foreach (var item in EyesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.CombatStyle, out var CombatStyleInfo))
            {
                yield return CombatStyleInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public Npc Duplicate(
            INpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Npc(formKey, default(OblivionRelease));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INpcGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INpcGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class NpcSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly NpcSetterTranslationCommon Instance = new NpcSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcInternal item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            INpc item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Configuration) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Configuration);
                try
                {
                    if(rhs.Configuration is {} rhsConfiguration)
                    {
                        item.Configuration = rhsConfiguration.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Configuration));
                    }
                    else
                    {
                        item.Configuration = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Factions);
                try
                {
                    item.Factions.SetTo(
                        rhs.Factions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DeathItem) ?? true))
            {
                item.DeathItem.SetTo(rhs.DeathItem.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Race) ?? true))
            {
                item.Race.SetTo(rhs.Race.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Spells);
                try
                {
                    item.Spells.SetTo(
                        rhs.Spells
                            .Select(b => (IFormLinkGetter<ISpellRecordGetter>)new FormLink<ISpellRecordGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Script) ?? true))
            {
                item.Script.SetTo(rhs.Script.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Items);
                try
                {
                    item.Items.SetTo(
                        rhs.Items
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AIData) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.AIData);
                try
                {
                    if(rhs.AIData is {} rhsAIData)
                    {
                        item.AIData = rhsAIData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.AIData));
                    }
                    else
                    {
                        item.AIData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AIPackages) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.AIPackages);
                try
                {
                    item.AIPackages.SetTo(
                        rhs.AIPackages
                            .Select(b => (IFormLinkGetter<IAIPackageGetter>)new FormLink<IAIPackageGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Animations) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Animations);
                try
                {
                    if ((rhs.Animations != null))
                    {
                        item.Animations = 
                            rhs.Animations
                            .ToExtendedList<String>();
                    }
                    else
                    {
                        item.Animations = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Class) ?? true))
            {
                item.Class.SetTo(rhs.Class.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Stats) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Stats);
                try
                {
                    if(rhs.Stats is {} rhsStats)
                    {
                        item.Stats = rhsStats.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Stats));
                    }
                    else
                    {
                        item.Stats = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Hair) ?? true))
            {
                item.Hair.SetTo(rhs.Hair.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HairLength) ?? true))
            {
                item.HairLength = rhs.HairLength;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Eyes);
                try
                {
                    if ((rhs.Eyes != null))
                    {
                        item.Eyes = 
                            rhs.Eyes
                                .Select(b => (IFormLinkGetter<IEyeGetter>)new FormLink<IEyeGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IEyeGetter>>();
                    }
                    else
                    {
                        item.Eyes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HairColor) ?? true))
            {
                item.HairColor = rhs.HairColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle.SetTo(rhs.CombatStyle.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenGeometrySymmetric) ?? true))
            {
                if(rhs.FaceGenGeometrySymmetric is {} FaceGenGeometrySymmetricrhs)
                {
                    item.FaceGenGeometrySymmetric = FaceGenGeometrySymmetricrhs.ToArray();
                }
                else
                {
                    item.FaceGenGeometrySymmetric = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenGeometryAsymmetric) ?? true))
            {
                if(rhs.FaceGenGeometryAsymmetric is {} FaceGenGeometryAsymmetricrhs)
                {
                    item.FaceGenGeometryAsymmetric = FaceGenGeometryAsymmetricrhs.ToArray();
                }
                else
                {
                    item.FaceGenGeometryAsymmetric = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceGenTextureSymmetric) ?? true))
            {
                if(rhs.FaceGenTextureSymmetric is {} FaceGenTextureSymmetricrhs)
                {
                    item.FaceGenTextureSymmetric = FaceGenTextureSymmetricrhs.ToArray();
                }
                else
                {
                    item.FaceGenTextureSymmetric = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM is {} FNAMrhs)
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            INpc item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Npc DeepCopy(
            INpcGetter item,
            Npc.TranslationMask? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Npc DeepCopy(
            INpcGetter item,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Npc DeepCopy(
            INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Npc
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Npc_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Npc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NpcSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class NpcBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly NpcBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            INpcGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Configuration is {} ConfigurationItem)
            {
                ((NpcConfigurationBinaryWriteTranslation)((IBinaryItem)ConfigurationItem).BinaryWriteTranslator).Write(
                    item: ConfigurationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRankPlacementGetter>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IRankPlacementGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((RankPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DeathItem,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Race,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.SPLO));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Script,
                header: translationParams.ConvertToCustom(RecordTypes.SCRI));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IItemEntryGetter>.Instance.Write(
                writer: writer,
                items: item.Items,
                transl: (MutagenWriter subWriter, IItemEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ItemEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.AIData is {} AIDataItem)
            {
                ((AIDataBinaryWriteTranslation)((IBinaryItem)AIDataItem).BinaryWriteTranslator).Write(
                    item: AIDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IAIPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.AIPackages,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IAIPackageGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.PKID));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.Write(
                writer: writer,
                items: item.Animations,
                recordType: translationParams.ConvertToCustom(RecordTypes.KFFZ),
                writeNullSuffix: true,
                transl: StringBinaryTranslation.Instance.Write);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Class,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            if (item.Stats is {} StatsItem)
            {
                ((NpcDataBinaryWriteTranslation)((IBinaryItem)StatsItem).BinaryWriteTranslator).Write(
                    item: StatsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Hair,
                header: translationParams.ConvertToCustom(RecordTypes.HNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.HairLength,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Write(
                writer: writer,
                items: item.Eyes,
                recordType: translationParams.ConvertToCustom(RecordTypes.ENAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IEyeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HairColor,
                header: translationParams.ConvertToCustom(RecordTypes.HCLR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FaceGenGeometrySymmetric,
                header: translationParams.ConvertToCustom(RecordTypes.FGGS));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FaceGenGeometryAsymmetric,
                header: translationParams.ConvertToCustom(RecordTypes.FGGA));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FaceGenTextureSymmetric,
                header: translationParams.ConvertToCustom(RecordTypes.FGTS));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
        }

        public void Write(
            MutagenWriter writer,
            INpcGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.NPC_,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly NpcBinaryCreateTranslation Instance = new NpcBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.NPC_;
        public static ParseResult FillBinaryRecordTypes(
            INpcInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Npc_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Oblivion.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.Model;
                }
                case RecordTypeInts.ACBS:
                {
                    item.Configuration = Mutagen.Bethesda.Oblivion.NpcConfiguration.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.Configuration;
                }
                case RecordTypeInts.SNAM:
                {
                    item.Factions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<RankPlacement>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RankPlacement_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: RankPlacement.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.Factions;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DeathItem.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.DeathItem;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Race.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Race;
                }
                case RecordTypeInts.SPLO:
                {
                    item.Spells.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SPLO),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Npc_FieldIndex.Spells;
                }
                case RecordTypeInts.SCRI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Script.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Script;
                }
                case RecordTypeInts.CNTO:
                {
                    item.Items.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ItemEntry>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: ItemEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ItemEntry.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.Items;
                }
                case RecordTypeInts.AIDT:
                {
                    item.AIData = Mutagen.Bethesda.Oblivion.AIData.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.AIData;
                }
                case RecordTypeInts.PKID:
                {
                    item.AIPackages.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IAIPackageGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.PKID),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Npc_FieldIndex.AIPackages;
                }
                case RecordTypeInts.KFFZ:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Animations = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<String>.Instance.ParseTrimNullEnding(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: (MutagenFrame r, [MaybeNullWhen(false)] out String listSubItem) =>
                            {
                                return StringBinaryTranslation.Instance.Parse(
                                    r,
                                    item: out listSubItem,
                                    parseWhole: false,
                                    binaryType: StringBinaryType.NullTerminate);
                            })
                        .CastExtendedList<String>();
                    return (int)Npc_FieldIndex.Animations;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Class.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Class;
                }
                case RecordTypeInts.DATA:
                {
                    item.Stats = Mutagen.Bethesda.Oblivion.NpcData.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.Stats;
                }
                case RecordTypeInts.HNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Hair.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Hair;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HairLength = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.HairLength;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Eyes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IEyeGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IEyeGetter>>();
                    return (int)Npc_FieldIndex.Eyes;
                }
                case RecordTypeInts.HCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HairColor = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Npc_FieldIndex.HairColor;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatStyle.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.FGGS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceGenGeometrySymmetric = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.FaceGenGeometrySymmetric;
                }
                case RecordTypeInts.FGGA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceGenGeometryAsymmetric = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.FaceGenGeometryAsymmetric;
                }
                case RecordTypeInts.FGTS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FaceGenTextureSymmetric = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.FaceGenTextureSymmetric;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.FNAM;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class NpcBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class NpcBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        INpcGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Npc_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Npc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(INpc);


        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        #region Configuration
        private RangeInt32? _ConfigurationLocation;
        public INpcConfigurationGetter? Configuration => _ConfigurationLocation.HasValue ? NpcConfigurationBinaryOverlay.NpcConfigurationFactory(_recordData.Slice(_ConfigurationLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IRankPlacementGetter> Factions { get; private set; } = [];
        #region DeathItem
        private int? _DeathItemLocation;
        public IFormLinkNullableGetter<IItemGetter> DeathItem => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IItemGetter>(_package, _recordData, _DeathItemLocation);
        #endregion
        #region Race
        private int? _RaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> Race => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _RaceLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>> Spells { get; private set; } = [];
        #region Script
        private int? _ScriptLocation;
        public IFormLinkNullableGetter<IScriptGetter> Script => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IScriptGetter>(_package, _recordData, _ScriptLocation);
        #endregion
        public IReadOnlyList<IItemEntryGetter> Items { get; private set; } = [];
        #region AIData
        private RangeInt32? _AIDataLocation;
        public IAIDataGetter? AIData => _AIDataLocation.HasValue ? AIDataBinaryOverlay.AIDataFactory(_recordData.Slice(_AIDataLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IAIPackageGetter>> AIPackages { get; private set; } = [];
        public IReadOnlyList<String>? Animations { get; private set; }
        #region Class
        private int? _ClassLocation;
        public IFormLinkNullableGetter<IClassGetter> Class => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IClassGetter>(_package, _recordData, _ClassLocation);
        #endregion
        #region Stats
        private RangeInt32? _StatsLocation;
        public INpcDataGetter? Stats => _StatsLocation.HasValue ? NpcDataBinaryOverlay.NpcDataFactory(_recordData.Slice(_StatsLocation!.Value.Min), _package) : default;
        #endregion
        #region Hair
        private int? _HairLocation;
        public IFormLinkNullableGetter<IHairGetter> Hair => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IHairGetter>(_package, _recordData, _HairLocation);
        #endregion
        #region HairLength
        private int? _HairLengthLocation;
        public Single? HairLength => _HairLengthLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HairLengthLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IEyeGetter>>? Eyes { get; private set; }
        #region HairColor
        private int? _HairColorLocation;
        public Color? HairColor => _HairColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HairColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color?);
        #endregion
        #region CombatStyle
        private int? _CombatStyleLocation;
        public IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICombatStyleGetter>(_package, _recordData, _CombatStyleLocation);
        #endregion
        #region FaceGenGeometrySymmetric
        private int? _FaceGenGeometrySymmetricLocation;
        public ReadOnlyMemorySlice<Byte>? FaceGenGeometrySymmetric => _FaceGenGeometrySymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FaceGenGeometrySymmetricLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FaceGenGeometryAsymmetric
        private int? _FaceGenGeometryAsymmetricLocation;
        public ReadOnlyMemorySlice<Byte>? FaceGenGeometryAsymmetric => _FaceGenGeometryAsymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FaceGenGeometryAsymmetricLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FaceGenTextureSymmetric
        private int? _FaceGenTextureSymmetricLocation;
        public ReadOnlyMemorySlice<Byte>? FaceGenTextureSymmetric => _FaceGenTextureSymmetricLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FaceGenTextureSymmetricLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcGetter NpcFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NpcBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static INpcGetter NpcFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.Model;
                }
                case RecordTypeInts.ACBS:
                {
                    _ConfigurationLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.Configuration;
                }
                case RecordTypeInts.SNAM:
                {
                    this.Factions = BinaryOverlayList.FactoryByArray<IRankPlacementGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => RankPlacementBinaryOverlay.RankPlacementFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: RankPlacement_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Npc_FieldIndex.Factions;
                }
                case RecordTypeInts.INAM:
                {
                    _DeathItemLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DeathItem;
                }
                case RecordTypeInts.RNAM:
                {
                    _RaceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Race;
                }
                case RecordTypeInts.SPLO:
                {
                    this.Spells = BinaryOverlayList.FactoryByArray<IFormLinkGetter<ISpellRecordGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellRecordGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.SPLO,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Npc_FieldIndex.Spells;
                }
                case RecordTypeInts.SCRI:
                {
                    _ScriptLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Script;
                }
                case RecordTypeInts.CNTO:
                {
                    this.Items = BinaryOverlayList.FactoryByArray<IItemEntryGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ItemEntryBinaryOverlay.ItemEntryFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: ItemEntry_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Npc_FieldIndex.Items;
                }
                case RecordTypeInts.AIDT:
                {
                    _AIDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.AIData;
                }
                case RecordTypeInts.PKID:
                {
                    this.AIPackages = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IAIPackageGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IAIPackageGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.PKID,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Npc_FieldIndex.AIPackages;
                }
                case RecordTypeInts.KFFZ:
                {
                    this.Animations = BinaryOverlayList.FactoryByLazyParseWithTrigger<String>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        getter: (s, p) => BinaryStringUtility.ParseUnknownLengthString(s, encoding: p.MetaData.Encodings.NonTranslated),
                        trimNullSuffix: true);
                    return (int)Npc_FieldIndex.Animations;
                }
                case RecordTypeInts.CNAM:
                {
                    _ClassLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Class;
                }
                case RecordTypeInts.DATA:
                {
                    _StatsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.Stats;
                }
                case RecordTypeInts.HNAM:
                {
                    _HairLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Hair;
                }
                case RecordTypeInts.LNAM:
                {
                    _HairLengthLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.HairLength;
                }
                case RecordTypeInts.ENAM:
                {
                    this.Eyes = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IEyeGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IEyeGetter>(p, s));
                    return (int)Npc_FieldIndex.Eyes;
                }
                case RecordTypeInts.HCLR:
                {
                    _HairColorLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.HairColor;
                }
                case RecordTypeInts.ZNAM:
                {
                    _CombatStyleLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.FGGS:
                {
                    _FaceGenGeometrySymmetricLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FaceGenGeometrySymmetric;
                }
                case RecordTypeInts.FGGA:
                {
                    _FaceGenGeometryAsymmetricLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FaceGenGeometryAsymmetric;
                }
                case RecordTypeInts.FGTS:
                {
                    _FaceGenTextureSymmetricLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FaceGenTextureSymmetric;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FNAM;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Npc>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not INpcGetter rhs) return false;
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcGetter? obj)
        {
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcCommon)((INpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

