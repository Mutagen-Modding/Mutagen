/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ScriptFields :
        IEquatable<IScriptFieldsGetter>,
        ILoquiObjectSetter<ScriptFields>,
        IScriptFields
    {
        #region Ctor
        public ScriptFields()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MetadataSummary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly ScriptMetaSummary _MetadataSummary_Object = new ScriptMetaSummary();
        public ScriptMetaSummary MetadataSummary => _MetadataSummary_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IScriptMetaSummaryGetter IScriptFieldsGetter.MetadataSummary => _MetadataSummary_Object;
        #endregion
        #region SourceCode
        public String? SourceCode { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IScriptFieldsGetter.SourceCode => this.SourceCode;
        #endregion
        #region LocalVariables
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocalVariable> _LocalVariables = new ExtendedList<LocalVariable>();
        public ExtendedList<LocalVariable> LocalVariables
        {
            get => this._LocalVariables;
            init => this._LocalVariables = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocalVariableGetter> IScriptFieldsGetter.LocalVariables => _LocalVariables;
        #endregion

        #endregion
        #region References
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<AScriptReference> _References = new ExtendedList<AScriptReference>();
        public ExtendedList<AScriptReference> References
        {
            get => this._References;
            init => this._References = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAScriptReferenceGetter> IScriptFieldsGetter.References => _References;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ScriptFieldsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScriptFieldsGetter rhs) return false;
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IScriptFieldsGetter? obj)
        {
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ScriptFieldsCommon)((IScriptFieldsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MetadataSummary = new MaskItem<TItem, ScriptMetaSummary.Mask<TItem>?>(initialValue, new ScriptMetaSummary.Mask<TItem>(initialValue));
                this.CompiledScript = initialValue;
                this.SourceCode = initialValue;
                this.LocalVariables = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocalVariable.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocalVariable.Mask<TItem>?>>());
                this.References = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AScriptReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, AScriptReference.Mask<TItem>?>>());
            }

            public Mask(
                TItem MetadataSummary,
                TItem CompiledScript,
                TItem SourceCode,
                TItem LocalVariables,
                TItem References)
            {
                this.MetadataSummary = new MaskItem<TItem, ScriptMetaSummary.Mask<TItem>?>(MetadataSummary, new ScriptMetaSummary.Mask<TItem>(MetadataSummary));
                this.CompiledScript = CompiledScript;
                this.SourceCode = SourceCode;
                this.LocalVariables = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocalVariable.Mask<TItem>?>>?>(LocalVariables, Enumerable.Empty<MaskItemIndexed<TItem, LocalVariable.Mask<TItem>?>>());
                this.References = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AScriptReference.Mask<TItem>?>>?>(References, Enumerable.Empty<MaskItemIndexed<TItem, AScriptReference.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ScriptMetaSummary.Mask<TItem>?>? MetadataSummary { get; set; }
            public TItem CompiledScript;
            public TItem SourceCode;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocalVariable.Mask<TItem>?>>?>? LocalVariables;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, AScriptReference.Mask<TItem>?>>?>? References;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MetadataSummary, rhs.MetadataSummary)) return false;
                if (!object.Equals(this.CompiledScript, rhs.CompiledScript)) return false;
                if (!object.Equals(this.SourceCode, rhs.SourceCode)) return false;
                if (!object.Equals(this.LocalVariables, rhs.LocalVariables)) return false;
                if (!object.Equals(this.References, rhs.References)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MetadataSummary);
                hash.Add(this.CompiledScript);
                hash.Add(this.SourceCode);
                hash.Add(this.LocalVariables);
                hash.Add(this.References);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (MetadataSummary != null)
                {
                    if (!eval(this.MetadataSummary.Overall)) return false;
                    if (this.MetadataSummary.Specific != null && !this.MetadataSummary.Specific.All(eval)) return false;
                }
                if (!eval(this.CompiledScript)) return false;
                if (!eval(this.SourceCode)) return false;
                if (this.LocalVariables != null)
                {
                    if (!eval(this.LocalVariables.Overall)) return false;
                    if (this.LocalVariables.Specific != null)
                    {
                        foreach (var item in this.LocalVariables.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.References != null)
                {
                    if (!eval(this.References.Overall)) return false;
                    if (this.References.Specific != null)
                    {
                        foreach (var item in this.References.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (MetadataSummary != null)
                {
                    if (eval(this.MetadataSummary.Overall)) return true;
                    if (this.MetadataSummary.Specific != null && this.MetadataSummary.Specific.Any(eval)) return true;
                }
                if (eval(this.CompiledScript)) return true;
                if (eval(this.SourceCode)) return true;
                if (this.LocalVariables != null)
                {
                    if (eval(this.LocalVariables.Overall)) return true;
                    if (this.LocalVariables.Specific != null)
                    {
                        foreach (var item in this.LocalVariables.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.References != null)
                {
                    if (eval(this.References.Overall)) return true;
                    if (this.References.Specific != null)
                    {
                        foreach (var item in this.References.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ScriptFields.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MetadataSummary = this.MetadataSummary == null ? null : new MaskItem<R, ScriptMetaSummary.Mask<R>?>(eval(this.MetadataSummary.Overall), this.MetadataSummary.Specific?.Translate(eval));
                obj.CompiledScript = eval(this.CompiledScript);
                obj.SourceCode = eval(this.SourceCode);
                if (LocalVariables != null)
                {
                    obj.LocalVariables = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocalVariable.Mask<R>?>>?>(eval(this.LocalVariables.Overall), Enumerable.Empty<MaskItemIndexed<R, LocalVariable.Mask<R>?>>());
                    if (LocalVariables.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocalVariable.Mask<R>?>>();
                        obj.LocalVariables.Specific = l;
                        foreach (var item in LocalVariables.Specific)
                        {
                            MaskItemIndexed<R, LocalVariable.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocalVariable.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (References != null)
                {
                    obj.References = new MaskItem<R, IEnumerable<MaskItemIndexed<R, AScriptReference.Mask<R>?>>?>(eval(this.References.Overall), Enumerable.Empty<MaskItemIndexed<R, AScriptReference.Mask<R>?>>());
                    if (References.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, AScriptReference.Mask<R>?>>();
                        obj.References.Specific = l;
                        foreach (var item in References.Specific)
                        {
                            MaskItemIndexed<R, AScriptReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, AScriptReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ScriptFields.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ScriptFields.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ScriptFields.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.MetadataSummary?.Overall ?? true)
                    {
                        MetadataSummary?.Print(sb);
                    }
                    if (printMask?.CompiledScript ?? true)
                    {
                        sb.AppendItem(CompiledScript, "CompiledScript");
                    }
                    if (printMask?.SourceCode ?? true)
                    {
                        sb.AppendItem(SourceCode, "SourceCode");
                    }
                    if ((printMask?.LocalVariables?.Overall ?? true)
                        && LocalVariables is {} LocalVariablesItem)
                    {
                        sb.AppendLine("LocalVariables =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocalVariablesItem.Overall);
                            if (LocalVariablesItem.Specific != null)
                            {
                                foreach (var subItem in LocalVariablesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.References?.Overall ?? true)
                        && References is {} ReferencesItem)
                    {
                        sb.AppendLine("References =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ReferencesItem.Overall);
                            if (ReferencesItem.Specific != null)
                            {
                                foreach (var subItem in ReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, ScriptMetaSummary.ErrorMask?>? MetadataSummary;
            public Exception? CompiledScript;
            public Exception? SourceCode;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocalVariable.ErrorMask?>>?>? LocalVariables;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AScriptReference.ErrorMask?>>?>? References;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
                switch (enu)
                {
                    case ScriptFields_FieldIndex.MetadataSummary:
                        return MetadataSummary;
                    case ScriptFields_FieldIndex.CompiledScript:
                        return CompiledScript;
                    case ScriptFields_FieldIndex.SourceCode:
                        return SourceCode;
                    case ScriptFields_FieldIndex.LocalVariables:
                        return LocalVariables;
                    case ScriptFields_FieldIndex.References:
                        return References;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
                switch (enu)
                {
                    case ScriptFields_FieldIndex.MetadataSummary:
                        this.MetadataSummary = new MaskItem<Exception?, ScriptMetaSummary.ErrorMask?>(ex, null);
                        break;
                    case ScriptFields_FieldIndex.CompiledScript:
                        this.CompiledScript = ex;
                        break;
                    case ScriptFields_FieldIndex.SourceCode:
                        this.SourceCode = ex;
                        break;
                    case ScriptFields_FieldIndex.LocalVariables:
                        this.LocalVariables = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocalVariable.ErrorMask?>>?>(ex, null);
                        break;
                    case ScriptFields_FieldIndex.References:
                        this.References = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AScriptReference.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ScriptFields_FieldIndex enu = (ScriptFields_FieldIndex)index;
                switch (enu)
                {
                    case ScriptFields_FieldIndex.MetadataSummary:
                        this.MetadataSummary = (MaskItem<Exception?, ScriptMetaSummary.ErrorMask?>?)obj;
                        break;
                    case ScriptFields_FieldIndex.CompiledScript:
                        this.CompiledScript = (Exception?)obj;
                        break;
                    case ScriptFields_FieldIndex.SourceCode:
                        this.SourceCode = (Exception?)obj;
                        break;
                    case ScriptFields_FieldIndex.LocalVariables:
                        this.LocalVariables = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocalVariable.ErrorMask?>>?>)obj;
                        break;
                    case ScriptFields_FieldIndex.References:
                        this.References = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AScriptReference.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (MetadataSummary != null) return true;
                if (CompiledScript != null) return true;
                if (SourceCode != null) return true;
                if (LocalVariables != null) return true;
                if (References != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                MetadataSummary?.Print(sb);
                {
                    sb.AppendItem(CompiledScript, "CompiledScript");
                }
                {
                    sb.AppendItem(SourceCode, "SourceCode");
                }
                if (LocalVariables is {} LocalVariablesItem)
                {
                    sb.AppendLine("LocalVariables =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocalVariablesItem.Overall);
                        if (LocalVariablesItem.Specific != null)
                        {
                            foreach (var subItem in LocalVariablesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (References is {} ReferencesItem)
                {
                    sb.AppendLine("References =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ReferencesItem.Overall);
                        if (ReferencesItem.Specific != null)
                        {
                            foreach (var subItem in ReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MetadataSummary = this.MetadataSummary.Combine(rhs.MetadataSummary, (l, r) => l.Combine(r));
                ret.CompiledScript = this.CompiledScript.Combine(rhs.CompiledScript);
                ret.SourceCode = this.SourceCode.Combine(rhs.SourceCode);
                ret.LocalVariables = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocalVariable.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LocalVariables?.Overall, rhs.LocalVariables?.Overall), Noggog.ExceptionExt.Combine(this.LocalVariables?.Specific, rhs.LocalVariables?.Specific));
                ret.References = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, AScriptReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.References?.Overall, rhs.References?.Overall), Noggog.ExceptionExt.Combine(this.References?.Specific, rhs.References?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public ScriptMetaSummary.TranslationMask? MetadataSummary;
            public bool CompiledScript;
            public bool SourceCode;
            public LocalVariable.TranslationMask? LocalVariables;
            public AScriptReference.TranslationMask? References;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.CompiledScript = defaultOn;
                this.SourceCode = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MetadataSummary != null ? MetadataSummary.OnOverall : DefaultOn, MetadataSummary?.GetCrystal()));
                ret.Add((CompiledScript, null));
                ret.Add((SourceCode, null));
                ret.Add((LocalVariables == null ? DefaultOn : !LocalVariables.GetCrystal().CopyNothing, LocalVariables?.GetCrystal()));
                ret.Add((References == null ? DefaultOn : !References.GetCrystal().CopyNothing, References?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ScriptFieldsCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ScriptFieldsSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScriptFieldsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScriptFieldsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ScriptFields CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ScriptFields();
            ((ScriptFieldsSetterCommon)((IScriptFieldsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ScriptFields item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ScriptFieldsSetterCommon)((IScriptFieldsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ScriptFields GetNew()
        {
            return new ScriptFields();
        }

    }
    #endregion

    #region Interface
    public partial interface IScriptFields :
        IFormLinkContainer,
        ILoquiObjectSetter<IScriptFields>,
        IScriptFieldsGetter
    {
        new ScriptMetaSummary MetadataSummary { get; }
        new MemorySlice<Byte>? CompiledScript { get; set; }
        new String? SourceCode { get; set; }
        new ExtendedList<LocalVariable> LocalVariables { get; }
        new ExtendedList<AScriptReference> References { get; }
    }

    public partial interface IScriptFieldsGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IScriptFieldsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ScriptFields_Registration.Instance;
        IScriptMetaSummaryGetter MetadataSummary { get; }
        ReadOnlyMemorySlice<Byte>? CompiledScript { get; }
        String? SourceCode { get; }
        IReadOnlyList<ILocalVariableGetter> LocalVariables { get; }
        IReadOnlyList<IAScriptReferenceGetter> References { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ScriptFieldsMixIn
    {
        public static void Clear(this IScriptFields item)
        {
            ((ScriptFieldsSetterCommon)((IScriptFieldsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ScriptFields.Mask<bool> GetEqualsMask(
            this IScriptFieldsGetter item,
            IScriptFieldsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IScriptFieldsGetter item,
            string? name = null,
            ScriptFields.Mask<bool>? printMask = null)
        {
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IScriptFieldsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ScriptFields.Mask<bool>? printMask = null)
        {
            ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IScriptFieldsGetter item,
            IScriptFieldsGetter rhs,
            ScriptFields.TranslationMask? equalsMask = null)
        {
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IScriptFields lhs,
            IScriptFieldsGetter rhs)
        {
            ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScriptFields lhs,
            IScriptFieldsGetter rhs,
            ScriptFields.TranslationMask? copyMask = null)
        {
            ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IScriptFields lhs,
            IScriptFieldsGetter rhs,
            out ScriptFields.ErrorMask errorMask,
            ScriptFields.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ScriptFields.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IScriptFields lhs,
            IScriptFieldsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ScriptFields DeepCopy(
            this IScriptFieldsGetter item,
            ScriptFields.TranslationMask? copyMask = null)
        {
            return ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ScriptFields DeepCopy(
            this IScriptFieldsGetter item,
            out ScriptFields.ErrorMask errorMask,
            ScriptFields.TranslationMask? copyMask = null)
        {
            return ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ScriptFields DeepCopy(
            this IScriptFieldsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IScriptFields item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ScriptFieldsSetterCommon)((IScriptFieldsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum ScriptFields_FieldIndex
    {
        MetadataSummary = 0,
        CompiledScript = 1,
        SourceCode = 2,
        LocalVariables = 3,
        References = 4,
    }
    #endregion

    #region Registration
    internal partial class ScriptFields_Registration : ILoquiRegistration
    {
        public static readonly ScriptFields_Registration Instance = new ScriptFields_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(ScriptFields.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ScriptFields.ErrorMask);

        public static readonly Type ClassType = typeof(ScriptFields);

        public static readonly Type GetterType = typeof(IScriptFieldsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IScriptFields);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ScriptFields";

        public const string Name = "ScriptFields";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(
                RecordTypes.SCHD,
                RecordTypes.SCHR);
            var all = RecordCollection.Factory(
                RecordTypes.SCHD,
                RecordTypes.SCHR,
                RecordTypes.SCDA,
                RecordTypes.SCTX,
                RecordTypes.SLSD,
                RecordTypes.SCVR,
                RecordTypes.SCRV,
                RecordTypes.SCRO);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ScriptFieldsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ScriptFieldsSetterCommon
    {
        public static readonly ScriptFieldsSetterCommon Instance = new ScriptFieldsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IScriptFields item)
        {
            ClearPartial();
            item.CompiledScript = default;
            item.SourceCode = default;
            item.LocalVariables.Clear();
            item.References.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IScriptFields obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.References.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IScriptFields item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: ScriptFieldsBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class ScriptFieldsCommon
    {
        public static readonly ScriptFieldsCommon Instance = new ScriptFieldsCommon();

        public ScriptFields.Mask<bool> GetEqualsMask(
            IScriptFieldsGetter item,
            IScriptFieldsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ScriptFields.Mask<bool>(false);
            ((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IScriptFieldsGetter item,
            IScriptFieldsGetter rhs,
            ScriptFields.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.MetadataSummary = MaskItemExt.Factory(item.MetadataSummary.GetEqualsMask(rhs.MetadataSummary, include), include);
            ret.CompiledScript = MemorySliceExt.SequenceEqual(item.CompiledScript, rhs.CompiledScript);
            ret.SourceCode = string.Equals(item.SourceCode, rhs.SourceCode);
            ret.LocalVariables = item.LocalVariables.CollectionEqualsHelper(
                rhs.LocalVariables,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.References = item.References.CollectionEqualsHelper(
                rhs.References,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IScriptFieldsGetter item,
            string? name = null,
            ScriptFields.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IScriptFieldsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ScriptFields.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ScriptFields =>");
            }
            else
            {
                sb.AppendLine($"{name} (ScriptFields) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IScriptFieldsGetter item,
            StructuredStringBuilder sb,
            ScriptFields.Mask<bool>? printMask = null)
        {
            if (printMask?.MetadataSummary?.Overall ?? true)
            {
                item.MetadataSummary?.Print(sb, "MetadataSummary");
            }
            if ((printMask?.CompiledScript ?? true)
                && item.CompiledScript is {} CompiledScriptItem)
            {
                sb.AppendLine($"CompiledScript => {SpanExt.ToHexString(CompiledScriptItem)}");
            }
            if ((printMask?.SourceCode ?? true)
                && item.SourceCode is {} SourceCodeItem)
            {
                sb.AppendItem(SourceCodeItem, "SourceCode");
            }
            if (printMask?.LocalVariables?.Overall ?? true)
            {
                sb.AppendLine("LocalVariables =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.LocalVariables)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.References?.Overall ?? true)
            {
                sb.AppendLine("References =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.References)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IScriptFieldsGetter? lhs,
            IScriptFieldsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.MetadataSummary) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MetadataSummary, rhs.MetadataSummary, out var lhsMetadataSummary, out var rhsMetadataSummary, out var isMetadataSummaryEqual))
                {
                    if (!((ScriptMetaSummaryCommon)((IScriptMetaSummaryGetter)lhsMetadataSummary).CommonInstance()!).Equals(lhsMetadataSummary, rhsMetadataSummary, equalsMask?.GetSubCrystal((int)ScriptFields_FieldIndex.MetadataSummary))) return false;
                }
                else if (!isMetadataSummaryEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.CompiledScript) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.CompiledScript, rhs.CompiledScript)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.SourceCode) ?? true))
            {
                if (!string.Equals(lhs.SourceCode, rhs.SourceCode)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.LocalVariables) ?? true))
            {
                if (!lhs.LocalVariables.SequenceEqual(rhs.LocalVariables, (l, r) => ((LocalVariableCommon)((ILocalVariableGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ScriptFields_FieldIndex.LocalVariables)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.References) ?? true))
            {
                if (!lhs.References.SequenceEqual(rhs.References, (l, r) => ((AScriptReferenceCommon)((IAScriptReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ScriptFields_FieldIndex.References)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IScriptFieldsGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.MetadataSummary);
            if (item.CompiledScript is {} CompiledScriptItem)
            {
                hash.Add(CompiledScriptItem);
            }
            if (item.SourceCode is {} SourceCodeitem)
            {
                hash.Add(SourceCodeitem);
            }
            hash.Add(item.LocalVariables);
            hash.Add(item.References);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ScriptFields.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IScriptFieldsGetter obj)
        {
            foreach (var item in obj.References.WhereCastable<IAScriptReferenceGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ScriptFieldsSetterTranslationCommon
    {
        public static readonly ScriptFieldsSetterTranslationCommon Instance = new ScriptFieldsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IScriptFields item,
            IScriptFieldsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.MetadataSummary) ?? true))
            {
                errorMask?.PushIndex((int)ScriptFields_FieldIndex.MetadataSummary);
                try
                {
                    item.MetadataSummary.DeepCopyIn(
                        rhs: rhs.MetadataSummary,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)ScriptFields_FieldIndex.MetadataSummary));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.CompiledScript) ?? true))
            {
                if(rhs.CompiledScript is {} CompiledScriptrhs)
                {
                    item.CompiledScript = CompiledScriptrhs.ToArray();
                }
                else
                {
                    item.CompiledScript = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.SourceCode) ?? true))
            {
                item.SourceCode = rhs.SourceCode;
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.LocalVariables) ?? true))
            {
                errorMask?.PushIndex((int)ScriptFields_FieldIndex.LocalVariables);
                try
                {
                    item.LocalVariables.SetTo(
                        rhs.LocalVariables
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ScriptFields_FieldIndex.References) ?? true))
            {
                errorMask?.PushIndex((int)ScriptFields_FieldIndex.References);
                try
                {
                    item.References.SetTo(
                        rhs.References
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IScriptFields item,
            IScriptFieldsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public ScriptFields DeepCopy(
            IScriptFieldsGetter item,
            ScriptFields.TranslationMask? copyMask = null)
        {
            ScriptFields ret = (ScriptFields)((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()!).GetNew();
            ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ScriptFields DeepCopy(
            IScriptFieldsGetter item,
            out ScriptFields.ErrorMask errorMask,
            ScriptFields.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ScriptFields ret = (ScriptFields)((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()!).GetNew();
            ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ScriptFields.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ScriptFields DeepCopy(
            IScriptFieldsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ScriptFields ret = (ScriptFields)((ScriptFieldsCommon)((IScriptFieldsGetter)item).CommonInstance()!).GetNew();
            ((ScriptFieldsSetterTranslationCommon)((IScriptFieldsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptFields
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptFields_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ScriptFields_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScriptFieldsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ScriptFieldsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScriptFieldsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class ScriptFieldsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ScriptFieldsBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IScriptFieldsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            ScriptFieldsBinaryWriteTranslation.WriteBinaryMetadataSummaryOld(
                writer: writer,
                item: item);
            var MetadataSummaryItem = item.MetadataSummary;
            ((ScriptMetaSummaryBinaryWriteTranslation)((IBinaryItem)MetadataSummaryItem).BinaryWriteTranslator).Write(
                item: MetadataSummaryItem,
                writer: writer,
                translationParams: translationParams);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CompiledScript,
                header: translationParams.ConvertToCustom(RecordTypes.SCDA));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SourceCode,
                header: translationParams.ConvertToCustom(RecordTypes.SCTX),
                binaryType: StringBinaryType.Plain);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocalVariableGetter>.Instance.Write(
                writer: writer,
                items: item.LocalVariables,
                transl: (MutagenWriter subWriter, ILocalVariableGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocalVariableBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAScriptReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.References,
                transl: (MutagenWriter subWriter, IAScriptReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AScriptReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public static partial void WriteBinaryMetadataSummaryOldCustom(
            MutagenWriter writer,
            IScriptFieldsGetter item);

        public static void WriteBinaryMetadataSummaryOld(
            MutagenWriter writer,
            IScriptFieldsGetter item)
        {
            WriteBinaryMetadataSummaryOldCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IScriptFieldsGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IScriptFieldsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ScriptFieldsBinaryCreateTranslation
    {
        public static readonly ScriptFieldsBinaryCreateTranslation Instance = new ScriptFieldsBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IScriptFields item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.SCHD:
                {
                    if (lastParsed.ShortCircuit((int)ScriptFields_FieldIndex.MetadataSummary, translationParams)) return ParseResult.Stop;
                    return ScriptFieldsBinaryCreateTranslation.FillBinaryMetadataSummaryOldCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.SCHR:
                {
                    if (lastParsed.ShortCircuit((int)ScriptFields_FieldIndex.MetadataSummary, translationParams)) return ParseResult.Stop;
                    item.MetadataSummary.CopyInFromBinary(
                        frame: frame,
                        translationParams: null);
                    return (int)ScriptFields_FieldIndex.MetadataSummary;
                }
                case RecordTypeInts.SCDA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CompiledScript = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ScriptFields_FieldIndex.CompiledScript;
                }
                case RecordTypeInts.SCTX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SourceCode = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.Plain,
                        parseWhole: true);
                    return (int)ScriptFields_FieldIndex.SourceCode;
                }
                case RecordTypeInts.SLSD:
                case RecordTypeInts.SCVR:
                {
                    item.LocalVariables.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocalVariable>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: LocalVariable_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: LocalVariable.TryCreateFromBinary));
                    return (int)ScriptFields_FieldIndex.LocalVariables;
                }
                case RecordTypeInts.SCRV:
                case RecordTypeInts.SCRO:
                {
                    item.References.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<AScriptReference>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: AScriptReference_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: (MutagenFrame r, RecordType header, [MaybeNullWhen(false)] out AScriptReference listSubItem, TypedParseParams translationParams) =>
                            {
                                switch (header.TypeInt)
                                {
                                    case RecordTypeInts.SCRV:
                                    {
                                        var ret = ScriptVariableReference.TryCreateFromBinary(r, out var tmplistSubItem, translationParams);
                                        listSubItem = tmplistSubItem;
                                        return ret;
                                    }
                                    case RecordTypeInts.SCRO:
                                    {
                                        var ret = ScriptObjectReference.TryCreateFromBinary(r, out var tmplistSubItem, translationParams);
                                        listSubItem = tmplistSubItem;
                                        return ret;
                                    }
                                    default:
                                        throw new NotImplementedException();
                                }
                            }));
                    return (int)ScriptFields_FieldIndex.References;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        public static partial ParseResult FillBinaryMetadataSummaryOldCustom(
            MutagenFrame frame,
            IScriptFields item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ScriptFieldsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IScriptFieldsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScriptFieldsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class ScriptFieldsBinaryOverlay :
        PluginBinaryOverlay,
        IScriptFieldsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ScriptFields_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ScriptFields_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ScriptFieldsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ScriptFieldsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IScriptFieldsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IScriptFieldsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ScriptFieldsCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ScriptFieldsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ScriptFieldsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region MetadataSummaryOld
        public partial ParseResult MetadataSummaryOldCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region MetadataSummary
        private RangeInt32? _MetadataSummaryLocation;
        private IScriptMetaSummaryGetter? _MetadataSummary => _MetadataSummaryLocation.HasValue ? ScriptMetaSummaryBinaryOverlay.ScriptMetaSummaryFactory(_recordData.Slice(_MetadataSummaryLocation!.Value.Min), _package) : default;
        public IScriptMetaSummaryGetter MetadataSummary => _MetadataSummary ?? new ScriptMetaSummary();
        #endregion
        #region CompiledScript
        private int? _CompiledScriptLocation;
        public ReadOnlyMemorySlice<Byte>? CompiledScript => _CompiledScriptLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CompiledScriptLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SourceCode
        private int? _SourceCodeLocation;
        public String? SourceCode => _SourceCodeLocation.HasValue ? BinaryStringUtility.ToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SourceCodeLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<ILocalVariableGetter> LocalVariables { get; private set; } = [];
        public IReadOnlyList<IAScriptReferenceGetter> References { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ScriptFieldsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IScriptFieldsGetter ScriptFieldsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ScriptFieldsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IScriptFieldsGetter ScriptFieldsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ScriptFieldsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.SCHD:
                {
                    if (lastParsed.ShortCircuit((int)ScriptFields_FieldIndex.MetadataSummary, translationParams)) return ParseResult.Stop;
                    return MetadataSummaryOldCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.SCHR:
                {
                    if (lastParsed.ShortCircuit((int)ScriptFields_FieldIndex.MetadataSummary, translationParams)) return ParseResult.Stop;
                    _MetadataSummaryLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ScriptFields_FieldIndex.MetadataSummary;
                }
                case RecordTypeInts.SCDA:
                {
                    _CompiledScriptLocation = (stream.Position - offset);
                    return (int)ScriptFields_FieldIndex.CompiledScript;
                }
                case RecordTypeInts.SCTX:
                {
                    _SourceCodeLocation = (stream.Position - offset);
                    return (int)ScriptFields_FieldIndex.SourceCode;
                }
                case RecordTypeInts.SLSD:
                case RecordTypeInts.SCVR:
                {
                    this.LocalVariables = this.ParseRepeatedTypelessSubrecord<ILocalVariableGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: LocalVariable_Registration.TriggerSpecs,
                        factory: LocalVariableBinaryOverlay.LocalVariableFactory);
                    return (int)ScriptFields_FieldIndex.LocalVariables;
                }
                case RecordTypeInts.SCRV:
                case RecordTypeInts.SCRO:
                {
                    this.References = this.ParseRepeatedTypelessSubrecord<IAScriptReferenceGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: AScriptReference_Registration.TriggerSpecs,
                        factory: (s, r, p, recConv) =>
                        {
                            switch (r.TypeInt)
                            {
                                case RecordTypeInts.SCRV:
                                    return ScriptVariableReferenceBinaryOverlay.ScriptVariableReferenceFactory(s, p);
                                case RecordTypeInts.SCRO:
                                    return ScriptObjectReferenceBinaryOverlay.ScriptObjectReferenceFactory(s, p);
                                default:
                                    throw new NotImplementedException();
                            }
                        });
                    return (int)ScriptFields_FieldIndex.References;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ScriptFieldsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IScriptFieldsGetter rhs) return false;
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IScriptFieldsGetter? obj)
        {
            return ((ScriptFieldsCommon)((IScriptFieldsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ScriptFieldsCommon)((IScriptFieldsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

