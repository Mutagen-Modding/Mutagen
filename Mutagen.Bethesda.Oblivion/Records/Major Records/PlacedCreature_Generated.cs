/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class PlacedCreature :
        OblivionMajorRecord,
        IEquatable<IPlacedCreatureGetter>,
        ILoquiObjectSetter<PlacedCreature>,
        IPlacedCreatureInternal
    {
        #region Ctor
        protected PlacedCreature()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Base
        private readonly IFormLinkNullable<ICreatureGetter> _Base = new FormLinkNullable<ICreatureGetter>();
        public IFormLinkNullable<ICreatureGetter> Base
        {
            get => _Base;
            set => _Base.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICreatureGetter> IPlacedCreatureGetter.Base => this.Base;
        #endregion
        #region Owner
        private readonly IFormLinkNullable<IFactionGetter> _Owner = new FormLinkNullable<IFactionGetter>();
        public IFormLinkNullable<IFactionGetter> Owner
        {
            get => _Owner;
            set => _Owner.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFactionGetter> IPlacedCreatureGetter.Owner => this.Owner;
        #endregion
        #region FactionRank
        public Int32? FactionRank { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedCreatureGetter.FactionRank => this.FactionRank;
        #endregion
        #region GlobalVariable
        private readonly IFormLinkNullable<IGlobalGetter> _GlobalVariable = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> GlobalVariable
        {
            get => _GlobalVariable;
            set => _GlobalVariable.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IPlacedCreatureGetter.GlobalVariable => this.GlobalVariable;
        #endregion
        #region DistantLODData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DistantLODData? _DistantLODData;
        public DistantLODData? DistantLODData
        {
            get => _DistantLODData;
            set => _DistantLODData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDistantLODDataGetter? IPlacedCreatureGetter.DistantLODData => this.DistantLODData;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IPlacedCreatureGetter.EnableParent => this.EnableParent;
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RagdollData;
        public MemorySlice<Byte>? RagdollData
        {
            get => this._RagdollData;
            set => this._RagdollData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedCreatureGetter.RagdollData => this.RagdollData;
        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedCreatureGetter.Scale => this.Scale;
        #endregion
        #region Location
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Location? _Location;
        public Location? Location
        {
            get => _Location;
            set => _Location = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationGetter? IPlacedCreatureGetter.Location => this.Location;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedCreatureMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Base = initialValue;
                this.Owner = initialValue;
                this.FactionRank = initialValue;
                this.GlobalVariable = initialValue;
                this.DistantLODData = new MaskItem<TItem, DistantLODData.Mask<TItem>?>(initialValue, new DistantLODData.Mask<TItem>(initialValue));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.RagdollData = initialValue;
                this.Scale = initialValue;
                this.Location = new MaskItem<TItem, Location.Mask<TItem>?>(initialValue, new Location.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Base,
                TItem Owner,
                TItem FactionRank,
                TItem GlobalVariable,
                TItem DistantLODData,
                TItem EnableParent,
                TItem RagdollData,
                TItem Scale,
                TItem Location)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Base = Base;
                this.Owner = Owner;
                this.FactionRank = FactionRank;
                this.GlobalVariable = GlobalVariable;
                this.DistantLODData = new MaskItem<TItem, DistantLODData.Mask<TItem>?>(DistantLODData, new DistantLODData.Mask<TItem>(DistantLODData));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.RagdollData = RagdollData;
                this.Scale = Scale;
                this.Location = new MaskItem<TItem, Location.Mask<TItem>?>(Location, new Location.Mask<TItem>(Location));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Base;
            public TItem Owner;
            public TItem FactionRank;
            public TItem GlobalVariable;
            public MaskItem<TItem, DistantLODData.Mask<TItem>?>? DistantLODData { get; set; }
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public TItem RagdollData;
            public TItem Scale;
            public MaskItem<TItem, Location.Mask<TItem>?>? Location { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
                if (!object.Equals(this.DistantLODData, rhs.DistantLODData)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Base);
                hash.Add(this.Owner);
                hash.Add(this.FactionRank);
                hash.Add(this.GlobalVariable);
                hash.Add(this.DistantLODData);
                hash.Add(this.EnableParent);
                hash.Add(this.RagdollData);
                hash.Add(this.Scale);
                hash.Add(this.Location);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Base)) return false;
                if (!eval(this.Owner)) return false;
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.GlobalVariable)) return false;
                if (DistantLODData != null)
                {
                    if (!eval(this.DistantLODData.Overall)) return false;
                    if (this.DistantLODData.Specific != null && !this.DistantLODData.Specific.All(eval)) return false;
                }
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (!eval(this.RagdollData)) return false;
                if (!eval(this.Scale)) return false;
                if (Location != null)
                {
                    if (!eval(this.Location.Overall)) return false;
                    if (this.Location.Specific != null && !this.Location.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Base)) return true;
                if (eval(this.Owner)) return true;
                if (eval(this.FactionRank)) return true;
                if (eval(this.GlobalVariable)) return true;
                if (DistantLODData != null)
                {
                    if (eval(this.DistantLODData.Overall)) return true;
                    if (this.DistantLODData.Specific != null && this.DistantLODData.Specific.Any(eval)) return true;
                }
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (eval(this.RagdollData)) return true;
                if (eval(this.Scale)) return true;
                if (Location != null)
                {
                    if (eval(this.Location.Overall)) return true;
                    if (this.Location.Specific != null && this.Location.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedCreature.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Base = eval(this.Base);
                obj.Owner = eval(this.Owner);
                obj.FactionRank = eval(this.FactionRank);
                obj.GlobalVariable = eval(this.GlobalVariable);
                obj.DistantLODData = this.DistantLODData == null ? null : new MaskItem<R, DistantLODData.Mask<R>?>(eval(this.DistantLODData.Overall), this.DistantLODData.Specific?.Translate(eval));
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.RagdollData = eval(this.RagdollData);
                obj.Scale = eval(this.Scale);
                obj.Location = this.Location == null ? null : new MaskItem<R, Location.Mask<R>?>(eval(this.Location.Overall), this.Location.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedCreature.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedCreature.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedCreature.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Base ?? true)
                    {
                        sb.AppendItem(Base, "Base");
                    }
                    if (printMask?.Owner ?? true)
                    {
                        sb.AppendItem(Owner, "Owner");
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        sb.AppendItem(FactionRank, "FactionRank");
                    }
                    if (printMask?.GlobalVariable ?? true)
                    {
                        sb.AppendItem(GlobalVariable, "GlobalVariable");
                    }
                    if (printMask?.DistantLODData?.Overall ?? true)
                    {
                        DistantLODData?.Print(sb);
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.Print(sb);
                    }
                    if (printMask?.RagdollData ?? true)
                    {
                        sb.AppendItem(RagdollData, "RagdollData");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        sb.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.Location?.Overall ?? true)
                    {
                        Location?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Base;
            public Exception? Owner;
            public Exception? FactionRank;
            public Exception? GlobalVariable;
            public MaskItem<Exception?, DistantLODData.ErrorMask?>? DistantLODData;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public Exception? RagdollData;
            public Exception? Scale;
            public MaskItem<Exception?, Location.ErrorMask?>? Location;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
                switch (enu)
                {
                    case PlacedCreature_FieldIndex.Base:
                        return Base;
                    case PlacedCreature_FieldIndex.Owner:
                        return Owner;
                    case PlacedCreature_FieldIndex.FactionRank:
                        return FactionRank;
                    case PlacedCreature_FieldIndex.GlobalVariable:
                        return GlobalVariable;
                    case PlacedCreature_FieldIndex.DistantLODData:
                        return DistantLODData;
                    case PlacedCreature_FieldIndex.EnableParent:
                        return EnableParent;
                    case PlacedCreature_FieldIndex.RagdollData:
                        return RagdollData;
                    case PlacedCreature_FieldIndex.Scale:
                        return Scale;
                    case PlacedCreature_FieldIndex.Location:
                        return Location;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
                switch (enu)
                {
                    case PlacedCreature_FieldIndex.Base:
                        this.Base = ex;
                        break;
                    case PlacedCreature_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case PlacedCreature_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case PlacedCreature_FieldIndex.GlobalVariable:
                        this.GlobalVariable = ex;
                        break;
                    case PlacedCreature_FieldIndex.DistantLODData:
                        this.DistantLODData = new MaskItem<Exception?, DistantLODData.ErrorMask?>(ex, null);
                        break;
                    case PlacedCreature_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case PlacedCreature_FieldIndex.RagdollData:
                        this.RagdollData = ex;
                        break;
                    case PlacedCreature_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case PlacedCreature_FieldIndex.Location:
                        this.Location = new MaskItem<Exception?, Location.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedCreature_FieldIndex enu = (PlacedCreature_FieldIndex)index;
                switch (enu)
                {
                    case PlacedCreature_FieldIndex.Base:
                        this.Base = (Exception?)obj;
                        break;
                    case PlacedCreature_FieldIndex.Owner:
                        this.Owner = (Exception?)obj;
                        break;
                    case PlacedCreature_FieldIndex.FactionRank:
                        this.FactionRank = (Exception?)obj;
                        break;
                    case PlacedCreature_FieldIndex.GlobalVariable:
                        this.GlobalVariable = (Exception?)obj;
                        break;
                    case PlacedCreature_FieldIndex.DistantLODData:
                        this.DistantLODData = (MaskItem<Exception?, DistantLODData.ErrorMask?>?)obj;
                        break;
                    case PlacedCreature_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case PlacedCreature_FieldIndex.RagdollData:
                        this.RagdollData = (Exception?)obj;
                        break;
                    case PlacedCreature_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case PlacedCreature_FieldIndex.Location:
                        this.Location = (MaskItem<Exception?, Location.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Base != null) return true;
                if (Owner != null) return true;
                if (FactionRank != null) return true;
                if (GlobalVariable != null) return true;
                if (DistantLODData != null) return true;
                if (EnableParent != null) return true;
                if (RagdollData != null) return true;
                if (Scale != null) return true;
                if (Location != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Base, "Base");
                }
                {
                    sb.AppendItem(Owner, "Owner");
                }
                {
                    sb.AppendItem(FactionRank, "FactionRank");
                }
                {
                    sb.AppendItem(GlobalVariable, "GlobalVariable");
                }
                DistantLODData?.Print(sb);
                EnableParent?.Print(sb);
                {
                    sb.AppendItem(RagdollData, "RagdollData");
                }
                {
                    sb.AppendItem(Scale, "Scale");
                }
                Location?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Base = this.Base.Combine(rhs.Base);
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
                ret.DistantLODData = this.DistantLODData.Combine(rhs.DistantLODData, (l, r) => l.Combine(r));
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Location = this.Location.Combine(rhs.Location, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Base;
            public bool Owner;
            public bool FactionRank;
            public bool GlobalVariable;
            public DistantLODData.TranslationMask? DistantLODData;
            public EnableParent.TranslationMask? EnableParent;
            public bool RagdollData;
            public bool Scale;
            public Location.TranslationMask? Location;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Base = defaultOn;
                this.Owner = defaultOn;
                this.FactionRank = defaultOn;
                this.GlobalVariable = defaultOn;
                this.RagdollData = defaultOn;
                this.Scale = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Base, null));
                ret.Add((Owner, null));
                ret.Add((FactionRank, null));
                ret.Add((GlobalVariable, null));
                ret.Add((DistantLODData != null ? DistantLODData.OnOverall : DefaultOn, DistantLODData?.GetCrystal()));
                ret.Add((EnableParent != null ? EnableParent.OnOverall : DefaultOn, EnableParent?.GetCrystal()));
                ret.Add((RagdollData, null));
                ret.Add((Scale, null));
                ret.Add((Location != null ? Location.OnOverall : DefaultOn, Location?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PlacedCreature_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedCreatureCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedCreatureSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedCreature(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private PlacedCreature(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public PlacedCreature(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public PlacedCreature(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedCreature>.ToString(this);
        }

        protected override Type LinkType => typeof(IPlacedCreature);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedCreatureGetter rhs) return false;
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedCreatureGetter? obj)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedCreatureCommon)((IPlacedCreatureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedCreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedCreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlacedCreature CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedCreature();
            ((PlacedCreatureSetterCommon)((IPlacedCreatureGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedCreature item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedCreatureSetterCommon)((IPlacedCreatureGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedCreature GetNew()
        {
            return new PlacedCreature();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedCreature :
        IFormLinkContainer,
        ILoquiObjectSetter<IPlacedCreatureInternal>,
        IOblivionMajorRecordInternal,
        IPlaced,
        IPlacedCreatureGetter
    {
        new IFormLinkNullable<ICreatureGetter> Base { get; set; }
        new IFormLinkNullable<IFactionGetter> Owner { get; set; }
        new Int32? FactionRank { get; set; }
        new IFormLinkNullable<IGlobalGetter> GlobalVariable { get; set; }
        new DistantLODData? DistantLODData { get; set; }
        new EnableParent? EnableParent { get; set; }
        new MemorySlice<Byte>? RagdollData { get; set; }
        new Single? Scale { get; set; }
        new Location? Location { get; set; }
    }

    public partial interface IPlacedCreatureInternal :
        IOblivionMajorRecordInternal,
        IPlacedCreature,
        IPlacedCreatureGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.ACRE)]
    public partial interface IPlacedCreatureGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IPlacedCreatureGetter>,
        IMapsToGetter<IPlacedCreatureGetter>,
        IPlacedGetter
    {
        static new ILoquiRegistration StaticRegistration => PlacedCreature_Registration.Instance;
        IFormLinkNullableGetter<ICreatureGetter> Base { get; }
        IFormLinkNullableGetter<IFactionGetter> Owner { get; }
        Int32? FactionRank { get; }
        IFormLinkNullableGetter<IGlobalGetter> GlobalVariable { get; }
        IDistantLODDataGetter? DistantLODData { get; }
        IEnableParentGetter? EnableParent { get; }
        ReadOnlyMemorySlice<Byte>? RagdollData { get; }
        Single? Scale { get; }
        ILocationGetter? Location { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedCreatureMixIn
    {
        public static void Clear(this IPlacedCreatureInternal item)
        {
            ((PlacedCreatureSetterCommon)((IPlacedCreatureGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedCreature.Mask<bool> GetEqualsMask(
            this IPlacedCreatureGetter item,
            IPlacedCreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedCreatureGetter item,
            string? name = null,
            PlacedCreature.Mask<bool>? printMask = null)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedCreatureGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedCreature.Mask<bool>? printMask = null)
        {
            ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedCreatureGetter item,
            IPlacedCreatureGetter rhs,
            PlacedCreature.TranslationMask? equalsMask = null)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedCreatureInternal lhs,
            IPlacedCreatureGetter rhs,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedCreature.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedCreatureInternal lhs,
            IPlacedCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedCreature DeepCopy(
            this IPlacedCreatureGetter item,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            return ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedCreature DeepCopy(
            this IPlacedCreatureGetter item,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            return ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedCreature DeepCopy(
            this IPlacedCreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedCreature Duplicate(
            this IPlacedCreatureGetter item,
            FormKey formKey,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static PlacedCreature Duplicate(
            this IPlacedCreatureGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedCreatureInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedCreatureSetterCommon)((IPlacedCreatureGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum PlacedCreature_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Base = 5,
        Owner = 6,
        FactionRank = 7,
        GlobalVariable = 8,
        DistantLODData = 9,
        EnableParent = 10,
        RagdollData = 11,
        Scale = 12,
        Location = 13,
    }
    #endregion

    #region Registration
    internal partial class PlacedCreature_Registration : ILoquiRegistration
    {
        public static readonly PlacedCreature_Registration Instance = new PlacedCreature_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(PlacedCreature.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedCreature.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedCreature);

        public static readonly Type GetterType = typeof(IPlacedCreatureGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedCreature);

        public static readonly Type? InternalSetterType = typeof(IPlacedCreatureInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.PlacedCreature";

        public const string Name = "PlacedCreature";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ACRE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ACRE);
            var all = RecordCollection.Factory(
                RecordTypes.ACRE,
                RecordTypes.NAME,
                RecordTypes.XOWN,
                RecordTypes.XRNK,
                RecordTypes.XGLB,
                RecordTypes.XLOD,
                RecordTypes.XESP,
                RecordTypes.XRGD,
                RecordTypes.XSCL,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedCreatureBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedCreatureSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly PlacedCreatureSetterCommon Instance = new PlacedCreatureSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedCreatureInternal item)
        {
            ClearPartial();
            item.Base.Clear();
            item.Owner.Clear();
            item.FactionRank = default;
            item.GlobalVariable.Clear();
            item.DistantLODData = null;
            item.EnableParent = null;
            item.RagdollData = default;
            item.Scale = default;
            item.Location = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IPlacedCreatureInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedCreatureInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedCreature obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Base.Relink(mapping);
            obj.Owner.Relink(mapping);
            obj.GlobalVariable.Relink(mapping);
            obj.EnableParent?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedCreatureInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IPlacedCreatureInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedCreatureBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedCreatureBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedCreature)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedCreature)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlacedCreatureCommon : OblivionMajorRecordCommon
    {
        public new static readonly PlacedCreatureCommon Instance = new PlacedCreatureCommon();

        public PlacedCreature.Mask<bool> GetEqualsMask(
            IPlacedCreatureGetter item,
            IPlacedCreatureGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedCreature.Mask<bool>(false);
            ((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedCreatureGetter item,
            IPlacedCreatureGetter rhs,
            PlacedCreature.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Base = item.Base.Equals(rhs.Base);
            ret.Owner = item.Owner.Equals(rhs.Owner);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.GlobalVariable = item.GlobalVariable.Equals(rhs.GlobalVariable);
            ret.DistantLODData = EqualsMaskHelper.EqualsHelper(
                item.DistantLODData,
                rhs.DistantLODData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.RagdollData = MemorySliceExt.SequenceEqual(item.RagdollData, rhs.RagdollData);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.Location = EqualsMaskHelper.EqualsHelper(
                item.Location,
                rhs.Location,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlacedCreatureGetter item,
            string? name = null,
            PlacedCreature.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedCreatureGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedCreature.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedCreature =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedCreature) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedCreatureGetter item,
            StructuredStringBuilder sb,
            PlacedCreature.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Base ?? true)
            {
                sb.AppendItem(item.Base.FormKeyNullable, "Base");
            }
            if (printMask?.Owner ?? true)
            {
                sb.AppendItem(item.Owner.FormKeyNullable, "Owner");
            }
            if ((printMask?.FactionRank ?? true)
                && item.FactionRank is {} FactionRankItem)
            {
                sb.AppendItem(FactionRankItem, "FactionRank");
            }
            if (printMask?.GlobalVariable ?? true)
            {
                sb.AppendItem(item.GlobalVariable.FormKeyNullable, "GlobalVariable");
            }
            if ((printMask?.DistantLODData?.Overall ?? true)
                && item.DistantLODData is {} DistantLODDataItem)
            {
                DistantLODDataItem?.Print(sb, "DistantLODData");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent is {} EnableParentItem)
            {
                EnableParentItem?.Print(sb, "EnableParent");
            }
            if ((printMask?.RagdollData ?? true)
                && item.RagdollData is {} RagdollDataItem)
            {
                sb.AppendLine($"RagdollData => {SpanExt.ToHexString(RagdollDataItem)}");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale is {} ScaleItem)
            {
                sb.AppendItem(ScaleItem, "Scale");
            }
            if ((printMask?.Location?.Overall ?? true)
                && item.Location is {} LocationItem)
            {
                LocationItem?.Print(sb, "Location");
            }
        }
        
        public static PlacedCreature_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (PlacedCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (PlacedCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (PlacedCreature_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (PlacedCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new PlacedCreature_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedCreature_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedCreature_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedCreatureGetter? lhs,
            IPlacedCreatureGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Base) ?? true))
            {
                if (!lhs.Base.Equals(rhs.Base)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Owner) ?? true))
            {
                if (!lhs.Owner.Equals(rhs.Owner)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.FactionRank) ?? true))
            {
                if (lhs.FactionRank != rhs.FactionRank) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.GlobalVariable) ?? true))
            {
                if (!lhs.GlobalVariable.Equals(rhs.GlobalVariable)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.DistantLODData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DistantLODData, rhs.DistantLODData, out var lhsDistantLODData, out var rhsDistantLODData, out var isDistantLODDataEqual))
                {
                    if (!((DistantLODDataCommon)((IDistantLODDataGetter)lhsDistantLODData).CommonInstance()!).Equals(lhsDistantLODData, rhsDistantLODData, equalsMask?.GetSubCrystal((int)PlacedCreature_FieldIndex.DistantLODData))) return false;
                }
                else if (!isDistantLODDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.EnableParent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EnableParent, rhs.EnableParent, out var lhsEnableParent, out var rhsEnableParent, out var isEnableParentEqual))
                {
                    if (!((EnableParentCommon)((IEnableParentGetter)lhsEnableParent).CommonInstance()!).Equals(lhsEnableParent, rhsEnableParent, equalsMask?.GetSubCrystal((int)PlacedCreature_FieldIndex.EnableParent))) return false;
                }
                else if (!isEnableParentEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.RagdollData) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.RagdollData, rhs.RagdollData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Scale) ?? true))
            {
                if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Location) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Location, rhs.Location, out var lhsLocation, out var rhsLocation, out var isLocationEqual))
                {
                    if (!((LocationCommon)((ILocationGetter)lhsLocation).CommonInstance()!).Equals(lhsLocation, rhsLocation, equalsMask?.GetSubCrystal((int)PlacedCreature_FieldIndex.Location))) return false;
                }
                else if (!isLocationEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedCreatureGetter?)lhs,
                rhs: rhs as IPlacedCreatureGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedCreatureGetter?)lhs,
                rhs: rhs as IPlacedCreatureGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlacedCreatureGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Base);
            hash.Add(item.Owner);
            if (item.FactionRank is {} FactionRankitem)
            {
                hash.Add(FactionRankitem);
            }
            hash.Add(item.GlobalVariable);
            if (item.DistantLODData is {} DistantLODDataitem)
            {
                hash.Add(DistantLODDataitem);
            }
            if (item.EnableParent is {} EnableParentitem)
            {
                hash.Add(EnableParentitem);
            }
            if (item.RagdollData is {} RagdollDataItem)
            {
                hash.Add(RagdollDataItem);
            }
            if (item.Scale is {} Scaleitem)
            {
                hash.Add(Scaleitem);
            }
            if (item.Location is {} Locationitem)
            {
                hash.Add(Locationitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedCreatureGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedCreatureGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedCreature.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedCreatureGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Base, out var BaseInfo))
            {
                yield return BaseInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Owner, out var OwnerInfo))
            {
                yield return OwnerInfo;
            }
            if (FormLinkInformation.TryFactory(obj.GlobalVariable, out var GlobalVariableInfo))
            {
                yield return GlobalVariableInfo;
            }
            if (obj.EnableParent is {} EnableParentItems)
            {
                foreach (var item in EnableParentItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public PlacedCreature Duplicate(
            IPlacedCreatureGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedCreature(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedCreatureGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedCreatureGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class PlacedCreatureSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly PlacedCreatureSetterTranslationCommon Instance = new PlacedCreatureSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedCreatureInternal item,
            IPlacedCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedCreature item,
            IPlacedCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Base) ?? true))
            {
                item.Base.SetTo(rhs.Base.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Owner) ?? true))
            {
                item.Owner.SetTo(rhs.Owner.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.GlobalVariable) ?? true))
            {
                item.GlobalVariable.SetTo(rhs.GlobalVariable.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.DistantLODData) ?? true))
            {
                errorMask?.PushIndex((int)PlacedCreature_FieldIndex.DistantLODData);
                try
                {
                    if(rhs.DistantLODData is {} rhsDistantLODData)
                    {
                        item.DistantLODData = rhsDistantLODData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedCreature_FieldIndex.DistantLODData));
                    }
                    else
                    {
                        item.DistantLODData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedCreature_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent is {} rhsEnableParent)
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedCreature_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.RagdollData) ?? true))
            {
                if(rhs.RagdollData is {} RagdollDatarhs)
                {
                    item.RagdollData = RagdollDatarhs.ToArray();
                }
                else
                {
                    item.RagdollData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedCreature_FieldIndex.Location) ?? true))
            {
                errorMask?.PushIndex((int)PlacedCreature_FieldIndex.Location);
                try
                {
                    if(rhs.Location is {} rhsLocation)
                    {
                        item.Location = rhsLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedCreature_FieldIndex.Location));
                    }
                    else
                    {
                        item.Location = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedCreature item,
            IPlacedCreatureGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedCreatureInternal)item,
                rhs: (IPlacedCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedCreature)item,
                rhs: (IPlacedCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedCreatureInternal)item,
                rhs: (IPlacedCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedCreature)item,
                rhs: (IPlacedCreatureGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedCreature DeepCopy(
            IPlacedCreatureGetter item,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            PlacedCreature ret = (PlacedCreature)((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).GetNew();
            ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedCreature DeepCopy(
            IPlacedCreatureGetter item,
            out PlacedCreature.ErrorMask errorMask,
            PlacedCreature.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedCreature ret = (PlacedCreature)((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).GetNew();
            ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedCreature.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedCreature DeepCopy(
            IPlacedCreatureGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedCreature ret = (PlacedCreature)((PlacedCreatureCommon)((IPlacedCreatureGetter)item).CommonInstance()!).GetNew();
            ((PlacedCreatureSetterTranslationCommon)((IPlacedCreatureGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class PlacedCreature
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedCreature_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedCreature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedCreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedCreatureSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedCreatureSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class PlacedCreatureBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlacedCreatureBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IPlacedCreatureGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Base,
                header: translationParams.ConvertToCustom(RecordTypes.NAME));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Owner,
                header: translationParams.ConvertToCustom(RecordTypes.XOWN));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FactionRank,
                header: translationParams.ConvertToCustom(RecordTypes.XRNK));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlobalVariable,
                header: translationParams.ConvertToCustom(RecordTypes.XGLB));
            if (item.DistantLODData is {} DistantLODDataItem)
            {
                ((DistantLODDataBinaryWriteTranslation)((IBinaryItem)DistantLODDataItem).BinaryWriteTranslator).Write(
                    item: DistantLODDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.EnableParent is {} EnableParentItem)
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RagdollData,
                header: translationParams.ConvertToCustom(RecordTypes.XRGD));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: translationParams.ConvertToCustom(RecordTypes.XSCL));
            if (item.Location is {} LocationItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.DATA))
                {
                    ((LocationBinaryWriteTranslation)((IBinaryItem)LocationItem).BinaryWriteTranslator).Write(
                        item: LocationItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IPlacedCreatureGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ACRE,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedCreatureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedCreatureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedCreatureGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedCreatureBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly PlacedCreatureBinaryCreateTranslation Instance = new PlacedCreatureBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ACRE;
        public static ParseResult FillBinaryRecordTypes(
            IPlacedCreatureInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.NAME:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Base.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedCreature_FieldIndex.Base;
                }
                case RecordTypeInts.XOWN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Owner.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedCreature_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return (int)PlacedCreature_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XGLB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GlobalVariable.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedCreature_FieldIndex.GlobalVariable;
                }
                case RecordTypeInts.XLOD:
                {
                    item.DistantLODData = Mutagen.Bethesda.Oblivion.DistantLODData.CreateFromBinary(frame: frame);
                    return (int)PlacedCreature_FieldIndex.DistantLODData;
                }
                case RecordTypeInts.XESP:
                {
                    item.EnableParent = Mutagen.Bethesda.Oblivion.EnableParent.CreateFromBinary(frame: frame);
                    return (int)PlacedCreature_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XRGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedCreature_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XSCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedCreature_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.Location = Mutagen.Bethesda.Oblivion.Location.CreateFromBinary(frame: frame);
                    return (int)PlacedCreature_FieldIndex.Location;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class PlacedCreatureBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class PlacedCreatureBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IPlacedCreatureGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedCreature_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedCreature_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedCreatureCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedCreatureSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedCreatureCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedCreatureBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedCreatureBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPlacedCreature);


        #region Base
        private int? _BaseLocation;
        public IFormLinkNullableGetter<ICreatureGetter> Base => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICreatureGetter>(_package, _recordData, _BaseLocation);
        #endregion
        #region Owner
        private int? _OwnerLocation;
        public IFormLinkNullableGetter<IFactionGetter> Owner => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFactionGetter>(_package, _recordData, _OwnerLocation);
        #endregion
        #region FactionRank
        private int? _FactionRankLocation;
        public Int32? FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FactionRankLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region GlobalVariable
        private int? _GlobalVariableLocation;
        public IFormLinkNullableGetter<IGlobalGetter> GlobalVariable => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _GlobalVariableLocation);
        #endregion
        #region DistantLODData
        private RangeInt32? _DistantLODDataLocation;
        public IDistantLODDataGetter? DistantLODData => _DistantLODDataLocation.HasValue ? DistantLODDataBinaryOverlay.DistantLODDataFactory(_recordData.Slice(_DistantLODDataLocation!.Value.Min), _package) : default;
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(_recordData.Slice(_EnableParentLocation!.Value.Min), _package) : default;
        #endregion
        #region RagdollData
        private int? _RagdollDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollData => _RagdollDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _RagdollDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public ILocationGetter? Location { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedCreatureBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedCreatureGetter PlacedCreatureFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlacedCreatureBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlacedCreatureGetter PlacedCreatureFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedCreatureFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.NAME:
                {
                    _BaseLocation = (stream.Position - offset);
                    return (int)PlacedCreature_FieldIndex.Base;
                }
                case RecordTypeInts.XOWN:
                {
                    _OwnerLocation = (stream.Position - offset);
                    return (int)PlacedCreature_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    _FactionRankLocation = (stream.Position - offset);
                    return (int)PlacedCreature_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XGLB:
                {
                    _GlobalVariableLocation = (stream.Position - offset);
                    return (int)PlacedCreature_FieldIndex.GlobalVariable;
                }
                case RecordTypeInts.XLOD:
                {
                    _DistantLODDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedCreature_FieldIndex.DistantLODData;
                }
                case RecordTypeInts.XESP:
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedCreature_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XRGD:
                {
                    _RagdollDataLocation = (stream.Position - offset);
                    return (int)PlacedCreature_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XSCL:
                {
                    _ScaleLocation = (stream.Position - offset);
                    return (int)PlacedCreature_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.Location = LocationBinaryOverlay.LocationFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedCreature_FieldIndex.Location;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedCreatureMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedCreature>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedCreatureGetter rhs) return false;
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedCreatureGetter? obj)
        {
            return ((PlacedCreatureCommon)((IPlacedCreatureGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedCreatureCommon)((IPlacedCreatureGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

