/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class DialogTopic :
        OblivionMajorRecord,
        IDialogTopicInternal,
        IEquatable<IDialogTopicGetter>,
        ILoquiObjectSetter<DialogTopic>
    {
        #region Ctor
        protected DialogTopic()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IQuestGetter>> _Quests = new ExtendedList<IFormLinkGetter<IQuestGetter>>();
        public ExtendedList<IFormLinkGetter<IQuestGetter>> Quests
        {
            get => this._Quests;
            init => this._Quests = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IQuestGetter>> IDialogTopicGetter.Quests => _Quests;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IDialogTopicGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region DialogType
        public DialogType? DialogType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        DialogType? IDialogTopicGetter.DialogType => this.DialogType;
        #endregion
        #region Timestamp
        public Int32 Timestamp { get; set; } = default(Int32);
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogItem> _Items = new ExtendedList<DialogItem>();
        public ExtendedList<DialogItem> Items
        {
            get => this._Items;
            init => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogItemGetter> IDialogTopicGetter.Items => _Items;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogTopicMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Quests = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Name = initialValue;
                this.DialogType = initialValue;
                this.Timestamp = initialValue;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogItem.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogItem.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Quests,
                TItem Name,
                TItem DialogType,
                TItem Timestamp,
                TItem Items)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Quests = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Quests, Enumerable.Empty<(int Index, TItem Value)>());
                this.Name = Name;
                this.DialogType = DialogType;
                this.Timestamp = Timestamp;
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogItem.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, DialogItem.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Quests;
            public TItem Name;
            public TItem DialogType;
            public TItem Timestamp;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogItem.Mask<TItem>?>>?>? Items;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Quests, rhs.Quests)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.DialogType, rhs.DialogType)) return false;
                if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Quests);
                hash.Add(this.Name);
                hash.Add(this.DialogType);
                hash.Add(this.Timestamp);
                hash.Add(this.Items);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Quests != null)
                {
                    if (!eval(this.Quests.Overall)) return false;
                    if (this.Quests.Specific != null)
                    {
                        foreach (var item in this.Quests.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.DialogType)) return false;
                if (!eval(this.Timestamp)) return false;
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Quests != null)
                {
                    if (eval(this.Quests.Overall)) return true;
                    if (this.Quests.Specific != null)
                    {
                        foreach (var item in this.Quests.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (eval(this.DialogType)) return true;
                if (eval(this.Timestamp)) return true;
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogTopic.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Quests != null)
                {
                    obj.Quests = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Quests.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Quests.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Quests.Specific = l;
                        foreach (var item in Quests.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Name = eval(this.Name);
                obj.DialogType = eval(this.DialogType);
                obj.Timestamp = eval(this.Timestamp);
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogItem.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogItem.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogItem.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, DialogItem.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, DialogItem.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DialogTopic.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DialogTopic.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DialogTopic.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Quests?.Overall ?? true)
                        && Quests is {} QuestsItem)
                    {
                        sb.AppendLine("Quests =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(QuestsItem.Overall);
                            if (QuestsItem.Specific != null)
                            {
                                foreach (var subItem in QuestsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.DialogType ?? true)
                    {
                        sb.AppendItem(DialogType, "DialogType");
                    }
                    if (printMask?.Timestamp ?? true)
                    {
                        sb.AppendItem(Timestamp, "Timestamp");
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        sb.AppendLine("Items =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Quests;
            public Exception? Name;
            public Exception? DialogType;
            public Exception? Timestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogItem.ErrorMask?>>?>? Items;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
                switch (enu)
                {
                    case DialogTopic_FieldIndex.Quests:
                        return Quests;
                    case DialogTopic_FieldIndex.Name:
                        return Name;
                    case DialogTopic_FieldIndex.DialogType:
                        return DialogType;
                    case DialogTopic_FieldIndex.Timestamp:
                        return Timestamp;
                    case DialogTopic_FieldIndex.Items:
                        return Items;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
                switch (enu)
                {
                    case DialogTopic_FieldIndex.Quests:
                        this.Quests = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogTopic_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case DialogTopic_FieldIndex.DialogType:
                        this.DialogType = ex;
                        break;
                    case DialogTopic_FieldIndex.Timestamp:
                        this.Timestamp = ex;
                        break;
                    case DialogTopic_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogItem.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogTopic_FieldIndex enu = (DialogTopic_FieldIndex)index;
                switch (enu)
                {
                    case DialogTopic_FieldIndex.Quests:
                        this.Quests = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogTopic_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.DialogType:
                        this.DialogType = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Timestamp:
                        this.Timestamp = (Exception?)obj;
                        break;
                    case DialogTopic_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogItem.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Quests != null) return true;
                if (Name != null) return true;
                if (DialogType != null) return true;
                if (Timestamp != null) return true;
                if (Items != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Quests is {} QuestsItem)
                {
                    sb.AppendLine("Quests =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(QuestsItem.Overall);
                        if (QuestsItem.Specific != null)
                        {
                            foreach (var subItem in QuestsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(DialogType, "DialogType");
                }
                {
                    sb.AppendItem(Timestamp, "Timestamp");
                }
                if (Items is {} ItemsItem)
                {
                    sb.AppendLine("Items =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Quests = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Quests?.Overall, rhs.Quests?.Overall), Noggog.ExceptionExt.Combine(this.Quests?.Specific, rhs.Quests?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.DialogType = this.DialogType.Combine(rhs.DialogType);
                ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogItem.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), Noggog.ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Quests;
            public bool Name;
            public bool DialogType;
            public bool Timestamp;
            public DialogItem.TranslationMask? Items;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Quests = defaultOn;
                this.Name = defaultOn;
                this.DialogType = defaultOn;
                this.Timestamp = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Quests, null));
                ret.Add((Name, null));
                ret.Add((DialogType, null));
                ret.Add((Timestamp, null));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DialogTopic_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogTopicCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogTopicSetterCommon.Instance.RemapLinks(this, mapping);
        public DialogTopic(
            FormKey formKey,
            OblivionRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private DialogTopic(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public DialogTopic(IOblivionMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.OblivionRelease)
        {
        }

        public DialogTopic(IOblivionMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.OblivionRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<DialogTopic>.ToString(this);
        }

        protected override Type LinkType => typeof(IDialogTopic);

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDialogTopicGetter rhs) return false;
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogTopicGetter? obj)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogTopicBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogTopicBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static DialogTopic CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DialogTopic();
            ((DialogTopicSetterCommon)((IDialogTopicGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogTopic item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogTopic GetNew()
        {
            return new DialogTopic();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogTopic :
        IDialogTopicGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IDialogTopicInternal>,
        IMajorRecordEnumerable,
        INamed,
        INamedRequired,
        IOblivionMajorRecordInternal
    {
        new ExtendedList<IFormLinkGetter<IQuestGetter>> Quests { get; }
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new DialogType? DialogType { get; set; }
        new Int32 Timestamp { get; set; }
        new ExtendedList<DialogItem> Items { get; }
    }

    public partial interface IDialogTopicInternal :
        IOblivionMajorRecordInternal,
        IDialogTopic,
        IDialogTopicGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.DIAL)]
    public partial interface IDialogTopicGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IDialogTopicGetter>,
        IMajorRecordGetterEnumerable,
        IMapsToGetter<IDialogTopicGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => DialogTopic_Registration.Instance;
        IReadOnlyList<IFormLinkGetter<IQuestGetter>> Quests { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        DialogType? DialogType { get; }
        Int32 Timestamp { get; }
        IReadOnlyList<IDialogItemGetter> Items { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DialogTopicMixIn
    {
        public static void Clear(this IDialogTopicInternal item)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogTopic.Mask<bool> GetEqualsMask(
            this IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDialogTopicGetter item,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDialogTopicGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            DialogTopic.TranslationMask? equalsMask = null)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogTopicInternal lhs,
            IDialogTopicGetter rhs,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogTopic.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogTopicInternal lhs,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            DialogTopic.TranslationMask? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogTopic DeepCopy(
            this IDialogTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this IDialogTopicGetter obj)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IDialogTopicGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this IDialogTopicGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this IDialogTopicInternal obj)
        {
            return ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IDialogTopicInternal obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this IDialogTopicInternal obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            IEnumerable<FormKey> keys)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            IEnumerable<IFormLinkIdentifier> keys)
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            HashSet<FormKey> keys)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IDialogTopicInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IDialogTopicInternal obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IDialogTopicInternal obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IDialogTopicInternal obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IDialogTopicInternal obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IDialogTopicInternal obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        public static DialogTopic Duplicate(
            this IDialogTopicGetter item,
            FormKey formKey,
            DialogTopic.TranslationMask? copyMask = null)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static DialogTopic Duplicate(
            this IDialogTopicGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogTopicInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DialogTopicSetterCommon)((IDialogTopicGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum DialogTopic_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Quests = 5,
        Name = 6,
        DialogType = 7,
        Timestamp = 8,
        Items = 9,
    }
    #endregion

    #region Registration
    internal partial class DialogTopic_Registration : ILoquiRegistration
    {
        public static readonly DialogTopic_Registration Instance = new DialogTopic_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(DialogTopic.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogTopic.ErrorMask);

        public static readonly Type ClassType = typeof(DialogTopic);

        public static readonly Type GetterType = typeof(IDialogTopicGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogTopic);

        public static readonly Type? InternalSetterType = typeof(IDialogTopicInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.DialogTopic";

        public const string Name = "DialogTopic";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DIAL;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.DIAL);
            var all = RecordCollection.Factory(
                RecordTypes.DIAL,
                RecordTypes.QSTI,
                RecordTypes.FULL,
                RecordTypes.DATA,
                RecordTypes.INFO,
                RecordTypes.TPIC,
                RecordTypes.PNAM,
                RecordTypes.NAME,
                RecordTypes.TRDT,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.CTDA,
                RecordTypes.CTDT,
                RecordTypes.TCLT,
                RecordTypes.TCLF,
                RecordTypes.SCHD,
                RecordTypes.SCHR);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogTopicBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DialogTopicSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly DialogTopicSetterCommon Instance = new DialogTopicSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogTopicInternal item)
        {
            ClearPartial();
            item.Quests.Clear();
            item.Name = default;
            item.DialogType = default;
            item.Timestamp = default(Int32);
            item.Items.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IDialogTopicInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogTopicInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDialogTopic obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Quests.RemapLinks(mapping);
            obj.Items.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(IDialogTopicInternal obj)
        {
            foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IDialogTopicInternal obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IDialogTopicInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IDialogTopicInternal obj,
            HashSet<FormKey> keys)
        {
            obj.Items.Remove(keys);
        }
        
        public void Remove(
            IDialogTopicInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    if (!DialogTopic_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "DialogItem":
                case "IDialogItemGetter":
                case "IDialogItem":
                case "IDialogItemInternal":
                    obj.Items.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogTopicInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IDialogTopicInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: DialogTopicBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogTopicBinaryCreateTranslation.FillBinaryRecordTypes);
            DialogTopicBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DialogTopic)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DialogTopic)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class DialogTopicCommon : OblivionMajorRecordCommon
    {
        public new static readonly DialogTopicCommon Instance = new DialogTopicCommon();

        public DialogTopic.Mask<bool> GetEqualsMask(
            IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogTopic.Mask<bool>(false);
            ((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogTopicGetter item,
            IDialogTopicGetter rhs,
            DialogTopic.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Quests = item.Quests.CollectionEqualsHelper(
                rhs.Quests,
                (l, r) => object.Equals(l, r),
                include);
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.DialogType = item.DialogType == rhs.DialogType;
            ret.Timestamp = item.Timestamp == rhs.Timestamp;
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IDialogTopicGetter item,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDialogTopicGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogTopic.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DialogTopic =>");
            }
            else
            {
                sb.AppendLine($"{name} (DialogTopic) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDialogTopicGetter item,
            StructuredStringBuilder sb,
            DialogTopic.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Quests?.Overall ?? true)
            {
                sb.AppendLine("Quests =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Quests)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.DialogType ?? true)
                && item.DialogType is {} DialogTypeItem)
            {
                sb.AppendItem(DialogTypeItem, "DialogType");
            }
            if (printMask?.Timestamp ?? true)
            {
                sb.AppendItem(item.Timestamp, "Timestamp");
            }
            if (printMask?.Items?.Overall ?? true)
            {
                sb.AppendLine("Items =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Items)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static DialogTopic_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (DialogTopic_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (DialogTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new DialogTopic_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (DialogTopic_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogTopic_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogTopicGetter? lhs,
            IDialogTopicGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Quests) ?? true))
            {
                if (!lhs.Quests.SequenceEqualNullable(rhs.Quests)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.DialogType) ?? true))
            {
                if (lhs.DialogType != rhs.DialogType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Timestamp) ?? true))
            {
                if (lhs.Timestamp != rhs.Timestamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqual(rhs.Items, (l, r) => ((DialogItemCommon)((IDialogItemGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)DialogTopic_FieldIndex.Items)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDialogTopicGetter?)lhs,
                rhs: rhs as IDialogTopicGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDialogTopicGetter?)lhs,
                rhs: rhs as IDialogTopicGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IDialogTopicGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Quests);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.DialogType is {} DialogTypeitem)
            {
                hash.Add(DialogTypeitem);
            }
            hash.Add(item.Timestamp);
            hash.Add(item.Items);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogTopicGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogTopicGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogTopic.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDialogTopicGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Quests)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Items.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(IDialogTopicGetter obj)
        {
            foreach (var subItem in obj.Items)
            {
                yield return subItem;
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IDialogTopicGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IDialogTopicGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                    if (!DialogTopic_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogItem":
                case "IDialogItemGetter":
                case "IDialogItem":
                case "IDialogItemInternal":
                    foreach (var subItem in obj.Items)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                        foreach (var item in subItem.EnumerateMajorRecords(type, throwIfUnknown: false))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Oblivion, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IDialogTopicGetter obj,
            ILinkCache linkCache,
            ModKey modKey,
            IModContext? parent,
            Func<IOblivionMod, IDialogTopicGetter, IDialogTopic> getOrAddAsOverride,
            Func<IOblivionMod, IDialogTopicGetter, string?, FormKey?, IDialogTopic> duplicateInto)
        {
            var curContext = new ModContext<IOblivionMod, IOblivionModGetter, IDialogTopic, IDialogTopicGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            foreach (var subItem in obj.Items)
            {
                yield return new ModContext<IOblivionMod, IOblivionModGetter, IDialogItemInternal, IDialogItemGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<IDialogTopicGetter>(obj.FormKey));
                        var ret = parent.Items.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (DialogItem)((IDialogItemGetter)r).DeepCopy();
                        parent.Items.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (DialogItem)((IDialogItemGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<IDialogTopicGetter>(obj.FormKey)).Items.Add(dup);
                        return dup;
                    });
            }
        }
        
        public IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IDialogTopicGetter obj,
            ILinkCache linkCache,
            Type type,
            ModKey modKey,
            IModContext? parent,
            bool throwIfUnknown,
            Func<IOblivionMod, IDialogTopicGetter, IDialogTopic> getOrAddAsOverride,
            Func<IOblivionMod, IDialogTopicGetter, string?, FormKey?, IDialogTopic> duplicateInto)
        {
            var curContext = new ModContext<IOblivionMod, IOblivionModGetter, IDialogTopic, IDialogTopicGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                    if (!DialogTopic_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogItem":
                case "IDialogItemGetter":
                case "IDialogItem":
                case "IDialogItemInternal":
                    foreach (var subItem in obj.Items)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IDialogItemInternal, IDialogItemGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<IDialogTopicGetter>(obj.FormKey));
                                    var ret = parent.Items.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (DialogItem)((IDialogItemGetter)r).DeepCopy();
                                    parent.Items.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (DialogItem)((IDialogItemGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<IDialogTopicGetter>(obj.FormKey)).Items.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<IDialogTopicGetter, IOblivionMod, IOblivionModGetter>(
                        GameCategory.Oblivion,
                        obj,
                        type,
                        linkCache,
                        (lk, t, b) => this.EnumerateMajorRecordContexts(obj, lk, t, modKey, parent, b, getOrAddAsOverride, duplicateInto),
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        #region Duplicate
        public DialogTopic Duplicate(
            IDialogTopicGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new DialogTopic(formKey, default(OblivionRelease));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogTopicGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogTopicGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class DialogTopicSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly DialogTopicSetterTranslationCommon Instance = new DialogTopicSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogTopicInternal item,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDialogTopic item,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.Quests);
                try
                {
                    item.Quests.SetTo(
                        rhs.Quests
                            .Select(b => (IFormLinkGetter<IQuestGetter>)new FormLink<IQuestGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.DialogType) ?? true))
            {
                item.DialogType = rhs.DialogType;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogTopic_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)DialogTopic_FieldIndex.Items);
                try
                {
                    item.Items.SetTo(
                        rhs.Items
                        .Select(r =>
                        {
                            return (DialogItem)r.DeepCopy(
                                copyMask: default(TranslationCrystal),
                                errorMask: errorMask);
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDialogTopic item,
            IDialogTopicGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogTopicInternal)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogTopic)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogTopicInternal)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogTopic)item,
                rhs: (IDialogTopicGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            DialogTopic.TranslationMask? copyMask = null)
        {
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            out DialogTopic.ErrorMask errorMask,
            DialogTopic.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogTopic.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogTopic DeepCopy(
            IDialogTopicGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogTopic ret = (DialogTopic)((DialogTopicCommon)((IDialogTopicGetter)item).CommonInstance()!).GetNew();
            ((DialogTopicSetterTranslationCommon)((IDialogTopicGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class DialogTopic
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogTopic_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogTopic_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogTopicCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogTopicSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogTopicSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class DialogTopicBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly DialogTopicBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IDialogTopicGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IDialogTopicGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IQuestGetter>>.Instance.Write(
                writer: writer,
                items: item.Quests,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IQuestGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.QSTI));
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            EnumBinaryTranslation<DialogType, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.DialogType,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
        }

        public static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            IDialogTopicGetter obj);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            IDialogTopicGetter obj)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj);
        }
        public void Write(
            MutagenWriter writer,
            IDialogTopicGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.DIAL,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDialogTopicGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDialogTopicGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDialogTopicGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DialogTopicBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly DialogTopicBinaryCreateTranslation Instance = new DialogTopicBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.DIAL;
        public static void FillBinaryStructs(
            IDialogTopicInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IDialogTopicInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.QSTI:
                {
                    item.Quests.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IQuestGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.QSTI),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)DialogTopic_FieldIndex.Quests;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogTopic_FieldIndex.Name;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DialogType = EnumBinaryTranslation<DialogType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)DialogTopic_FieldIndex.DialogType;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            IDialogTopicInternal obj);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            IDialogTopicInternal obj)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj);
        }
    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class DialogTopicBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class DialogTopicBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IDialogTopicGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogTopic_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogTopic_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogTopicCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogTopicSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogTopicCommon.Instance.EnumerateFormLinks(this);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogTopicBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogTopicBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IDialogTopic);


        public IReadOnlyList<IFormLinkGetter<IQuestGetter>> Quests { get; private set; } = [];
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region DialogType
        private int? _DialogTypeLocation;
        public DialogType? DialogType => _DialogTypeLocation.HasValue ? (DialogType)HeaderTranslation.ExtractSubrecordMemory(_recordData, _DialogTypeLocation!.Value, _package.MetaData.Constants)[0] : default(DialogType?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogTopicBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDialogTopicGetter DialogTopicFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            var origStream = stream;
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DialogTopicBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: origStream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IDialogTopicGetter DialogTopicFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DialogTopicFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.QSTI:
                {
                    this.Quests = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IQuestGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IQuestGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.QSTI,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)DialogTopic_FieldIndex.Quests;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)DialogTopic_FieldIndex.Name;
                }
                case RecordTypeInts.DATA:
                {
                    _DialogTypeLocation = (stream.Position - offset);
                    return (int)DialogTopic_FieldIndex.DialogType;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogTopicMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<DialogTopic>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDialogTopicGetter rhs) return false;
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogTopicGetter? obj)
        {
            return ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogTopicCommon)((IDialogTopicGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

