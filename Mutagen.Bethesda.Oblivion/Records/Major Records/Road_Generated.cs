/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Road :
        OblivionMajorRecord,
        IEquatable<IRoadGetter>,
        ILoquiObjectSetter<Road>,
        IRoadInternal
    {
        #region Ctor
        protected Road()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Points
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RoadPoint>? _Points;
        public ExtendedList<RoadPoint>? Points
        {
            get => this._Points;
            set => this._Points = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRoadPointGetter>? IRoadGetter.Points => _Points;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RoadMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Points = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RoadPoint.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RoadPoint.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Points)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Points = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RoadPoint.Mask<TItem>?>>?>(Points, Enumerable.Empty<MaskItemIndexed<TItem, RoadPoint.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RoadPoint.Mask<TItem>?>>?>? Points;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Points, rhs.Points)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Points);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Points != null)
                {
                    if (!eval(this.Points.Overall)) return false;
                    if (this.Points.Specific != null)
                    {
                        foreach (var item in this.Points.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Points != null)
                {
                    if (eval(this.Points.Overall)) return true;
                    if (this.Points.Specific != null)
                    {
                        foreach (var item in this.Points.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Road.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Points != null)
                {
                    obj.Points = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RoadPoint.Mask<R>?>>?>(eval(this.Points.Overall), Enumerable.Empty<MaskItemIndexed<R, RoadPoint.Mask<R>?>>());
                    if (Points.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RoadPoint.Mask<R>?>>();
                        obj.Points.Specific = l;
                        foreach (var item in Points.Specific)
                        {
                            MaskItemIndexed<R, RoadPoint.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, RoadPoint.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Road.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Road.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Road.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Points?.Overall ?? true)
                        && Points is {} PointsItem)
                    {
                        sb.AppendLine("Points =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PointsItem.Overall);
                            if (PointsItem.Specific != null)
                            {
                                foreach (var subItem in PointsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RoadPoint.ErrorMask?>>?>? Points;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Road_FieldIndex enu = (Road_FieldIndex)index;
                switch (enu)
                {
                    case Road_FieldIndex.Points:
                        return Points;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Road_FieldIndex enu = (Road_FieldIndex)index;
                switch (enu)
                {
                    case Road_FieldIndex.Points:
                        this.Points = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RoadPoint.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Road_FieldIndex enu = (Road_FieldIndex)index;
                switch (enu)
                {
                    case Road_FieldIndex.Points:
                        this.Points = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RoadPoint.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Points != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Points is {} PointsItem)
                {
                    sb.AppendLine("Points =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PointsItem.Overall);
                        if (PointsItem.Specific != null)
                        {
                            foreach (var subItem in PointsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Points = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RoadPoint.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Points?.Overall, rhs.Points?.Overall), Noggog.ExceptionExt.Combine(this.Points?.Specific, rhs.Points?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public RoadPoint.TranslationMask? Points;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Points == null ? DefaultOn : !Points.GetCrystal().CopyNothing, Points?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Road_Registration.TriggeringRecordType;
        public Road(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Road(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Road(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Road(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Road>.ToString(this);
        }

        protected override Type LinkType => typeof(IRoad);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRoadGetter rhs) return false;
            return ((RoadCommon)((IRoadGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRoadGetter? obj)
        {
            return ((RoadCommon)((IRoadGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RoadCommon)((IRoadGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RoadBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RoadBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Road CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Road();
            ((RoadSetterCommon)((IRoadGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Road item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((RoadSetterCommon)((IRoadGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Road GetNew()
        {
            return new Road();
        }

    }
    #endregion

    #region Interface
    public partial interface IRoad :
        ILoquiObjectSetter<IRoadInternal>,
        IOblivionMajorRecordInternal,
        IRoadGetter
    {
        new ExtendedList<RoadPoint>? Points { get; set; }
    }

    public partial interface IRoadInternal :
        IOblivionMajorRecordInternal,
        IRoad,
        IRoadGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.ROAD)]
    public partial interface IRoadGetter :
        IOblivionMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IRoadGetter>,
        IMapsToGetter<IRoadGetter>
    {
        static new ILoquiRegistration StaticRegistration => Road_Registration.Instance;
        IReadOnlyList<IRoadPointGetter>? Points { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class RoadMixIn
    {
        public static void Clear(this IRoadInternal item)
        {
            ((RoadSetterCommon)((IRoadGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Road.Mask<bool> GetEqualsMask(
            this IRoadGetter item,
            IRoadGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((RoadCommon)((IRoadGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IRoadGetter item,
            string? name = null,
            Road.Mask<bool>? printMask = null)
        {
            return ((RoadCommon)((IRoadGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IRoadGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Road.Mask<bool>? printMask = null)
        {
            ((RoadCommon)((IRoadGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IRoadGetter item,
            IRoadGetter rhs,
            Road.TranslationMask? equalsMask = null)
        {
            return ((RoadCommon)((IRoadGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IRoadInternal lhs,
            IRoadGetter rhs,
            out Road.ErrorMask errorMask,
            Road.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((RoadSetterTranslationCommon)((IRoadGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Road.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IRoadInternal lhs,
            IRoadGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((RoadSetterTranslationCommon)((IRoadGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Road DeepCopy(
            this IRoadGetter item,
            Road.TranslationMask? copyMask = null)
        {
            return ((RoadSetterTranslationCommon)((IRoadGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Road DeepCopy(
            this IRoadGetter item,
            out Road.ErrorMask errorMask,
            Road.TranslationMask? copyMask = null)
        {
            return ((RoadSetterTranslationCommon)((IRoadGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Road DeepCopy(
            this IRoadGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((RoadSetterTranslationCommon)((IRoadGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Road Duplicate(
            this IRoadGetter item,
            FormKey formKey,
            Road.TranslationMask? copyMask = null)
        {
            return ((RoadCommon)((IRoadGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Road Duplicate(
            this IRoadGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((RoadCommon)((IRoadGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IRoadInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((RoadSetterCommon)((IRoadGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum Road_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Points = 5,
    }
    #endregion

    #region Registration
    internal partial class Road_Registration : ILoquiRegistration
    {
        public static readonly Road_Registration Instance = new Road_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(Road.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Road.ErrorMask);

        public static readonly Type ClassType = typeof(Road);

        public static readonly Type GetterType = typeof(IRoadGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IRoad);

        public static readonly Type? InternalSetterType = typeof(IRoadInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Road";

        public const string Name = "Road";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ROAD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ROAD);
            var all = RecordCollection.Factory(
                RecordTypes.ROAD,
                RecordTypes.PGRP);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(RoadBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class RoadSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly RoadSetterCommon Instance = new RoadSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IRoadInternal item)
        {
            ClearPartial();
            item.Points = null;
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (IRoadInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IRoadInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IRoad obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IRoadInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IRoadInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: RoadBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: RoadBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Road)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Road)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class RoadCommon : OblivionMajorRecordCommon
    {
        public new static readonly RoadCommon Instance = new RoadCommon();

        public Road.Mask<bool> GetEqualsMask(
            IRoadGetter item,
            IRoadGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Road.Mask<bool>(false);
            ((RoadCommon)((IRoadGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IRoadGetter item,
            IRoadGetter rhs,
            Road.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Points = item.Points.CollectionEqualsHelper(
                rhs.Points,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IRoadGetter item,
            string? name = null,
            Road.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IRoadGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Road.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Road =>");
            }
            else
            {
                sb.AppendLine($"{name} (Road) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IRoadGetter item,
            StructuredStringBuilder sb,
            Road.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Points?.Overall ?? true)
                && item.Points is {} PointsItem)
            {
                sb.AppendLine("Points =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PointsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Road_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Road_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Road_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Road_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Road_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Road_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Road_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Road_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Road_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Road_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Road_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IRoadGetter? lhs,
            IRoadGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Road_FieldIndex.Points) ?? true))
            {
                if (!lhs.Points.SequenceEqualNullable(rhs.Points, (l, r) => ((RoadPointCommon)((IRoadPointGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Road_FieldIndex.Points)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IRoadGetter?)lhs,
                rhs: rhs as IRoadGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IRoadGetter?)lhs,
                rhs: rhs as IRoadGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IRoadGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Points);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (IRoadGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IRoadGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Road.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IRoadGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Road Duplicate(
            IRoadGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Road(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRoadGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IRoadGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class RoadSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly RoadSetterTranslationCommon Instance = new RoadSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IRoadInternal item,
            IRoadGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IRoad item,
            IRoadGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Road_FieldIndex.Points) ?? true))
            {
                errorMask?.PushIndex((int)Road_FieldIndex.Points);
                try
                {
                    if ((rhs.Points != null))
                    {
                        item.Points = 
                            rhs.Points
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<RoadPoint>();
                    }
                    else
                    {
                        item.Points = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IRoad item,
            IRoadGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRoadInternal)item,
                rhs: (IRoadGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRoad)item,
                rhs: (IRoadGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRoadInternal)item,
                rhs: (IRoadGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IRoad)item,
                rhs: (IRoadGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Road DeepCopy(
            IRoadGetter item,
            Road.TranslationMask? copyMask = null)
        {
            Road ret = (Road)((RoadCommon)((IRoadGetter)item).CommonInstance()!).GetNew();
            ((RoadSetterTranslationCommon)((IRoadGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Road DeepCopy(
            IRoadGetter item,
            out Road.ErrorMask errorMask,
            Road.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Road ret = (Road)((RoadCommon)((IRoadGetter)item).CommonInstance()!).GetNew();
            ((RoadSetterTranslationCommon)((IRoadGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Road.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Road DeepCopy(
            IRoadGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Road ret = (Road)((RoadCommon)((IRoadGetter)item).CommonInstance()!).GetNew();
            ((RoadSetterTranslationCommon)((IRoadGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Road
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Road_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Road_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RoadCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return RoadSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RoadSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class RoadBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly RoadBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IRoadGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            RoadBinaryWriteTranslation.WriteBinaryPoints(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryPointsCustom(
            MutagenWriter writer,
            IRoadGetter item);

        public static void WriteBinaryPoints(
            MutagenWriter writer,
            IRoadGetter item)
        {
            WriteBinaryPointsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IRoadGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ROAD,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IRoadGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IRoadGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IRoadGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class RoadBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly RoadBinaryCreateTranslation Instance = new RoadBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ROAD;
        public static ParseResult FillBinaryRecordTypes(
            IRoadInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.PGRP:
                {
                    RoadBinaryCreateTranslation.FillBinaryPointsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Road_FieldIndex.Points;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryPointsCustom(
            MutagenFrame frame,
            IRoadInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class RoadBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class RoadBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        IRoadGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Road_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Road_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => RoadCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => RoadSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => RoadBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((RoadBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IRoad);


        #region Points
        partial void PointsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected RoadBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IRoadGetter RoadFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new RoadBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IRoadGetter RoadFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return RoadFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.PGRP:
                {
                    PointsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Road_FieldIndex.Points;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            RoadMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Road>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IRoadGetter rhs) return false;
            return ((RoadCommon)((IRoadGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IRoadGetter? obj)
        {
            return ((RoadCommon)((IRoadGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((RoadCommon)((IRoadGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

