/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class Cell :
        OblivionMajorRecord,
        ICellInternal,
        IEquatable<ICellGetter>,
        ILoquiObjectSetter<Cell>
    {
        #region Ctor
        protected Cell()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? ICellGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Flags
        public Cell.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Cell.Flag? ICellGetter.Flags => this.Flags;
        #endregion
        #region Grid
        public P2Int? Grid { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P2Int? ICellGetter.Grid => this.Grid;
        #endregion
        #region Lighting
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CellLighting? _Lighting;
        public CellLighting? Lighting
        {
            get => _Lighting;
            set => _Lighting = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICellLightingGetter? ICellGetter.Lighting => this.Lighting;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IRegionGetter>>? _Regions;
        public ExtendedList<IFormLinkGetter<IRegionGetter>>? Regions
        {
            get => this._Regions;
            set => this._Regions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IRegionGetter>>? ICellGetter.Regions => _Regions;
        #endregion

        #endregion
        #region MusicType
        public MusicType? MusicType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        MusicType? ICellGetter.MusicType => this.MusicType;
        #endregion
        #region WaterHeight
        public Single? WaterHeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ICellGetter.WaterHeight => this.WaterHeight;
        #endregion
        #region Climate
        private readonly IFormLinkNullable<IClimateGetter> _Climate = new FormLinkNullable<IClimateGetter>();
        public IFormLinkNullable<IClimateGetter> Climate
        {
            get => _Climate;
            set => _Climate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IClimateGetter> ICellGetter.Climate => this.Climate;
        #endregion
        #region Water
        private readonly IFormLinkNullable<IWaterGetter> _Water = new FormLinkNullable<IWaterGetter>();
        public IFormLinkNullable<IWaterGetter> Water
        {
            get => _Water;
            set => _Water.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IWaterGetter> ICellGetter.Water => this.Water;
        #endregion
        #region Owner
        private readonly IFormLinkNullable<IFactionGetter> _Owner = new FormLinkNullable<IFactionGetter>();
        public IFormLinkNullable<IFactionGetter> Owner
        {
            get => _Owner;
            set => _Owner.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFactionGetter> ICellGetter.Owner => this.Owner;
        #endregion
        #region FactionRank
        public Int32? FactionRank { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ICellGetter.FactionRank => this.FactionRank;
        #endregion
        #region GlobalVariable
        private readonly IFormLinkNullable<IGlobalGetter> _GlobalVariable = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> GlobalVariable
        {
            get => _GlobalVariable;
            set => _GlobalVariable.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> ICellGetter.GlobalVariable => this.GlobalVariable;
        #endregion
        #region PathGrid
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PathGrid? _PathGrid;
        public PathGrid? PathGrid
        {
            get => _PathGrid;
            set => _PathGrid = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPathGridGetter? ICellGetter.PathGrid => this.PathGrid;
        #endregion
        #region Landscape
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Landscape? _Landscape;
        public Landscape? Landscape
        {
            get => _Landscape;
            set => _Landscape = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILandscapeGetter? ICellGetter.Landscape => this.Landscape;
        #endregion
        #region Timestamp
        public Int32 Timestamp { get; set; } = default(Int32);
        #endregion
        #region PersistentTimestamp
        public Int32 PersistentTimestamp { get; set; } = default(Int32);
        #endregion
        #region Persistent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IPlaced> _Persistent = new ExtendedList<IPlaced>();
        public ExtendedList<IPlaced> Persistent
        {
            get => this._Persistent;
            init => this._Persistent = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlacedGetter> ICellGetter.Persistent => _Persistent;
        #endregion

        #endregion
        #region TemporaryTimestamp
        public Int32 TemporaryTimestamp { get; set; } = default(Int32);
        #endregion
        #region Temporary
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IPlaced> _Temporary = new ExtendedList<IPlaced>();
        public ExtendedList<IPlaced> Temporary
        {
            get => this._Temporary;
            init => this._Temporary = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlacedGetter> ICellGetter.Temporary => _Temporary;
        #endregion

        #endregion
        #region VisibleWhenDistantTimestamp
        public Int32 VisibleWhenDistantTimestamp { get; set; } = default(Int32);
        #endregion
        #region VisibleWhenDistant
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IPlaced> _VisibleWhenDistant = new ExtendedList<IPlaced>();
        public ExtendedList<IPlaced> VisibleWhenDistant
        {
            get => this._VisibleWhenDistant;
            init => this._VisibleWhenDistant = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPlacedGetter> ICellGetter.VisibleWhenDistant => _VisibleWhenDistant;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CellMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            OblivionMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Flags = initialValue;
                this.Grid = initialValue;
                this.Lighting = new MaskItem<TItem, CellLighting.Mask<TItem>?>(initialValue, new CellLighting.Mask<TItem>(initialValue));
                this.Regions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.MusicType = initialValue;
                this.WaterHeight = initialValue;
                this.Climate = initialValue;
                this.Water = initialValue;
                this.Owner = initialValue;
                this.FactionRank = initialValue;
                this.GlobalVariable = initialValue;
                this.PathGrid = new MaskItem<TItem, PathGrid.Mask<TItem>?>(initialValue, new PathGrid.Mask<TItem>(initialValue));
                this.Landscape = new MaskItem<TItem, Landscape.Mask<TItem>?>(initialValue, new Landscape.Mask<TItem>(initialValue));
                this.Timestamp = initialValue;
                this.PersistentTimestamp = initialValue;
                this.Persistent = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.TemporaryTimestamp = initialValue;
                this.Temporary = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.VisibleWhenDistantTimestamp = initialValue;
                this.VisibleWhenDistant = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem OblivionMajorRecordFlags,
                TItem Name,
                TItem Flags,
                TItem Grid,
                TItem Lighting,
                TItem Regions,
                TItem MusicType,
                TItem WaterHeight,
                TItem Climate,
                TItem Water,
                TItem Owner,
                TItem FactionRank,
                TItem GlobalVariable,
                TItem PathGrid,
                TItem Landscape,
                TItem Timestamp,
                TItem PersistentTimestamp,
                TItem Persistent,
                TItem TemporaryTimestamp,
                TItem Temporary,
                TItem VisibleWhenDistantTimestamp,
                TItem VisibleWhenDistant)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                OblivionMajorRecordFlags: OblivionMajorRecordFlags)
            {
                this.Name = Name;
                this.Flags = Flags;
                this.Grid = Grid;
                this.Lighting = new MaskItem<TItem, CellLighting.Mask<TItem>?>(Lighting, new CellLighting.Mask<TItem>(Lighting));
                this.Regions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Regions, Enumerable.Empty<(int Index, TItem Value)>());
                this.MusicType = MusicType;
                this.WaterHeight = WaterHeight;
                this.Climate = Climate;
                this.Water = Water;
                this.Owner = Owner;
                this.FactionRank = FactionRank;
                this.GlobalVariable = GlobalVariable;
                this.PathGrid = new MaskItem<TItem, PathGrid.Mask<TItem>?>(PathGrid, new PathGrid.Mask<TItem>(PathGrid));
                this.Landscape = new MaskItem<TItem, Landscape.Mask<TItem>?>(Landscape, new Landscape.Mask<TItem>(Landscape));
                this.Timestamp = Timestamp;
                this.PersistentTimestamp = PersistentTimestamp;
                this.Persistent = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(Persistent, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.TemporaryTimestamp = TemporaryTimestamp;
                this.Temporary = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(Temporary, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
                this.VisibleWhenDistantTimestamp = VisibleWhenDistantTimestamp;
                this.VisibleWhenDistant = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>(VisibleWhenDistant, Enumerable.Empty<MaskItemIndexed<TItem, IMask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Flags;
            public TItem Grid;
            public MaskItem<TItem, CellLighting.Mask<TItem>?>? Lighting { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Regions;
            public TItem MusicType;
            public TItem WaterHeight;
            public TItem Climate;
            public TItem Water;
            public TItem Owner;
            public TItem FactionRank;
            public TItem GlobalVariable;
            public MaskItem<TItem, PathGrid.Mask<TItem>?>? PathGrid { get; set; }
            public MaskItem<TItem, Landscape.Mask<TItem>?>? Landscape { get; set; }
            public TItem Timestamp;
            public TItem PersistentTimestamp;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>? Persistent;
            public TItem TemporaryTimestamp;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>? Temporary;
            public TItem VisibleWhenDistantTimestamp;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, IMask<TItem>?>>?>? VisibleWhenDistant;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Grid, rhs.Grid)) return false;
                if (!object.Equals(this.Lighting, rhs.Lighting)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.MusicType, rhs.MusicType)) return false;
                if (!object.Equals(this.WaterHeight, rhs.WaterHeight)) return false;
                if (!object.Equals(this.Climate, rhs.Climate)) return false;
                if (!object.Equals(this.Water, rhs.Water)) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.GlobalVariable, rhs.GlobalVariable)) return false;
                if (!object.Equals(this.PathGrid, rhs.PathGrid)) return false;
                if (!object.Equals(this.Landscape, rhs.Landscape)) return false;
                if (!object.Equals(this.Timestamp, rhs.Timestamp)) return false;
                if (!object.Equals(this.PersistentTimestamp, rhs.PersistentTimestamp)) return false;
                if (!object.Equals(this.Persistent, rhs.Persistent)) return false;
                if (!object.Equals(this.TemporaryTimestamp, rhs.TemporaryTimestamp)) return false;
                if (!object.Equals(this.Temporary, rhs.Temporary)) return false;
                if (!object.Equals(this.VisibleWhenDistantTimestamp, rhs.VisibleWhenDistantTimestamp)) return false;
                if (!object.Equals(this.VisibleWhenDistant, rhs.VisibleWhenDistant)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.Grid);
                hash.Add(this.Lighting);
                hash.Add(this.Regions);
                hash.Add(this.MusicType);
                hash.Add(this.WaterHeight);
                hash.Add(this.Climate);
                hash.Add(this.Water);
                hash.Add(this.Owner);
                hash.Add(this.FactionRank);
                hash.Add(this.GlobalVariable);
                hash.Add(this.PathGrid);
                hash.Add(this.Landscape);
                hash.Add(this.Timestamp);
                hash.Add(this.PersistentTimestamp);
                hash.Add(this.Persistent);
                hash.Add(this.TemporaryTimestamp);
                hash.Add(this.Temporary);
                hash.Add(this.VisibleWhenDistantTimestamp);
                hash.Add(this.VisibleWhenDistant);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Grid)) return false;
                if (Lighting != null)
                {
                    if (!eval(this.Lighting.Overall)) return false;
                    if (this.Lighting.Specific != null && !this.Lighting.Specific.All(eval)) return false;
                }
                if (this.Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null)
                    {
                        foreach (var item in this.Regions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.MusicType)) return false;
                if (!eval(this.WaterHeight)) return false;
                if (!eval(this.Climate)) return false;
                if (!eval(this.Water)) return false;
                if (!eval(this.Owner)) return false;
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.GlobalVariable)) return false;
                if (PathGrid != null)
                {
                    if (!eval(this.PathGrid.Overall)) return false;
                    if (this.PathGrid.Specific != null && !this.PathGrid.Specific.All(eval)) return false;
                }
                if (Landscape != null)
                {
                    if (!eval(this.Landscape.Overall)) return false;
                    if (this.Landscape.Specific != null && !this.Landscape.Specific.All(eval)) return false;
                }
                if (!eval(this.Timestamp)) return false;
                if (!eval(this.PersistentTimestamp)) return false;
                if (this.Persistent != null)
                {
                    if (!eval(this.Persistent.Overall)) return false;
                    if (this.Persistent.Specific != null)
                    {
                        foreach (var item in this.Persistent.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (!eval(this.TemporaryTimestamp)) return false;
                if (this.Temporary != null)
                {
                    if (!eval(this.Temporary.Overall)) return false;
                    if (this.Temporary.Specific != null)
                    {
                        foreach (var item in this.Temporary.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (!eval(this.VisibleWhenDistantTimestamp)) return false;
                if (this.VisibleWhenDistant != null)
                {
                    if (!eval(this.VisibleWhenDistant.Overall)) return false;
                    if (this.VisibleWhenDistant.Specific != null)
                    {
                        foreach (var item in this.VisibleWhenDistant.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Grid)) return true;
                if (Lighting != null)
                {
                    if (eval(this.Lighting.Overall)) return true;
                    if (this.Lighting.Specific != null && this.Lighting.Specific.Any(eval)) return true;
                }
                if (this.Regions != null)
                {
                    if (eval(this.Regions.Overall)) return true;
                    if (this.Regions.Specific != null)
                    {
                        foreach (var item in this.Regions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.MusicType)) return true;
                if (eval(this.WaterHeight)) return true;
                if (eval(this.Climate)) return true;
                if (eval(this.Water)) return true;
                if (eval(this.Owner)) return true;
                if (eval(this.FactionRank)) return true;
                if (eval(this.GlobalVariable)) return true;
                if (PathGrid != null)
                {
                    if (eval(this.PathGrid.Overall)) return true;
                    if (this.PathGrid.Specific != null && this.PathGrid.Specific.Any(eval)) return true;
                }
                if (Landscape != null)
                {
                    if (eval(this.Landscape.Overall)) return true;
                    if (this.Landscape.Specific != null && this.Landscape.Specific.Any(eval)) return true;
                }
                if (eval(this.Timestamp)) return true;
                if (eval(this.PersistentTimestamp)) return true;
                if (this.Persistent != null)
                {
                    if (eval(this.Persistent.Overall)) return true;
                    if (this.Persistent.Specific != null)
                    {
                        foreach (var item in this.Persistent.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (eval(this.TemporaryTimestamp)) return true;
                if (this.Temporary != null)
                {
                    if (eval(this.Temporary.Overall)) return true;
                    if (this.Temporary.Specific != null)
                    {
                        foreach (var item in this.Temporary.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                if (eval(this.VisibleWhenDistantTimestamp)) return true;
                if (this.VisibleWhenDistant != null)
                {
                    if (eval(this.VisibleWhenDistant.Overall)) return true;
                    if (this.VisibleWhenDistant.Specific != null)
                    {
                        foreach (var item in this.VisibleWhenDistant.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (!(item.Specific?.All(eval) ?? true)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Cell.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.Grid = eval(this.Grid);
                obj.Lighting = this.Lighting == null ? null : new MaskItem<R, CellLighting.Mask<R>?>(eval(this.Lighting.Overall), this.Lighting.Specific?.Translate(eval));
                if (Regions != null)
                {
                    obj.Regions = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Regions.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Regions.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Regions.Specific = l;
                        foreach (var item in Regions.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.MusicType = eval(this.MusicType);
                obj.WaterHeight = eval(this.WaterHeight);
                obj.Climate = eval(this.Climate);
                obj.Water = eval(this.Water);
                obj.Owner = eval(this.Owner);
                obj.FactionRank = eval(this.FactionRank);
                obj.GlobalVariable = eval(this.GlobalVariable);
                obj.PathGrid = this.PathGrid == null ? null : new MaskItem<R, PathGrid.Mask<R>?>(eval(this.PathGrid.Overall), this.PathGrid.Specific?.Translate(eval));
                obj.Landscape = this.Landscape == null ? null : new MaskItem<R, Landscape.Mask<R>?>(eval(this.Landscape.Overall), this.Landscape.Specific?.Translate(eval));
                obj.Timestamp = eval(this.Timestamp);
                obj.PersistentTimestamp = eval(this.PersistentTimestamp);
                if (Persistent != null)
                {
                    obj.Persistent = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>?>(eval(this.Persistent.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (Persistent.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.Persistent.Specific = l;
                        foreach (var item in Persistent.Specific)
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.TemporaryTimestamp = eval(this.TemporaryTimestamp);
                if (Temporary != null)
                {
                    obj.Temporary = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>?>(eval(this.Temporary.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (Temporary.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.Temporary.Specific = l;
                        foreach (var item in Temporary.Specific)
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.VisibleWhenDistantTimestamp = eval(this.VisibleWhenDistantTimestamp);
                if (VisibleWhenDistant != null)
                {
                    obj.VisibleWhenDistant = new MaskItem<R, IEnumerable<MaskItemIndexed<R, IMask<R>?>>?>(eval(this.VisibleWhenDistant.Overall), Enumerable.Empty<MaskItemIndexed<R, IMask<R>?>>());
                    if (VisibleWhenDistant.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, IMask<R>?>>();
                        obj.VisibleWhenDistant.Specific = l;
                        foreach (var item in VisibleWhenDistant.Specific)
                        {
                            MaskItemIndexed<R, IMask<R>?>? mask;
                            throw new NotImplementedException();
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Cell.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Cell.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Cell.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Grid ?? true)
                    {
                        sb.AppendItem(Grid, "Grid");
                    }
                    if (printMask?.Lighting?.Overall ?? true)
                    {
                        Lighting?.Print(sb);
                    }
                    if ((printMask?.Regions?.Overall ?? true)
                        && Regions is {} RegionsItem)
                    {
                        sb.AppendLine("Regions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RegionsItem.Overall);
                            if (RegionsItem.Specific != null)
                            {
                                foreach (var subItem in RegionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.MusicType ?? true)
                    {
                        sb.AppendItem(MusicType, "MusicType");
                    }
                    if (printMask?.WaterHeight ?? true)
                    {
                        sb.AppendItem(WaterHeight, "WaterHeight");
                    }
                    if (printMask?.Climate ?? true)
                    {
                        sb.AppendItem(Climate, "Climate");
                    }
                    if (printMask?.Water ?? true)
                    {
                        sb.AppendItem(Water, "Water");
                    }
                    if (printMask?.Owner ?? true)
                    {
                        sb.AppendItem(Owner, "Owner");
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        sb.AppendItem(FactionRank, "FactionRank");
                    }
                    if (printMask?.GlobalVariable ?? true)
                    {
                        sb.AppendItem(GlobalVariable, "GlobalVariable");
                    }
                    if (printMask?.PathGrid?.Overall ?? true)
                    {
                        PathGrid?.Print(sb);
                    }
                    if (printMask?.Landscape?.Overall ?? true)
                    {
                        Landscape?.Print(sb);
                    }
                    if (printMask?.Timestamp ?? true)
                    {
                        sb.AppendItem(Timestamp, "Timestamp");
                    }
                    if (printMask?.PersistentTimestamp ?? true)
                    {
                        sb.AppendItem(PersistentTimestamp, "PersistentTimestamp");
                    }
                    if ((printMask?.Persistent?.Overall ?? true)
                        && Persistent is {} PersistentItem)
                    {
                        sb.AppendLine("Persistent =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PersistentItem.Overall);
                            if (PersistentItem.Specific != null)
                            {
                                foreach (var subItem in PersistentItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.TemporaryTimestamp ?? true)
                    {
                        sb.AppendItem(TemporaryTimestamp, "TemporaryTimestamp");
                    }
                    if ((printMask?.Temporary?.Overall ?? true)
                        && Temporary is {} TemporaryItem)
                    {
                        sb.AppendLine("Temporary =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TemporaryItem.Overall);
                            if (TemporaryItem.Specific != null)
                            {
                                foreach (var subItem in TemporaryItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.VisibleWhenDistantTimestamp ?? true)
                    {
                        sb.AppendItem(VisibleWhenDistantTimestamp, "VisibleWhenDistantTimestamp");
                    }
                    if ((printMask?.VisibleWhenDistant?.Overall ?? true)
                        && VisibleWhenDistant is {} VisibleWhenDistantItem)
                    {
                        sb.AppendLine("VisibleWhenDistant =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(VisibleWhenDistantItem.Overall);
                            if (VisibleWhenDistantItem.Specific != null)
                            {
                                foreach (var subItem in VisibleWhenDistantItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            OblivionMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Flags;
            public Exception? Grid;
            public MaskItem<Exception?, CellLighting.ErrorMask?>? Lighting;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Regions;
            public Exception? MusicType;
            public Exception? WaterHeight;
            public Exception? Climate;
            public Exception? Water;
            public Exception? Owner;
            public Exception? FactionRank;
            public Exception? GlobalVariable;
            public MaskItem<Exception?, PathGrid.ErrorMask?>? PathGrid;
            public MaskItem<Exception?, Landscape.ErrorMask?>? Landscape;
            public Exception? Timestamp;
            public Exception? PersistentTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? Persistent;
            public Exception? TemporaryTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? Temporary;
            public Exception? VisibleWhenDistantTimestamp;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>? VisibleWhenDistant;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        return Name;
                    case Cell_FieldIndex.Flags:
                        return Flags;
                    case Cell_FieldIndex.Grid:
                        return Grid;
                    case Cell_FieldIndex.Lighting:
                        return Lighting;
                    case Cell_FieldIndex.Regions:
                        return Regions;
                    case Cell_FieldIndex.MusicType:
                        return MusicType;
                    case Cell_FieldIndex.WaterHeight:
                        return WaterHeight;
                    case Cell_FieldIndex.Climate:
                        return Climate;
                    case Cell_FieldIndex.Water:
                        return Water;
                    case Cell_FieldIndex.Owner:
                        return Owner;
                    case Cell_FieldIndex.FactionRank:
                        return FactionRank;
                    case Cell_FieldIndex.GlobalVariable:
                        return GlobalVariable;
                    case Cell_FieldIndex.PathGrid:
                        return PathGrid;
                    case Cell_FieldIndex.Landscape:
                        return Landscape;
                    case Cell_FieldIndex.Timestamp:
                        return Timestamp;
                    case Cell_FieldIndex.PersistentTimestamp:
                        return PersistentTimestamp;
                    case Cell_FieldIndex.Persistent:
                        return Persistent;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        return TemporaryTimestamp;
                    case Cell_FieldIndex.Temporary:
                        return Temporary;
                    case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                        return VisibleWhenDistantTimestamp;
                    case Cell_FieldIndex.VisibleWhenDistant:
                        return VisibleWhenDistant;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Cell_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Cell_FieldIndex.Grid:
                        this.Grid = ex;
                        break;
                    case Cell_FieldIndex.Lighting:
                        this.Lighting = new MaskItem<Exception?, CellLighting.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Cell_FieldIndex.MusicType:
                        this.MusicType = ex;
                        break;
                    case Cell_FieldIndex.WaterHeight:
                        this.WaterHeight = ex;
                        break;
                    case Cell_FieldIndex.Climate:
                        this.Climate = ex;
                        break;
                    case Cell_FieldIndex.Water:
                        this.Water = ex;
                        break;
                    case Cell_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case Cell_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case Cell_FieldIndex.GlobalVariable:
                        this.GlobalVariable = ex;
                        break;
                    case Cell_FieldIndex.PathGrid:
                        this.PathGrid = new MaskItem<Exception?, PathGrid.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Landscape:
                        this.Landscape = new MaskItem<Exception?, Landscape.ErrorMask?>(ex, null);
                        break;
                    case Cell_FieldIndex.Timestamp:
                        this.Timestamp = ex;
                        break;
                    case Cell_FieldIndex.PersistentTimestamp:
                        this.PersistentTimestamp = ex;
                        break;
                    case Cell_FieldIndex.Persistent:
                        this.Persistent = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        this.TemporaryTimestamp = ex;
                        break;
                    case Cell_FieldIndex.Temporary:
                        this.Temporary = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                        this.VisibleWhenDistantTimestamp = ex;
                        break;
                    case Cell_FieldIndex.VisibleWhenDistant:
                        this.VisibleWhenDistant = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Cell_FieldIndex enu = (Cell_FieldIndex)index;
                switch (enu)
                {
                    case Cell_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Grid:
                        this.Grid = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Lighting:
                        this.Lighting = (MaskItem<Exception?, CellLighting.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Cell_FieldIndex.MusicType:
                        this.MusicType = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.WaterHeight:
                        this.WaterHeight = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Climate:
                        this.Climate = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Water:
                        this.Water = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Owner:
                        this.Owner = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.FactionRank:
                        this.FactionRank = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.GlobalVariable:
                        this.GlobalVariable = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.PathGrid:
                        this.PathGrid = (MaskItem<Exception?, PathGrid.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Landscape:
                        this.Landscape = (MaskItem<Exception?, Landscape.ErrorMask?>?)obj;
                        break;
                    case Cell_FieldIndex.Timestamp:
                        this.Timestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.PersistentTimestamp:
                        this.PersistentTimestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Persistent:
                        this.Persistent = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.TemporaryTimestamp:
                        this.TemporaryTimestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.Temporary:
                        this.Temporary = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    case Cell_FieldIndex.VisibleWhenDistantTimestamp:
                        this.VisibleWhenDistantTimestamp = (Exception?)obj;
                        break;
                    case Cell_FieldIndex.VisibleWhenDistant:
                        this.VisibleWhenDistant = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (Grid != null) return true;
                if (Lighting != null) return true;
                if (Regions != null) return true;
                if (MusicType != null) return true;
                if (WaterHeight != null) return true;
                if (Climate != null) return true;
                if (Water != null) return true;
                if (Owner != null) return true;
                if (FactionRank != null) return true;
                if (GlobalVariable != null) return true;
                if (PathGrid != null) return true;
                if (Landscape != null) return true;
                if (Timestamp != null) return true;
                if (PersistentTimestamp != null) return true;
                if (Persistent != null) return true;
                if (TemporaryTimestamp != null) return true;
                if (Temporary != null) return true;
                if (VisibleWhenDistantTimestamp != null) return true;
                if (VisibleWhenDistant != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Grid, "Grid");
                }
                Lighting?.Print(sb);
                if (Regions is {} RegionsItem)
                {
                    sb.AppendLine("Regions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RegionsItem.Overall);
                        if (RegionsItem.Specific != null)
                        {
                            foreach (var subItem in RegionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(MusicType, "MusicType");
                }
                {
                    sb.AppendItem(WaterHeight, "WaterHeight");
                }
                {
                    sb.AppendItem(Climate, "Climate");
                }
                {
                    sb.AppendItem(Water, "Water");
                }
                {
                    sb.AppendItem(Owner, "Owner");
                }
                {
                    sb.AppendItem(FactionRank, "FactionRank");
                }
                {
                    sb.AppendItem(GlobalVariable, "GlobalVariable");
                }
                PathGrid?.Print(sb);
                Landscape?.Print(sb);
                {
                    sb.AppendItem(Timestamp, "Timestamp");
                }
                {
                    sb.AppendItem(PersistentTimestamp, "PersistentTimestamp");
                }
                if (Persistent is {} PersistentItem)
                {
                    sb.AppendLine("Persistent =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PersistentItem.Overall);
                        if (PersistentItem.Specific != null)
                        {
                            foreach (var subItem in PersistentItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(TemporaryTimestamp, "TemporaryTimestamp");
                }
                if (Temporary is {} TemporaryItem)
                {
                    sb.AppendLine("Temporary =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TemporaryItem.Overall);
                        if (TemporaryItem.Specific != null)
                        {
                            foreach (var subItem in TemporaryItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(VisibleWhenDistantTimestamp, "VisibleWhenDistantTimestamp");
                }
                if (VisibleWhenDistant is {} VisibleWhenDistantItem)
                {
                    sb.AppendLine("VisibleWhenDistant =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(VisibleWhenDistantItem.Overall);
                        if (VisibleWhenDistantItem.Specific != null)
                        {
                            foreach (var subItem in VisibleWhenDistantItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Grid = this.Grid.Combine(rhs.Grid);
                ret.Lighting = this.Lighting.Combine(rhs.Lighting, (l, r) => l.Combine(r));
                ret.Regions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Regions?.Overall, rhs.Regions?.Overall), Noggog.ExceptionExt.Combine(this.Regions?.Specific, rhs.Regions?.Specific));
                ret.MusicType = this.MusicType.Combine(rhs.MusicType);
                ret.WaterHeight = this.WaterHeight.Combine(rhs.WaterHeight);
                ret.Climate = this.Climate.Combine(rhs.Climate);
                ret.Water = this.Water.Combine(rhs.Water);
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.GlobalVariable = this.GlobalVariable.Combine(rhs.GlobalVariable);
                ret.PathGrid = this.PathGrid.Combine(rhs.PathGrid, (l, r) => l.Combine(r));
                ret.Landscape = this.Landscape.Combine(rhs.Landscape, (l, r) => l.Combine(r));
                ret.Timestamp = this.Timestamp.Combine(rhs.Timestamp);
                ret.PersistentTimestamp = this.PersistentTimestamp.Combine(rhs.PersistentTimestamp);
                ret.Persistent = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Persistent?.Overall, rhs.Persistent?.Overall), Noggog.ExceptionExt.Combine(this.Persistent?.Specific, rhs.Persistent?.Specific));
                ret.TemporaryTimestamp = this.TemporaryTimestamp.Combine(rhs.TemporaryTimestamp);
                ret.Temporary = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Temporary?.Overall, rhs.Temporary?.Overall), Noggog.ExceptionExt.Combine(this.Temporary?.Specific, rhs.Temporary?.Specific));
                ret.VisibleWhenDistantTimestamp = this.VisibleWhenDistantTimestamp.Combine(rhs.VisibleWhenDistantTimestamp);
                ret.VisibleWhenDistant = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, IErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.VisibleWhenDistant?.Overall, rhs.VisibleWhenDistant?.Overall), Noggog.ExceptionExt.Combine(this.VisibleWhenDistant?.Specific, rhs.VisibleWhenDistant?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            OblivionMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Flags;
            public bool Grid;
            public CellLighting.TranslationMask? Lighting;
            public bool Regions;
            public bool MusicType;
            public bool WaterHeight;
            public bool Climate;
            public bool Water;
            public bool Owner;
            public bool FactionRank;
            public bool GlobalVariable;
            public PathGrid.TranslationMask? PathGrid;
            public Landscape.TranslationMask? Landscape;
            public bool Timestamp;
            public bool PersistentTimestamp;
            public bool Persistent;
            public bool TemporaryTimestamp;
            public bool Temporary;
            public bool VisibleWhenDistantTimestamp;
            public bool VisibleWhenDistant;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Grid = defaultOn;
                this.Regions = defaultOn;
                this.MusicType = defaultOn;
                this.WaterHeight = defaultOn;
                this.Climate = defaultOn;
                this.Water = defaultOn;
                this.Owner = defaultOn;
                this.FactionRank = defaultOn;
                this.GlobalVariable = defaultOn;
                this.Timestamp = defaultOn;
                this.PersistentTimestamp = defaultOn;
                this.Persistent = defaultOn;
                this.TemporaryTimestamp = defaultOn;
                this.Temporary = defaultOn;
                this.VisibleWhenDistantTimestamp = defaultOn;
                this.VisibleWhenDistant = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((Grid, null));
                ret.Add((Lighting != null ? Lighting.OnOverall : DefaultOn, Lighting?.GetCrystal()));
                ret.Add((Regions, null));
                ret.Add((MusicType, null));
                ret.Add((WaterHeight, null));
                ret.Add((Climate, null));
                ret.Add((Water, null));
                ret.Add((Owner, null));
                ret.Add((FactionRank, null));
                ret.Add((GlobalVariable, null));
                ret.Add((PathGrid != null ? PathGrid.OnOverall : DefaultOn, PathGrid?.GetCrystal()));
                ret.Add((Landscape != null ? Landscape.OnOverall : DefaultOn, Landscape?.GetCrystal()));
                ret.Add((Timestamp, null));
                ret.Add((PersistentTimestamp, null));
                ret.Add((Persistent, null));
                ret.Add((TemporaryTimestamp, null));
                ret.Add((Temporary, null));
                ret.Add((VisibleWhenDistantTimestamp, null));
                ret.Add((VisibleWhenDistant, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Cell_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CellCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => CellSetterCommon.Instance.RemapLinks(this, mapping);
        public Cell(FormKey formKey)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Cell(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Cell(IOblivionMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public Cell(IOblivionMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Cell>.ToString(this);
        }

        protected override Type LinkType => typeof(ICell);

        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => CellCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => CellSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => CellSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => CellSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICellGetter rhs) return false;
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICellGetter? obj)
        {
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CellCommon)((ICellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Cell CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Cell();
            ((CellSetterCommon)((ICellGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Cell item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((CellSetterCommon)((ICellGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Cell GetNew()
        {
            return new Cell();
        }

    }
    #endregion

    #region Interface
    public partial interface ICell :
        IAssetLinkContainer,
        ICellGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<ICellInternal>,
        IMajorRecordEnumerable,
        INamed,
        INamedRequired,
        IOblivionMajorRecordInternal
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new Cell.Flag? Flags { get; set; }
        new P2Int? Grid { get; set; }
        new CellLighting? Lighting { get; set; }
        new ExtendedList<IFormLinkGetter<IRegionGetter>>? Regions { get; set; }
        new MusicType? MusicType { get; set; }
        new Single? WaterHeight { get; set; }
        new IFormLinkNullable<IClimateGetter> Climate { get; set; }
        new IFormLinkNullable<IWaterGetter> Water { get; set; }
        new IFormLinkNullable<IFactionGetter> Owner { get; set; }
        new Int32? FactionRank { get; set; }
        new IFormLinkNullable<IGlobalGetter> GlobalVariable { get; set; }
        new PathGrid? PathGrid { get; set; }
        new Landscape? Landscape { get; set; }
        new Int32 Timestamp { get; set; }
        new Int32 PersistentTimestamp { get; set; }
        new ExtendedList<IPlaced> Persistent { get; }
        new Int32 TemporaryTimestamp { get; set; }
        new ExtendedList<IPlaced> Temporary { get; }
        new Int32 VisibleWhenDistantTimestamp { get; set; }
        new ExtendedList<IPlaced> VisibleWhenDistant { get; }
    }

    public partial interface ICellInternal :
        IOblivionMajorRecordInternal,
        ICell,
        ICellGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts.CELL)]
    public partial interface ICellGetter :
        IOblivionMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ICellGetter>,
        IMajorRecordGetterEnumerable,
        IMapsToGetter<ICellGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Cell_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        Cell.Flag? Flags { get; }
        P2Int? Grid { get; }
        ICellLightingGetter? Lighting { get; }
        IReadOnlyList<IFormLinkGetter<IRegionGetter>>? Regions { get; }
        MusicType? MusicType { get; }
        Single? WaterHeight { get; }
        IFormLinkNullableGetter<IClimateGetter> Climate { get; }
        IFormLinkNullableGetter<IWaterGetter> Water { get; }
        IFormLinkNullableGetter<IFactionGetter> Owner { get; }
        Int32? FactionRank { get; }
        IFormLinkNullableGetter<IGlobalGetter> GlobalVariable { get; }
        IPathGridGetter? PathGrid { get; }
        ILandscapeGetter? Landscape { get; }
        Int32 Timestamp { get; }
        Int32 PersistentTimestamp { get; }
        IReadOnlyList<IPlacedGetter> Persistent { get; }
        Int32 TemporaryTimestamp { get; }
        IReadOnlyList<IPlacedGetter> Temporary { get; }
        Int32 VisibleWhenDistantTimestamp { get; }
        IReadOnlyList<IPlacedGetter> VisibleWhenDistant { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class CellMixIn
    {
        public static void Clear(this ICellInternal item)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Cell.Mask<bool> GetEqualsMask(
            this ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ICellGetter item,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ICellGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            ((CellCommon)((ICellGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ICellGetter item,
            ICellGetter rhs,
            Cell.TranslationMask? equalsMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ICellInternal lhs,
            ICellGetter rhs,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ICellInternal lhs,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((CellSetterTranslationCommon)((ICellGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Cell DeepCopy(
            this ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((CellSetterTranslationCommon)((ICellGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this ICellGetter obj)
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this ICellGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this ICellGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((CellCommon)((ICellGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this ICellInternal obj)
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ICellInternal obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this ICellInternal obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            IEnumerable<FormKey> keys)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            IEnumerable<IFormLinkIdentifier> keys)
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            HashSet<FormKey> keys)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ICellInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ICellInternal obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((CellSetterCommon)((ICellGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        public static Cell Duplicate(
            this ICellGetter item,
            FormKey formKey,
            Cell.TranslationMask? copyMask = null)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Cell Duplicate(
            this ICellGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((CellCommon)((ICellGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ICellInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((CellSetterCommon)((ICellGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum Cell_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        OblivionMajorRecordFlags = 4,
        Name = 5,
        Flags = 6,
        Grid = 7,
        Lighting = 8,
        Regions = 9,
        MusicType = 10,
        WaterHeight = 11,
        Climate = 12,
        Water = 13,
        Owner = 14,
        FactionRank = 15,
        GlobalVariable = 16,
        PathGrid = 17,
        Landscape = 18,
        Timestamp = 19,
        PersistentTimestamp = 20,
        Persistent = 21,
        TemporaryTimestamp = 22,
        Temporary = 23,
        VisibleWhenDistantTimestamp = 24,
        VisibleWhenDistant = 25,
    }
    #endregion

    #region Registration
    internal partial class Cell_Registration : ILoquiRegistration
    {
        public static readonly Cell_Registration Instance = new Cell_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 21;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(Cell.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Cell.ErrorMask);

        public static readonly Type ClassType = typeof(Cell);

        public static readonly Type GetterType = typeof(ICellGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ICell);

        public static readonly Type? InternalSetterType = typeof(ICellInternal);

        public const string FullName = "Mutagen.Bethesda.Oblivion.Cell";

        public const string Name = "Cell";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CELL;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CELL);
            var all = RecordCollection.Factory(
                RecordTypes.CELL,
                RecordTypes.FULL,
                RecordTypes.DATA,
                RecordTypes.XCLC,
                RecordTypes.XCLL,
                RecordTypes.XCLR,
                RecordTypes.XCMT,
                RecordTypes.XCLW,
                RecordTypes.XCCM,
                RecordTypes.XCWT,
                RecordTypes.XOWN,
                RecordTypes.XRNK,
                RecordTypes.XGLB,
                RecordTypes.PGRD,
                RecordTypes.LAND,
                RecordTypes.ACRE,
                RecordTypes.ACHR,
                RecordTypes.REFR);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(CellBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class CellSetterCommon : OblivionMajorRecordSetterCommon
    {
        public new static readonly CellSetterCommon Instance = new CellSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ICellInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Flags = default;
            item.Grid = default;
            item.Lighting = null;
            item.Regions = null;
            item.MusicType = default;
            item.WaterHeight = default;
            item.Climate.Clear();
            item.Water.Clear();
            item.Owner.Clear();
            item.FactionRank = default;
            item.GlobalVariable.Clear();
            item.PathGrid = null;
            item.Landscape = null;
            item.Timestamp = default(Int32);
            item.PersistentTimestamp = default(Int32);
            item.Persistent.Clear();
            item.TemporaryTimestamp = default(Int32);
            item.Temporary.Clear();
            item.VisibleWhenDistantTimestamp = default(Int32);
            item.VisibleWhenDistant.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IOblivionMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ICellInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ICell obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Regions?.RemapLinks(mapping);
            obj.Climate.Relink(mapping);
            obj.Water.Relink(mapping);
            obj.Owner.Relink(mapping);
            obj.GlobalVariable.Relink(mapping);
            obj.PathGrid?.RemapLinks(mapping);
            obj.Landscape?.RemapLinks(mapping);
            obj.Persistent.RemapLinks(mapping);
            obj.Temporary.RemapLinks(mapping);
            obj.VisibleWhenDistant.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(ICellInternal obj)
        {
            foreach (var item in CellCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            ICellInternal obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            ICellInternal obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in CellCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            ICellInternal obj,
            HashSet<FormKey> keys)
        {
            if (obj.PathGrid != null && keys.Contains(obj.PathGrid.FormKey))
            {
                obj.PathGrid = null;
            }
            if (obj.Landscape != null && keys.Contains(obj.Landscape.FormKey))
            {
                obj.Landscape = null;
            }
            obj.Persistent.Remove(keys);
            obj.Temporary.Remove(keys);
            obj.VisibleWhenDistant.Remove(keys);
        }
        
        public void Remove(
            ICellInternal obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    {
                        if (obj.PathGrid is {} PathGriditem)
                        {
                            PathGriditem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.Landscape is {} Landscapeitem)
                        {
                            Landscapeitem.Remove(keys, type, throwIfUnknown);
                        }
                    }
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.VisibleWhenDistant.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.VisibleWhenDistant.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.VisibleWhenDistant.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.VisibleWhenDistant.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    obj.Persistent.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.Temporary.RemoveWhere(i => keys.Contains(i.FormKey));
                    obj.VisibleWhenDistant.RemoveWhere(i => keys.Contains(i.FormKey));
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ICell obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Persistent.WhereCastable<IPlacedGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            foreach (var item in obj.Temporary.WhereCastable<IPlacedGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            foreach (var item in obj.VisibleWhenDistant.WhereCastable<IPlacedGetter, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ICell obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Persistent.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.Temporary.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.VisibleWhenDistant.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ICellInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ICellInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: CellBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: CellBinaryCreateTranslation.FillBinaryRecordTypes);
            CellBinaryCreateTranslation.CustomBinaryEndImportPublic(
                frame: frame,
                obj: item);
        }
        
        public override void CopyInFromBinary(
            IOblivionMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Cell)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Cell)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class CellCommon : OblivionMajorRecordCommon
    {
        public new static readonly CellCommon Instance = new CellCommon();

        public Cell.Mask<bool> GetEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Cell.Mask<bool>(false);
            ((CellCommon)((ICellGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ICellGetter item,
            ICellGetter rhs,
            Cell.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Grid = item.Grid.Equals(rhs.Grid);
            ret.Lighting = EqualsMaskHelper.EqualsHelper(
                item.Lighting,
                rhs.Lighting,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Regions = item.Regions.CollectionEqualsHelper(
                rhs.Regions,
                (l, r) => object.Equals(l, r),
                include);
            ret.MusicType = item.MusicType == rhs.MusicType;
            ret.WaterHeight = item.WaterHeight.EqualsWithin(rhs.WaterHeight);
            ret.Climate = item.Climate.Equals(rhs.Climate);
            ret.Water = item.Water.Equals(rhs.Water);
            ret.Owner = item.Owner.Equals(rhs.Owner);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.GlobalVariable = item.GlobalVariable.Equals(rhs.GlobalVariable);
            ret.PathGrid = EqualsMaskHelper.EqualsHelper(
                item.PathGrid,
                rhs.PathGrid,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Landscape = EqualsMaskHelper.EqualsHelper(
                item.Landscape,
                rhs.Landscape,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Timestamp = item.Timestamp == rhs.Timestamp;
            ret.PersistentTimestamp = item.PersistentTimestamp == rhs.PersistentTimestamp;
            ret.Persistent = item.Persistent.CollectionEqualsHelper(
                rhs.Persistent,
                (loqLhs, loqRhs) => (IMask<bool>)loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.TemporaryTimestamp = item.TemporaryTimestamp == rhs.TemporaryTimestamp;
            ret.Temporary = item.Temporary.CollectionEqualsHelper(
                rhs.Temporary,
                (loqLhs, loqRhs) => (IMask<bool>)loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.VisibleWhenDistantTimestamp = item.VisibleWhenDistantTimestamp == rhs.VisibleWhenDistantTimestamp;
            ret.VisibleWhenDistant = item.VisibleWhenDistant.CollectionEqualsHelper(
                rhs.VisibleWhenDistant,
                (loqLhs, loqRhs) => (IMask<bool>)loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ICellGetter item,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ICellGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Cell.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Cell =>");
            }
            else
            {
                sb.AppendLine($"{name} (Cell) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ICellGetter item,
            StructuredStringBuilder sb,
            Cell.Mask<bool>? printMask = null)
        {
            OblivionMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.Grid ?? true)
                && item.Grid is {} GridItem)
            {
                sb.AppendItem(GridItem, "Grid");
            }
            if ((printMask?.Lighting?.Overall ?? true)
                && item.Lighting is {} LightingItem)
            {
                LightingItem?.Print(sb, "Lighting");
            }
            if ((printMask?.Regions?.Overall ?? true)
                && item.Regions is {} RegionsItem)
            {
                sb.AppendLine("Regions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in RegionsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.MusicType ?? true)
                && item.MusicType is {} MusicTypeItem)
            {
                sb.AppendItem(MusicTypeItem, "MusicType");
            }
            if ((printMask?.WaterHeight ?? true)
                && item.WaterHeight is {} WaterHeightItem)
            {
                sb.AppendItem(WaterHeightItem, "WaterHeight");
            }
            if (printMask?.Climate ?? true)
            {
                sb.AppendItem(item.Climate.FormKeyNullable, "Climate");
            }
            if (printMask?.Water ?? true)
            {
                sb.AppendItem(item.Water.FormKeyNullable, "Water");
            }
            if (printMask?.Owner ?? true)
            {
                sb.AppendItem(item.Owner.FormKeyNullable, "Owner");
            }
            if ((printMask?.FactionRank ?? true)
                && item.FactionRank is {} FactionRankItem)
            {
                sb.AppendItem(FactionRankItem, "FactionRank");
            }
            if (printMask?.GlobalVariable ?? true)
            {
                sb.AppendItem(item.GlobalVariable.FormKeyNullable, "GlobalVariable");
            }
            if ((printMask?.PathGrid?.Overall ?? true)
                && item.PathGrid is {} PathGridItem)
            {
                PathGridItem?.Print(sb, "PathGrid");
            }
            if ((printMask?.Landscape?.Overall ?? true)
                && item.Landscape is {} LandscapeItem)
            {
                LandscapeItem?.Print(sb, "Landscape");
            }
            if (printMask?.Timestamp ?? true)
            {
                sb.AppendItem(item.Timestamp, "Timestamp");
            }
            if (printMask?.PersistentTimestamp ?? true)
            {
                sb.AppendItem(item.PersistentTimestamp, "PersistentTimestamp");
            }
            if (printMask?.Persistent?.Overall ?? true)
            {
                sb.AppendLine("Persistent =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Persistent)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.TemporaryTimestamp ?? true)
            {
                sb.AppendItem(item.TemporaryTimestamp, "TemporaryTimestamp");
            }
            if (printMask?.Temporary?.Overall ?? true)
            {
                sb.AppendLine("Temporary =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Temporary)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.VisibleWhenDistantTimestamp ?? true)
            {
                sb.AppendItem(item.VisibleWhenDistantTimestamp, "VisibleWhenDistantTimestamp");
            }
            if (printMask?.VisibleWhenDistant?.Overall ?? true)
            {
                sb.AppendLine("VisibleWhenDistant =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.VisibleWhenDistant)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Cell_FieldIndex ConvertFieldIndex(OblivionMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case OblivionMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.VersionControl:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                case OblivionMajorRecord_FieldIndex.OblivionMajorRecordFlags:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Cell_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Cell_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Cell_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ICellGetter? lhs,
            ICellGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IOblivionMajorRecordGetter)lhs, (IOblivionMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                if (!lhs.Grid.Equals(rhs.Grid)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Lighting, rhs.Lighting, out var lhsLighting, out var rhsLighting, out var isLightingEqual))
                {
                    if (!((CellLightingCommon)((ICellLightingGetter)lhsLighting).CommonInstance()!).Equals(lhsLighting, rhsLighting, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting))) return false;
                }
                else if (!isLightingEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Regions) ?? true))
            {
                if (!lhs.Regions.SequenceEqualNullable(rhs.Regions)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.MusicType) ?? true))
            {
                if (lhs.MusicType != rhs.MusicType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                if (!lhs.WaterHeight.EqualsWithin(rhs.WaterHeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Climate) ?? true))
            {
                if (!lhs.Climate.Equals(rhs.Climate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                if (!lhs.Water.Equals(rhs.Water)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Owner) ?? true))
            {
                if (!lhs.Owner.Equals(rhs.Owner)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.FactionRank) ?? true))
            {
                if (lhs.FactionRank != rhs.FactionRank) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalVariable) ?? true))
            {
                if (!lhs.GlobalVariable.Equals(rhs.GlobalVariable)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.PathGrid) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PathGrid, rhs.PathGrid, out var lhsPathGrid, out var rhsPathGrid, out var isPathGridEqual))
                {
                    if (!((PathGridCommon)((IPathGridGetter)lhsPathGrid).CommonInstance()!).Equals(lhsPathGrid, rhsPathGrid, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid))) return false;
                }
                else if (!isPathGridEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Landscape) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Landscape, rhs.Landscape, out var lhsLandscape, out var rhsLandscape, out var isLandscapeEqual))
                {
                    if (!((LandscapeCommon)((ILandscapeGetter)lhsLandscape).CommonInstance()!).Equals(lhsLandscape, rhsLandscape, equalsMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape))) return false;
                }
                else if (!isLandscapeEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                if (lhs.Timestamp != rhs.Timestamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                if (lhs.PersistentTimestamp != rhs.PersistentTimestamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                if (!lhs.Persistent.SequenceEqualNullable(rhs.Persistent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                if (lhs.TemporaryTimestamp != rhs.TemporaryTimestamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                if (!lhs.Temporary.SequenceEqualNullable(rhs.Temporary)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistantTimestamp) ?? true))
            {
                if (lhs.VisibleWhenDistantTimestamp != rhs.VisibleWhenDistantTimestamp) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistant) ?? true))
            {
                if (!lhs.VisibleWhenDistant.SequenceEqualNullable(rhs.VisibleWhenDistant)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IOblivionMajorRecordGetter? lhs,
            IOblivionMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ICellGetter?)lhs,
                rhs: rhs as ICellGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ICellGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.Grid is {} Griditem)
            {
                hash.Add(Griditem);
            }
            if (item.Lighting is {} Lightingitem)
            {
                hash.Add(Lightingitem);
            }
            hash.Add(item.Regions);
            if (item.MusicType is {} MusicTypeitem)
            {
                hash.Add(MusicTypeitem);
            }
            if (item.WaterHeight is {} WaterHeightitem)
            {
                hash.Add(WaterHeightitem);
            }
            hash.Add(item.Climate);
            hash.Add(item.Water);
            hash.Add(item.Owner);
            if (item.FactionRank is {} FactionRankitem)
            {
                hash.Add(FactionRankitem);
            }
            hash.Add(item.GlobalVariable);
            if (item.PathGrid is {} PathGriditem)
            {
                hash.Add(PathGriditem);
            }
            if (item.Landscape is {} Landscapeitem)
            {
                hash.Add(Landscapeitem);
            }
            hash.Add(item.Timestamp);
            hash.Add(item.PersistentTimestamp);
            hash.Add(item.Persistent);
            hash.Add(item.TemporaryTimestamp);
            hash.Add(item.Temporary);
            hash.Add(item.VisibleWhenDistantTimestamp);
            hash.Add(item.VisibleWhenDistant);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IOblivionMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ICellGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Cell.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ICellGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Regions is {} RegionsItem)
            {
                foreach (var item in RegionsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.Climate, out var ClimateInfo))
            {
                yield return ClimateInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Water, out var WaterInfo))
            {
                yield return WaterInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Owner, out var OwnerInfo))
            {
                yield return OwnerInfo;
            }
            if (FormLinkInformation.TryFactory(obj.GlobalVariable, out var GlobalVariableInfo))
            {
                yield return GlobalVariableInfo;
            }
            if (obj.PathGrid is {} PathGridItems)
            {
                foreach (var item in PathGridItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Landscape is {} LandscapeItems)
            {
                foreach (var item in LandscapeItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Persistent.WhereCastable<IPlacedGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Temporary.WhereCastable<IPlacedGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.VisibleWhenDistant.WhereCastable<IPlacedGetter, IFormLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(ICellGetter obj)
        {
            if ((obj.PathGrid != null))
            {
                if (obj.PathGrid is {} PathGriditem)
                {
                    yield return PathGriditem;
                    foreach (var item in PathGriditem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
            if ((obj.Landscape != null))
            {
                if (obj.Landscape is {} Landscapeitem)
                {
                    yield return Landscapeitem;
                    foreach (var item in Landscapeitem.EnumerateMajorRecords())
                    {
                        yield return item;
                    }
                }
            }
            foreach (var subItem in obj.Persistent)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.Temporary)
            {
                yield return subItem;
            }
            foreach (var subItem in obj.VisibleWhenDistant)
            {
                yield return subItem;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            ICellGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            ICellGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    {
                        if (obj.PathGrid is {} PathGriditem)
                        {
                            yield return PathGriditem;
                            foreach (var item in PathGriditem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.Landscape is {} Landscapeitem)
                        {
                            yield return Landscapeitem;
                            foreach (var item in Landscapeitem.EnumerateMajorRecords(type, throwIfUnknown: false))
                            {
                                yield return item;
                            }
                        }
                    }
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "IPlacedGetter":
                case "IPlaced":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Oblivion, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            ICellGetter obj,
            ILinkCache linkCache,
            ModKey modKey,
            IModContext? parent,
            Func<IOblivionMod, ICellGetter, ICell> getOrAddAsOverride,
            Func<IOblivionMod, ICellGetter, string?, FormKey?, ICell> duplicateInto)
        {
            var curContext = new ModContext<IOblivionMod, IOblivionModGetter, ICell, ICellGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            {
                if (obj.PathGrid is {} CellPathGriditem)
                {
                    yield return new ModContext<IOblivionMod, IOblivionModGetter, IPathGridInternal, IPathGridGetter>(
                        modKey: modKey,
                        record: CellPathGriditem,
                        parent: curContext,
                        getOrAddAsOverride: (m, r) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                            if (baseRec.PathGrid != null) return baseRec.PathGrid;
                            var copy = r.DeepCopy(ModContextExt.PathGridCopyMask);
                            baseRec.PathGrid = copy;
                            return copy;
                        },
                        duplicateInto: (m, r, e, f) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                            var dupRec = r.Duplicate(f ?? m.GetNextFormKey(e), ModContextExt.PathGridCopyMask);
                            baseRec.PathGrid = dupRec;
                            return dupRec;
                        });
                }
            }
            {
                if (obj.Landscape is {} CellLandscapeitem)
                {
                    yield return new ModContext<IOblivionMod, IOblivionModGetter, ILandscapeInternal, ILandscapeGetter>(
                        modKey: modKey,
                        record: CellLandscapeitem,
                        parent: curContext,
                        getOrAddAsOverride: (m, r) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                            if (baseRec.Landscape != null) return baseRec.Landscape;
                            var copy = r.DeepCopy(ModContextExt.LandscapeCopyMask);
                            baseRec.Landscape = copy;
                            return copy;
                        },
                        duplicateInto: (m, r, e, f) =>
                        {
                            var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                            var dupRec = r.Duplicate(f ?? m.GetNextFormKey(e), ModContextExt.LandscapeCopyMask);
                            baseRec.Landscape = dupRec;
                            return dupRec;
                        });
                }
            }
            foreach (var subItem in obj.Persistent)
            {
                yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                        var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                        parent.Persistent.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                        return dup;
                    });
            }
            foreach (var subItem in obj.Temporary)
            {
                yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                        var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                        parent.Temporary.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                        return dup;
                    });
            }
            foreach (var subItem in obj.VisibleWhenDistant)
            {
                yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                    modKey: modKey,
                    record: subItem,
                    parent: curContext,
                    getOrAddAsOverride: (m, r) =>
                    {
                        var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                        var ret = parent.VisibleWhenDistant.FirstOrDefault(x => x.FormKey == r.FormKey);
                        if (ret != null) return ret;
                        ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                        parent.VisibleWhenDistant.Add(ret);
                        return ret;
                    },
                    duplicateInto: (m, r, e, f) =>
                    {
                        var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                        getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).VisibleWhenDistant.Add(dup);
                        return dup;
                    });
            }
        }
        
        public IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            ICellGetter obj,
            ILinkCache linkCache,
            Type type,
            ModKey modKey,
            IModContext? parent,
            bool throwIfUnknown,
            Func<IOblivionMod, ICellGetter, ICell> getOrAddAsOverride,
            Func<IOblivionMod, ICellGetter, string?, FormKey?, ICell> duplicateInto)
        {
            var curContext = new ModContext<IOblivionMod, IOblivionModGetter, ICell, ICellGetter>(
                modKey,
                record: obj,
                getOrAddAsOverride: getOrAddAsOverride,
                duplicateInto: duplicateInto,
                parent: parent);
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                    if (!Cell_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache,
                        modKey: modKey,
                        parent: parent,
                        getOrAddAsOverride: getOrAddAsOverride,
                        duplicateInto: duplicateInto))
                    {
                        yield return item;
                    }
                    yield break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    {
                        if (obj.PathGrid is {} CellPathGriditem)
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPathGridInternal, IPathGridGetter>(
                                modKey: modKey,
                                record: CellPathGriditem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    if (baseRec.PathGrid != null) return baseRec.PathGrid;
                                    var copy = r.DeepCopy(ModContextExt.PathGridCopyMask);
                                    baseRec.PathGrid = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(f ?? m.GetNextFormKey(e), ModContextExt.PathGridCopyMask);
                                    baseRec.PathGrid = dupRec;
                                    return dupRec;
                                });
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    {
                        if (obj.Landscape is {} CellLandscapeitem)
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, ILandscapeInternal, ILandscapeGetter>(
                                modKey: modKey,
                                record: CellLandscapeitem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    if (baseRec.Landscape != null) return baseRec.Landscape;
                                    var copy = r.DeepCopy(ModContextExt.LandscapeCopyMask);
                                    baseRec.Landscape = copy;
                                    return copy;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var baseRec = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var dupRec = r.Duplicate(f ?? m.GetNextFormKey(e), ModContextExt.LandscapeCopyMask);
                                    baseRec.Landscape = dupRec;
                                    return dupRec;
                                });
                        }
                    }
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Persistent.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Temporary.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.VisibleWhenDistant.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.VisibleWhenDistant.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).VisibleWhenDistant.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "IPlacedGetter":
                case "IPlaced":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Persistent.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Temporary.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.VisibleWhenDistant.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.VisibleWhenDistant.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).VisibleWhenDistant.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Persistent.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Temporary.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.VisibleWhenDistant.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.VisibleWhenDistant.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).VisibleWhenDistant.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Persistent.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Temporary.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.VisibleWhenDistant.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.VisibleWhenDistant.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).VisibleWhenDistant.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var subItem in obj.Persistent)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Persistent.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Persistent.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Persistent.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.Temporary)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.Temporary.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.Temporary.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).Temporary.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    foreach (var subItem in obj.VisibleWhenDistant)
                    {
                        if (type.IsAssignableFrom(subItem.GetType()))
                        {
                            yield return new ModContext<IOblivionMod, IOblivionModGetter, IPlaced, IPlacedGetter>(
                                modKey: modKey,
                                record: subItem,
                                parent: curContext,
                                getOrAddAsOverride: (m, r) =>
                                {
                                    var parent = getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey));
                                    var ret = parent.VisibleWhenDistant.FirstOrDefault(x => x.FormKey == r.FormKey);
                                    if (ret != null) return ret;
                                    ret = (IPlaced)((IPlacedGetter)r).DeepCopy();
                                    parent.VisibleWhenDistant.Add(ret);
                                    return ret;
                                },
                                duplicateInto: (m, r, e, f) =>
                                {
                                    var dup = (IPlaced)((IPlacedGetter)r).Duplicate(f ?? m.GetNextFormKey(e));
                                    getOrAddAsOverride(m, linkCache.Resolve<ICellGetter>(obj.FormKey)).VisibleWhenDistant.Add(dup);
                                    return dup;
                                });
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<ICellGetter, IOblivionMod, IOblivionModGetter>(
                        GameCategory.Oblivion,
                        obj,
                        type,
                        linkCache,
                        (lk, t, b) => this.EnumerateMajorRecordContexts(obj, lk, t, modKey, parent, b, getOrAddAsOverride, duplicateInto),
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ICellGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Persistent.WhereCastable<IPlacedGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            foreach (var item in obj.Temporary.WhereCastable<IPlacedGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            foreach (var item in obj.VisibleWhenDistant.WhereCastable<IPlacedGetter, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Cell Duplicate(
            ICellGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Cell(formKey);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override OblivionMajorRecord Duplicate(
            IOblivionMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICellGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ICellGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class CellSetterTranslationCommon : OblivionMajorRecordSetterTranslationCommon
    {
        public new static readonly CellSetterTranslationCommon Instance = new CellSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ICellInternal item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ICell item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IOblivionMajorRecord)item,
                (IOblivionMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Grid) ?? true))
            {
                item.Grid = rhs.Grid;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Lighting) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Lighting);
                try
                {
                    if(rhs.Lighting is {} rhsLighting)
                    {
                        item.Lighting = rhsLighting.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Cell_FieldIndex.Lighting));
                    }
                    else
                    {
                        item.Lighting = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Regions);
                try
                {
                    if ((rhs.Regions != null))
                    {
                        item.Regions = 
                            rhs.Regions
                                .Select(b => (IFormLinkGetter<IRegionGetter>)new FormLink<IRegionGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IRegionGetter>>();
                    }
                    else
                    {
                        item.Regions = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.MusicType) ?? true))
            {
                item.MusicType = rhs.MusicType;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.WaterHeight) ?? true))
            {
                item.WaterHeight = rhs.WaterHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Climate) ?? true))
            {
                item.Climate.SetTo(rhs.Climate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Water) ?? true))
            {
                item.Water.SetTo(rhs.Water.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Owner) ?? true))
            {
                item.Owner.SetTo(rhs.Owner.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.GlobalVariable) ?? true))
            {
                item.GlobalVariable.SetTo(rhs.GlobalVariable.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PathGrid) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.PathGrid);
                try
                {
                    if(rhs.PathGrid is {} rhsPathGrid)
                    {
                        item.PathGrid = (PathGrid)rhsPathGrid.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Cell_FieldIndex.PathGrid),
                            errorMask: errorMask);
                    }
                    else
                    {
                        item.PathGrid = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Landscape) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Landscape);
                try
                {
                    if(rhs.Landscape is {} rhsLandscape)
                    {
                        item.Landscape = (Landscape)rhsLandscape.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Cell_FieldIndex.Landscape),
                            errorMask: errorMask);
                    }
                    else
                    {
                        item.Landscape = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Timestamp) ?? true))
            {
                item.Timestamp = rhs.Timestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.PersistentTimestamp) ?? true))
            {
                item.PersistentTimestamp = rhs.PersistentTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Persistent) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Persistent);
                try
                {
                    item.Persistent.SetTo(
                        rhs.Persistent
                        .Select(r =>
                        {
                            return (r.DeepCopy() as IPlaced)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.TemporaryTimestamp) ?? true))
            {
                item.TemporaryTimestamp = rhs.TemporaryTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.Temporary) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.Temporary);
                try
                {
                    item.Temporary.SetTo(
                        rhs.Temporary
                        .Select(r =>
                        {
                            return (r.DeepCopy() as IPlaced)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistantTimestamp) ?? true))
            {
                item.VisibleWhenDistantTimestamp = rhs.VisibleWhenDistantTimestamp;
            }
            if ((copyMask?.GetShouldTranslate((int)Cell_FieldIndex.VisibleWhenDistant) ?? true))
            {
                errorMask?.PushIndex((int)Cell_FieldIndex.VisibleWhenDistant);
                try
                {
                    item.VisibleWhenDistant.SetTo(
                        rhs.VisibleWhenDistant
                        .Select(r =>
                        {
                            return (r.DeepCopy() as IPlaced)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ICell item,
            ICellGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IOblivionMajorRecordInternal item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IOblivionMajorRecord item,
            IOblivionMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICellInternal)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ICell)item,
                rhs: (ICellGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Cell DeepCopy(
            ICellGetter item,
            Cell.TranslationMask? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ((CellSetterTranslationCommon)((ICellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            out Cell.ErrorMask errorMask,
            Cell.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ((CellSetterTranslationCommon)((ICellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Cell.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Cell DeepCopy(
            ICellGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Cell ret = (Cell)((CellCommon)((ICellGetter)item).CommonInstance()!).GetNew();
            ((CellSetterTranslationCommon)((ICellGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class Cell
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Cell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return CellSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class CellBinaryWriteTranslation :
        OblivionMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly CellBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ICellGetter item,
            MutagenWriter writer)
        {
            OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ICellGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            EnumBinaryTranslation<Cell.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            P2IntBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Grid,
                header: translationParams.ConvertToCustom(RecordTypes.XCLC));
            if (item.Lighting is {} LightingItem)
            {
                ((CellLightingBinaryWriteTranslation)((IBinaryItem)LightingItem).BinaryWriteTranslator).Write(
                    item: LightingItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IRegionGetter>>.Instance.Write(
                writer: writer,
                items: item.Regions,
                recordType: translationParams.ConvertToCustom(RecordTypes.XCLR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IRegionGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            EnumBinaryTranslation<MusicType, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.MusicType,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.XCMT));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.WaterHeight,
                header: translationParams.ConvertToCustom(RecordTypes.XCLW));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Climate,
                header: translationParams.ConvertToCustom(RecordTypes.XCCM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Water,
                header: translationParams.ConvertToCustom(RecordTypes.XCWT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Owner,
                header: translationParams.ConvertToCustom(RecordTypes.XOWN));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FactionRank,
                header: translationParams.ConvertToCustom(RecordTypes.XRNK));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlobalVariable,
                header: translationParams.ConvertToCustom(RecordTypes.XGLB));
        }

        public static partial void CustomBinaryEndExport(
            MutagenWriter writer,
            ICellGetter obj);
        public static void CustomBinaryEndExportInternal(
            MutagenWriter writer,
            ICellGetter obj)
        {
            CustomBinaryEndExport(
                writer: writer,
                obj: obj);
        }
        public void Write(
            MutagenWriter writer,
            ICellGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.CELL,
                writeEmbedded: OblivionMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
            CustomBinaryEndExportInternal(
                writer: writer,
                obj: item);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IOblivionMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ICellGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class CellBinaryCreateTranslation : OblivionMajorRecordBinaryCreateTranslation
    {
        public new static readonly CellBinaryCreateTranslation Instance = new CellBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CELL;
        public static void FillBinaryStructs(
            ICellInternal item,
            MutagenFrame frame)
        {
            OblivionMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ICellInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Cell_FieldIndex.Name;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Cell.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Cell_FieldIndex.Flags;
                }
                case RecordTypeInts.XCLC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Grid = P2IntBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.Grid;
                }
                case RecordTypeInts.XCLL:
                {
                    item.Lighting = Mutagen.Bethesda.Oblivion.CellLighting.CreateFromBinary(frame: frame);
                    return (int)Cell_FieldIndex.Lighting;
                }
                case RecordTypeInts.XCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Regions = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IRegionGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IRegionGetter>>();
                    return (int)Cell_FieldIndex.Regions;
                }
                case RecordTypeInts.XCMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MusicType = EnumBinaryTranslation<MusicType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Cell_FieldIndex.MusicType;
                }
                case RecordTypeInts.XCLW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WaterHeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Cell_FieldIndex.WaterHeight;
                }
                case RecordTypeInts.XCCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Climate.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.Climate;
                }
                case RecordTypeInts.XCWT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Water.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.Water;
                }
                case RecordTypeInts.XOWN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Owner.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return (int)Cell_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XGLB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GlobalVariable.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Cell_FieldIndex.GlobalVariable;
                }
                default:
                    return OblivionMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void CustomBinaryEndImport(
            MutagenFrame frame,
            ICellInternal obj);
        public static void CustomBinaryEndImportPublic(
            MutagenFrame frame,
            ICellInternal obj)
        {
            CustomBinaryEndImport(
                frame: frame,
                obj: obj);
        }
    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class CellBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class CellBinaryOverlay :
        OblivionMajorRecordBinaryOverlay,
        ICellGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Cell_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Cell_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => CellCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => CellSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => CellCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => CellCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => CellBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((CellBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ICell);


        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public Cell.Flag? Flags => _FlagsLocation.HasValue ? (Cell.Flag)HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)[0] : default(Cell.Flag?);
        #endregion
        #region Grid
        private int? _GridLocation;
        public P2Int? Grid => _GridLocation.HasValue ? P2IntBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GridLocation.Value, _package.MetaData.Constants)) : default(P2Int?);
        #endregion
        #region Lighting
        private RangeInt32? _LightingLocation;
        public ICellLightingGetter? Lighting => _LightingLocation.HasValue ? CellLightingBinaryOverlay.CellLightingFactory(_recordData.Slice(_LightingLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IRegionGetter>>? Regions { get; private set; }
        #region MusicType
        private int? _MusicTypeLocation;
        public MusicType? MusicType => _MusicTypeLocation.HasValue ? (MusicType)HeaderTranslation.ExtractSubrecordMemory(_recordData, _MusicTypeLocation!.Value, _package.MetaData.Constants)[0] : default(MusicType?);
        #endregion
        #region WaterHeight
        private int? _WaterHeightLocation;
        public Single? WaterHeight => _WaterHeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WaterHeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Climate
        private int? _ClimateLocation;
        public IFormLinkNullableGetter<IClimateGetter> Climate => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IClimateGetter>(_package, _recordData, _ClimateLocation);
        #endregion
        #region Water
        private int? _WaterLocation;
        public IFormLinkNullableGetter<IWaterGetter> Water => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IWaterGetter>(_package, _recordData, _WaterLocation);
        #endregion
        #region Owner
        private int? _OwnerLocation;
        public IFormLinkNullableGetter<IFactionGetter> Owner => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFactionGetter>(_package, _recordData, _OwnerLocation);
        #endregion
        #region FactionRank
        private int? _FactionRankLocation;
        public Int32? FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FactionRankLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region GlobalVariable
        private int? _GlobalVariableLocation;
        public IFormLinkNullableGetter<IGlobalGetter> GlobalVariable => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _GlobalVariableLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);
        partial void CustomEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected CellBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ICellGetter CellFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            var origStream = stream;
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new CellBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            ret.CustomEnd(
                stream: origStream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ICellGetter CellFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return CellFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Name;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Flags;
                }
                case RecordTypeInts.XCLC:
                {
                    _GridLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Grid;
                }
                case RecordTypeInts.XCLL:
                {
                    _LightingLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Cell_FieldIndex.Lighting;
                }
                case RecordTypeInts.XCLR:
                {
                    this.Regions = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IRegionGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IRegionGetter>(p, s));
                    return (int)Cell_FieldIndex.Regions;
                }
                case RecordTypeInts.XCMT:
                {
                    _MusicTypeLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.MusicType;
                }
                case RecordTypeInts.XCLW:
                {
                    _WaterHeightLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.WaterHeight;
                }
                case RecordTypeInts.XCCM:
                {
                    _ClimateLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Climate;
                }
                case RecordTypeInts.XCWT:
                {
                    _WaterLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Water;
                }
                case RecordTypeInts.XOWN:
                {
                    _OwnerLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    _FactionRankLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XGLB:
                {
                    _GlobalVariableLocation = (stream.Position - offset);
                    return (int)Cell_FieldIndex.GlobalVariable;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            CellMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Cell>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ICellGetter rhs) return false;
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ICellGetter? obj)
        {
            return ((CellCommon)((ICellGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((CellCommon)((ICellGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

