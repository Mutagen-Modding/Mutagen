/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class ClassData :
        IClassData,
        IEquatable<IClassDataGetter>,
        ILoquiObjectSetter<ClassData>
    {
        #region Ctor
        public ClassData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Versioning
        public ClassData.VersioningBreaks Versioning { get; set; } = default(ClassData.VersioningBreaks);
        #endregion
        #region PrimaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValue[] _PrimaryAttributes = new ActorValue[2];
        public ActorValue[] PrimaryAttributes
        {
            get => this._PrimaryAttributes;
            init => this._PrimaryAttributes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<ActorValue> IClassDataGetter.PrimaryAttributes => _PrimaryAttributes;
        #endregion

        #endregion
        #region Specialization
        public Class.SpecializationFlag Specialization { get; set; } = default(Class.SpecializationFlag);
        #endregion
        #region SecondaryAttributes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValue[] _SecondaryAttributes = new ActorValue[7];
        public ActorValue[] SecondaryAttributes
        {
            get => this._SecondaryAttributes;
            init => this._SecondaryAttributes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<ActorValue> IClassDataGetter.SecondaryAttributes => _SecondaryAttributes;
        #endregion

        #endregion
        #region Flags
        public ClassFlag Flags { get; set; } = default(ClassFlag);
        #endregion
        #region ClassServices
        public ClassService ClassServices { get; set; } = default(ClassService);
        #endregion
        #region Training
        public ClassTraining Training { get; set; } = new ClassTraining();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IClassTrainingGetter IClassDataGetter.Training => Training;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ClassDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IClassDataGetter rhs) return false;
            return ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IClassDataGetter? obj)
        {
            return ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Versioning = initialValue;
                this.PrimaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Specialization = initialValue;
                this.SecondaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = initialValue;
                this.ClassServices = initialValue;
                this.Training = new MaskItem<TItem, ClassTraining.Mask<TItem>?>(initialValue, new ClassTraining.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem Versioning,
                TItem PrimaryAttributes,
                TItem Specialization,
                TItem SecondaryAttributes,
                TItem Flags,
                TItem ClassServices,
                TItem Training)
            {
                this.Versioning = Versioning;
                this.PrimaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(PrimaryAttributes, Enumerable.Empty<(int Index, TItem Value)>());
                this.Specialization = Specialization;
                this.SecondaryAttributes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SecondaryAttributes, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = Flags;
                this.ClassServices = ClassServices;
                this.Training = new MaskItem<TItem, ClassTraining.Mask<TItem>?>(Training, new ClassTraining.Mask<TItem>(Training));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Versioning;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? PrimaryAttributes;
            public TItem Specialization;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SecondaryAttributes;
            public TItem Flags;
            public TItem ClassServices;
            public MaskItem<TItem, ClassTraining.Mask<TItem>?>? Training { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Versioning, rhs.Versioning)) return false;
                if (!object.Equals(this.PrimaryAttributes, rhs.PrimaryAttributes)) return false;
                if (!object.Equals(this.Specialization, rhs.Specialization)) return false;
                if (!object.Equals(this.SecondaryAttributes, rhs.SecondaryAttributes)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.ClassServices, rhs.ClassServices)) return false;
                if (!object.Equals(this.Training, rhs.Training)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Versioning);
                hash.Add(this.PrimaryAttributes);
                hash.Add(this.Specialization);
                hash.Add(this.SecondaryAttributes);
                hash.Add(this.Flags);
                hash.Add(this.ClassServices);
                hash.Add(this.Training);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Versioning)) return false;
                if (this.PrimaryAttributes != null)
                {
                    if (!eval(this.PrimaryAttributes.Overall)) return false;
                    if (this.PrimaryAttributes.Specific != null)
                    {
                        foreach (var item in this.PrimaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Specialization)) return false;
                if (this.SecondaryAttributes != null)
                {
                    if (!eval(this.SecondaryAttributes.Overall)) return false;
                    if (this.SecondaryAttributes.Specific != null)
                    {
                        foreach (var item in this.SecondaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.ClassServices)) return false;
                if (Training != null)
                {
                    if (!eval(this.Training.Overall)) return false;
                    if (this.Training.Specific != null && !this.Training.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Versioning)) return true;
                if (this.PrimaryAttributes != null)
                {
                    if (eval(this.PrimaryAttributes.Overall)) return true;
                    if (this.PrimaryAttributes.Specific != null)
                    {
                        foreach (var item in this.PrimaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Specialization)) return true;
                if (this.SecondaryAttributes != null)
                {
                    if (eval(this.SecondaryAttributes.Overall)) return true;
                    if (this.SecondaryAttributes.Specific != null)
                    {
                        foreach (var item in this.SecondaryAttributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.ClassServices)) return true;
                if (Training != null)
                {
                    if (eval(this.Training.Overall)) return true;
                    if (this.Training.Specific != null && this.Training.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ClassData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Versioning = eval(this.Versioning);
                if (PrimaryAttributes != null)
                {
                    obj.PrimaryAttributes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.PrimaryAttributes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (PrimaryAttributes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.PrimaryAttributes.Specific = l;
                        foreach (var item in PrimaryAttributes.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Specialization = eval(this.Specialization);
                if (SecondaryAttributes != null)
                {
                    obj.SecondaryAttributes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SecondaryAttributes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SecondaryAttributes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SecondaryAttributes.Specific = l;
                        foreach (var item in SecondaryAttributes.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.ClassServices = eval(this.ClassServices);
                obj.Training = this.Training == null ? null : new MaskItem<R, ClassTraining.Mask<R>?>(eval(this.Training.Overall), this.Training.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ClassData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ClassData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ClassData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Versioning ?? true)
                    {
                        sb.AppendItem(Versioning, "Versioning");
                    }
                    if ((printMask?.PrimaryAttributes?.Overall ?? true)
                        && PrimaryAttributes is {} PrimaryAttributesItem)
                    {
                        sb.AppendLine("PrimaryAttributes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PrimaryAttributesItem.Overall);
                            if (PrimaryAttributesItem.Specific != null)
                            {
                                foreach (var subItem in PrimaryAttributesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Specialization ?? true)
                    {
                        sb.AppendItem(Specialization, "Specialization");
                    }
                    if ((printMask?.SecondaryAttributes?.Overall ?? true)
                        && SecondaryAttributes is {} SecondaryAttributesItem)
                    {
                        sb.AppendLine("SecondaryAttributes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SecondaryAttributesItem.Overall);
                            if (SecondaryAttributesItem.Specific != null)
                            {
                                foreach (var subItem in SecondaryAttributesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.ClassServices ?? true)
                    {
                        sb.AppendItem(ClassServices, "ClassServices");
                    }
                    if (printMask?.Training?.Overall ?? true)
                    {
                        Training?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Versioning;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? PrimaryAttributes;
            public Exception? Specialization;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SecondaryAttributes;
            public Exception? Flags;
            public Exception? ClassServices;
            public MaskItem<Exception?, ClassTraining.ErrorMask?>? Training;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Versioning:
                        return Versioning;
                    case ClassData_FieldIndex.PrimaryAttributes:
                        return PrimaryAttributes;
                    case ClassData_FieldIndex.Specialization:
                        return Specialization;
                    case ClassData_FieldIndex.SecondaryAttributes:
                        return SecondaryAttributes;
                    case ClassData_FieldIndex.Flags:
                        return Flags;
                    case ClassData_FieldIndex.ClassServices:
                        return ClassServices;
                    case ClassData_FieldIndex.Training:
                        return Training;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Versioning:
                        this.Versioning = ex;
                        break;
                    case ClassData_FieldIndex.PrimaryAttributes:
                        this.PrimaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ClassData_FieldIndex.Specialization:
                        this.Specialization = ex;
                        break;
                    case ClassData_FieldIndex.SecondaryAttributes:
                        this.SecondaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case ClassData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ClassData_FieldIndex.ClassServices:
                        this.ClassServices = ex;
                        break;
                    case ClassData_FieldIndex.Training:
                        this.Training = new MaskItem<Exception?, ClassTraining.ErrorMask?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                ClassData_FieldIndex enu = (ClassData_FieldIndex)index;
                switch (enu)
                {
                    case ClassData_FieldIndex.Versioning:
                        this.Versioning = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.PrimaryAttributes:
                        this.PrimaryAttributes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ClassData_FieldIndex.Specialization:
                        this.Specialization = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.SecondaryAttributes:
                        this.SecondaryAttributes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case ClassData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.ClassServices:
                        this.ClassServices = (Exception?)obj;
                        break;
                    case ClassData_FieldIndex.Training:
                        this.Training = (MaskItem<Exception?, ClassTraining.ErrorMask?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Versioning != null) return true;
                if (PrimaryAttributes != null) return true;
                if (Specialization != null) return true;
                if (SecondaryAttributes != null) return true;
                if (Flags != null) return true;
                if (ClassServices != null) return true;
                if (Training != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Versioning, "Versioning");
                }
                if (PrimaryAttributes is {} PrimaryAttributesItem)
                {
                    sb.AppendLine("PrimaryAttributes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PrimaryAttributesItem.Overall);
                        if (PrimaryAttributesItem.Specific != null)
                        {
                            foreach (var subItem in PrimaryAttributesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Specialization, "Specialization");
                }
                if (SecondaryAttributes is {} SecondaryAttributesItem)
                {
                    sb.AppendLine("SecondaryAttributes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SecondaryAttributesItem.Overall);
                        if (SecondaryAttributesItem.Specific != null)
                        {
                            foreach (var subItem in SecondaryAttributesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(ClassServices, "ClassServices");
                }
                Training?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Versioning = this.Versioning.Combine(rhs.Versioning);
                ret.PrimaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.PrimaryAttributes?.Overall, rhs.PrimaryAttributes?.Overall), Noggog.ExceptionExt.Combine(this.PrimaryAttributes?.Specific, rhs.PrimaryAttributes?.Specific));
                ret.Specialization = this.Specialization.Combine(rhs.Specialization);
                ret.SecondaryAttributes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SecondaryAttributes?.Overall, rhs.SecondaryAttributes?.Overall), Noggog.ExceptionExt.Combine(this.SecondaryAttributes?.Specific, rhs.SecondaryAttributes?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.ClassServices = this.ClassServices.Combine(rhs.ClassServices);
                ret.Training = this.Training.Combine(rhs.Training, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Versioning;
            public bool PrimaryAttributes;
            public bool Specialization;
            public bool SecondaryAttributes;
            public bool Flags;
            public bool ClassServices;
            public ClassTraining.TranslationMask? Training;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Versioning = defaultOn;
                this.PrimaryAttributes = defaultOn;
                this.Specialization = defaultOn;
                this.SecondaryAttributes = defaultOn;
                this.Flags = defaultOn;
                this.ClassServices = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Versioning, null));
                ret.Add((PrimaryAttributes, null));
                ret.Add((Specialization, null));
                ret.Add((SecondaryAttributes, null));
                ret.Add((Flags, null));
                ret.Add((ClassServices, null));
                ret.Add((Training != null ? Training.OnOverall : DefaultOn, Training?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        [Flags]
        public enum VersioningBreaks
        {
            Break0 = 1
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static ClassData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ClassData();
            ((ClassDataSetterCommon)((IClassDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ClassData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ClassDataSetterCommon)((IClassDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static ClassData GetNew()
        {
            return new ClassData();
        }

    }
    #endregion

    #region Interface
    public partial interface IClassData :
        IClassDataGetter,
        ILoquiObjectSetter<IClassData>
    {
        new ClassData.VersioningBreaks Versioning { get; set; }
        new ActorValue[] PrimaryAttributes { get; }
        new Class.SpecializationFlag Specialization { get; set; }
        new ActorValue[] SecondaryAttributes { get; }
        new ClassFlag Flags { get; set; }
        new ClassService ClassServices { get; set; }
        new ClassTraining Training { get; set; }
    }

    public partial interface IClassDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IClassDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => ClassData_Registration.Instance;
        ClassData.VersioningBreaks Versioning { get; }
        ReadOnlyMemorySlice<ActorValue> PrimaryAttributes { get; }
        Class.SpecializationFlag Specialization { get; }
        ReadOnlyMemorySlice<ActorValue> SecondaryAttributes { get; }
        ClassFlag Flags { get; }
        ClassService ClassServices { get; }
        IClassTrainingGetter Training { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClassDataMixIn
    {
        public static void Clear(this IClassData item)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ClassData.Mask<bool> GetEqualsMask(
            this IClassDataGetter item,
            IClassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IClassDataGetter item,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IClassDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IClassDataGetter item,
            IClassDataGetter rhs,
            ClassData.TranslationMask? equalsMask = null)
        {
            return ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            ClassData.TranslationMask? copyMask = null)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClassData lhs,
            IClassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            ClassData.TranslationMask? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ClassData DeepCopy(
            this IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClassDataSetterTranslationCommon)((IClassDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IClassData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ClassDataSetterCommon)((IClassDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum ClassData_FieldIndex
    {
        Versioning = 0,
        PrimaryAttributes = 1,
        Specialization = 2,
        SecondaryAttributes = 3,
        Flags = 4,
        ClassServices = 5,
        Training = 6,
    }
    #endregion

    #region Registration
    internal partial class ClassData_Registration : ILoquiRegistration
    {
        public static readonly ClassData_Registration Instance = new ClassData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(ClassData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ClassData.ErrorMask);

        public static readonly Type ClassType = typeof(ClassData);

        public static readonly Type GetterType = typeof(IClassDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClassData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.ClassData";

        public const string Name = "ClassData";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DATA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.DATA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ClassDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ClassDataSetterCommon
    {
        public static readonly ClassDataSetterCommon Instance = new ClassDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClassData item)
        {
            ClearPartial();
            item.Versioning = default(ClassData.VersioningBreaks);
            item.PrimaryAttributes.Reset();
            item.Specialization = default(Class.SpecializationFlag);
            item.SecondaryAttributes.Reset();
            item.Flags = default(ClassFlag);
            item.ClassServices = default(ClassService);
            item.Training.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IClassData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IClassData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.DATA),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ClassDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class ClassDataCommon
    {
        public static readonly ClassDataCommon Instance = new ClassDataCommon();

        public ClassData.Mask<bool> GetEqualsMask(
            IClassDataGetter item,
            IClassDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ClassData.Mask<bool>(false);
            ((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClassDataGetter item,
            IClassDataGetter rhs,
            ClassData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Versioning = item.Versioning == rhs.Versioning;
            ret.PrimaryAttributes = EqualsMaskHelper.SpanEqualsHelper<ActorValue>(
                item.PrimaryAttributes,
                rhs.PrimaryAttributes,
                (l, r) => l == r,
                include);
            ret.Specialization = item.Specialization == rhs.Specialization;
            ret.SecondaryAttributes = EqualsMaskHelper.SpanEqualsHelper<ActorValue>(
                item.SecondaryAttributes,
                rhs.SecondaryAttributes,
                (l, r) => l == r,
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.ClassServices = item.ClassServices == rhs.ClassServices;
            ret.Training = MaskItemExt.Factory(item.Training.GetEqualsMask(rhs.Training, include), include);
        }
        
        public string Print(
            IClassDataGetter item,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IClassDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ClassData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ClassData =>");
            }
            else
            {
                sb.AppendLine($"{name} (ClassData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IClassDataGetter item,
            StructuredStringBuilder sb,
            ClassData.Mask<bool>? printMask = null)
        {
            if (printMask?.Versioning ?? true)
            {
                sb.AppendItem(item.Versioning, "Versioning");
            }
            if (printMask?.PrimaryAttributes?.Overall ?? true)
            {
                sb.AppendLine("PrimaryAttributes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.PrimaryAttributes)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.Specialization ?? true)
            {
                sb.AppendItem(item.Specialization, "Specialization");
            }
            if (printMask?.SecondaryAttributes?.Overall ?? true)
            {
                sb.AppendLine("SecondaryAttributes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.SecondaryAttributes)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.ClassServices ?? true)
            {
                sb.AppendItem(item.ClassServices, "ClassServices");
            }
            if (printMask?.Training?.Overall ?? true)
            {
                item.Training?.Print(sb, "Training");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClassDataGetter? lhs,
            IClassDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)ClassData_FieldIndex.Versioning) ?? true))
            {
                if (lhs.Versioning != rhs.Versioning) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ClassData_FieldIndex.PrimaryAttributes) ?? true))
            {
                if (!lhs.PrimaryAttributes.SequenceEqualNullable(rhs.PrimaryAttributes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ClassData_FieldIndex.Specialization) ?? true))
            {
                if (lhs.Specialization != rhs.Specialization) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ClassData_FieldIndex.SecondaryAttributes) ?? true))
            {
                if (!lhs.SecondaryAttributes.SequenceEqualNullable(rhs.SecondaryAttributes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ClassData_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ClassData_FieldIndex.ClassServices) ?? true))
            {
                if (lhs.ClassServices != rhs.ClassServices) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ClassData_FieldIndex.Training) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Training, rhs.Training, out var lhsTraining, out var rhsTraining, out var isTrainingEqual))
                {
                    if (!((ClassTrainingCommon)((IClassTrainingGetter)lhsTraining).CommonInstance()!).Equals(lhsTraining, rhsTraining, equalsMask?.GetSubCrystal((int)ClassData_FieldIndex.Training))) return false;
                }
                else if (!isTrainingEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IClassDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Versioning);
            hash.Add(item.PrimaryAttributes);
            hash.Add(item.Specialization);
            hash.Add(item.SecondaryAttributes);
            hash.Add(item.Flags);
            hash.Add(item.ClassServices);
            hash.Add(item.Training);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return ClassData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IClassDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class ClassDataSetterTranslationCommon
    {
        public static readonly ClassDataSetterTranslationCommon Instance = new ClassDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IClassData item,
            IClassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Versioning) ?? true))
            {
                item.Versioning = rhs.Versioning;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.PrimaryAttributes) ?? true))
            {
                rhs.PrimaryAttributes.Span.CopyTo(item.PrimaryAttributes.AsSpan());
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Specialization) ?? true))
            {
                item.Specialization = rhs.Specialization;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.SecondaryAttributes) ?? true))
            {
                rhs.SecondaryAttributes.Span.CopyTo(item.SecondaryAttributes.AsSpan());
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.ClassServices) ?? true))
            {
                item.ClassServices = rhs.ClassServices;
            }
            if (rhs.Versioning.HasFlag(ClassData.VersioningBreaks.Break0)) return;
            if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Training) ?? true))
            {
                errorMask?.PushIndex((int)ClassData_FieldIndex.Training);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ClassData_FieldIndex.Training) ?? true))
                    {
                        item.Training = rhs.Training.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ClassData_FieldIndex.Training),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IClassData item,
            IClassDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            ClassData.TranslationMask? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            out ClassData.ErrorMask errorMask,
            ClassData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ClassData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ClassData DeepCopy(
            IClassDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ClassData ret = (ClassData)((ClassDataCommon)((IClassDataGetter)item).CommonInstance()!).GetNew();
            ((ClassDataSetterTranslationCommon)((IClassDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class ClassData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClassData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ClassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return ClassDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class ClassDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly ClassDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IClassDataGetter item,
            MutagenWriter writer)
        {
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ActorValue>.Instance.Write(
                writer: writer,
                items: item.PrimaryAttributes,
                transl: (MutagenWriter subWriter, ActorValue subItem) =>
                {
                    EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.Write(
                        subWriter,
                        subItem,
                        length: 4);
                });
            EnumBinaryTranslation<Class.SpecializationFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Specialization,
                length: 4);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ActorValue>.Instance.Write(
                writer: writer,
                items: item.SecondaryAttributes,
                transl: (MutagenWriter subWriter, ActorValue subItem) =>
                {
                    EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.Write(
                        subWriter,
                        subItem,
                        length: 4);
                });
            EnumBinaryTranslation<ClassFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            EnumBinaryTranslation<ClassService, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.ClassServices,
                length: 4);
            if (!item.Versioning.HasFlag(ClassData.VersioningBreaks.Break0))
            {
                var TrainingItem = item.Training;
                ((ClassTrainingBinaryWriteTranslation)((IBinaryItem)TrainingItem).BinaryWriteTranslator).Write(
                    item: TrainingItem,
                    writer: writer);
            }
        }

        public void Write(
            MutagenWriter writer,
            IClassDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.DATA),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IClassDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ClassDataBinaryCreateTranslation
    {
        public static readonly ClassDataBinaryCreateTranslation Instance = new ClassDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IClassData item,
            MutagenFrame frame)
        {
            item.PrimaryAttributes.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ActorValue>.Instance.Parse(
                    reader: frame,
                    amount: 2,
                    transl: (MutagenFrame r, [MaybeNullWhen(false)] out ActorValue listSubItem) =>
                    {
                        return EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.Parse(
                            reader: r.SpawnWithLength(4),
                            item: out listSubItem);
                    }));
            item.Specialization = EnumBinaryTranslation<Class.SpecializationFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.SecondaryAttributes.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ActorValue>.Instance.Parse(
                    reader: frame,
                    amount: 7,
                    transl: (MutagenFrame r, [MaybeNullWhen(false)] out ActorValue listSubItem) =>
                    {
                        return EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.Parse(
                            reader: r.SpawnWithLength(4),
                            item: out listSubItem);
                    }));
            item.Flags = EnumBinaryTranslation<ClassFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.ClassServices = EnumBinaryTranslation<ClassService, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            if (frame.Complete)
            {
                item.Versioning |= ClassData.VersioningBreaks.Break0;
                return;
            }
            item.Training = Mutagen.Bethesda.Oblivion.ClassTraining.CreateFromBinary(frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class ClassDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IClassDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClassDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class ClassDataBinaryOverlay :
        PluginBinaryOverlay,
        IClassDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ClassData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => ClassData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => ClassDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => ClassDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IClassDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IClassDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => ClassDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClassDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public ClassData.VersioningBreaks Versioning { get; private set; }
        public ReadOnlyMemorySlice<ActorValue> PrimaryAttributes => BinaryOverlayArrayHelper.EnumSliceFromFixedSize<ActorValue>(_structData.Slice(0x0), amount: 2, enumLength: 4);
        public Class.SpecializationFlag Specialization => (Class.SpecializationFlag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x8, 0x4));
        public ReadOnlyMemorySlice<ActorValue> SecondaryAttributes => BinaryOverlayArrayHelper.EnumSliceFromFixedSize<ActorValue>(_structData.Slice(0xC), amount: 7, enumLength: 4);
        public ClassFlag Flags => (ClassFlag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x28, 0x4));
        public ClassService ClassServices => (ClassService)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x2C, 0x4));
        #region Training
        public IClassTrainingGetter Training => _structData.Length > 0x30 ? ClassTrainingBinaryOverlay.ClassTrainingFactory(_structData.Slice(0x30), _package, default(TypedParseParams)) : new ClassTraining();
        protected int TrainingEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ClassDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IClassDataGetter ClassDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ClassDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            if (ret._structData.Length <= 0x30)
            {
                ret.Versioning |= ClassData.VersioningBreaks.Break0;
            }
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IClassDataGetter ClassDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ClassDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ClassDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IClassDataGetter rhs) return false;
            return ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IClassDataGetter? obj)
        {
            return ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ClassDataCommon)((IClassDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

