/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Oblivion;
using Mutagen.Bethesda.Oblivion.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Parameters;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Cache.Internals;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Masters;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Loqui;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Strings.DI;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Oblivion.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Oblivion.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.IO.Abstractions;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Threading.Tasks;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Oblivion
{
    #region Class
    public partial class OblivionMod :
        IEquatable<IOblivionModGetter>,
        ILoquiObjectSetter<OblivionMod>,
        IOblivionMod
    {
        #region Ctor
        protected OblivionMod()
        {
            _GameSettings_Object = new OblivionGroup<GameSetting>(this);
            _Globals_Object = new OblivionGroup<Global>(this);
            _Classes_Object = new OblivionGroup<Class>(this);
            _Factions_Object = new OblivionGroup<Faction>(this);
            _Hairs_Object = new OblivionGroup<Hair>(this);
            _Eyes_Object = new OblivionGroup<Eye>(this);
            _Races_Object = new OblivionGroup<Race>(this);
            _Sounds_Object = new OblivionGroup<Sound>(this);
            _Skills_Object = new OblivionGroup<SkillRecord>(this);
            _MagicEffects_Object = new OblivionGroup<MagicEffect>(this);
            _Scripts_Object = new OblivionGroup<Script>(this);
            _LandTextures_Object = new OblivionGroup<LandTexture>(this);
            _Enchantments_Object = new OblivionGroup<Enchantment>(this);
            _Spells_Object = new OblivionGroup<Spell>(this);
            _Birthsigns_Object = new OblivionGroup<Birthsign>(this);
            _Activators_Object = new OblivionGroup<Activator>(this);
            _AlchemicalApparatus_Object = new OblivionGroup<AlchemicalApparatus>(this);
            _Armors_Object = new OblivionGroup<Armor>(this);
            _Books_Object = new OblivionGroup<Book>(this);
            _Clothes_Object = new OblivionGroup<Clothing>(this);
            _Containers_Object = new OblivionGroup<Container>(this);
            _Doors_Object = new OblivionGroup<Door>(this);
            _Ingredients_Object = new OblivionGroup<Ingredient>(this);
            _Lights_Object = new OblivionGroup<Light>(this);
            _Miscellaneous_Object = new OblivionGroup<Miscellaneous>(this);
            _Statics_Object = new OblivionGroup<Static>(this);
            _Grasses_Object = new OblivionGroup<Grass>(this);
            _Trees_Object = new OblivionGroup<Tree>(this);
            _Flora_Object = new OblivionGroup<Flora>(this);
            _Furniture_Object = new OblivionGroup<Furniture>(this);
            _Weapons_Object = new OblivionGroup<Weapon>(this);
            _Ammunitions_Object = new OblivionGroup<Ammunition>(this);
            _Npcs_Object = new OblivionGroup<Npc>(this);
            _Creatures_Object = new OblivionGroup<Creature>(this);
            _LeveledCreatures_Object = new OblivionGroup<LeveledCreature>(this);
            _SoulGems_Object = new OblivionGroup<SoulGem>(this);
            _Keys_Object = new OblivionGroup<Key>(this);
            _Potions_Object = new OblivionGroup<Potion>(this);
            _Subspaces_Object = new OblivionGroup<Subspace>(this);
            _SigilStones_Object = new OblivionGroup<SigilStone>(this);
            _LeveledItems_Object = new OblivionGroup<LeveledItem>(this);
            _Weathers_Object = new OblivionGroup<Weather>(this);
            _Climates_Object = new OblivionGroup<Climate>(this);
            _Regions_Object = new OblivionGroup<Region>(this);
            _Worldspaces_Object = new OblivionGroup<Worldspace>(this);
            _DialogTopics_Object = new OblivionGroup<DialogTopic>(this);
            _Quests_Object = new OblivionGroup<Quest>(this);
            _IdleAnimations_Object = new OblivionGroup<IdleAnimation>(this);
            _AIPackages_Object = new OblivionGroup<AIPackage>(this);
            _CombatStyles_Object = new OblivionGroup<CombatStyle>(this);
            _LoadScreens_Object = new OblivionGroup<LoadScreen>(this);
            _LeveledSpells_Object = new OblivionGroup<LeveledSpell>(this);
            _AnimatedObjects_Object = new OblivionGroup<AnimatedObject>(this);
            _Waters_Object = new OblivionGroup<Water>(this);
            _EffectShaders_Object = new OblivionGroup<EffectShader>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly OblivionModHeader _ModHeader_Object = new OblivionModHeader();
        public OblivionModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionModHeaderGetter IOblivionModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<GameSetting> _GameSettings_Object;
        public OblivionGroup<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IGameSettingGetter> IOblivionModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Global> _Globals_Object;
        public OblivionGroup<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IGlobalGetter> IOblivionModGetter.Globals => _Globals_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Class> _Classes_Object;
        public OblivionGroup<Class> Classes => _Classes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IClassGetter> IOblivionModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Faction> _Factions_Object;
        public OblivionGroup<Faction> Factions => _Factions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IFactionGetter> IOblivionModGetter.Factions => _Factions_Object;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Hair> _Hairs_Object;
        public OblivionGroup<Hair> Hairs => _Hairs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IHairGetter> IOblivionModGetter.Hairs => _Hairs_Object;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Eye> _Eyes_Object;
        public OblivionGroup<Eye> Eyes => _Eyes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IEyeGetter> IOblivionModGetter.Eyes => _Eyes_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Race> _Races_Object;
        public OblivionGroup<Race> Races => _Races_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IRaceGetter> IOblivionModGetter.Races => _Races_Object;
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Sound> _Sounds_Object;
        public OblivionGroup<Sound> Sounds => _Sounds_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ISoundGetter> IOblivionModGetter.Sounds => _Sounds_Object;
        #endregion
        #region Skills
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<SkillRecord> _Skills_Object;
        public OblivionGroup<SkillRecord> Skills => _Skills_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ISkillRecordGetter> IOblivionModGetter.Skills => _Skills_Object;
        #endregion
        #region MagicEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<MagicEffect> _MagicEffects_Object;
        public OblivionGroup<MagicEffect> MagicEffects => _MagicEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IMagicEffectGetter> IOblivionModGetter.MagicEffects => _MagicEffects_Object;
        #endregion
        #region Scripts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Script> _Scripts_Object;
        public OblivionGroup<Script> Scripts => _Scripts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IScriptGetter> IOblivionModGetter.Scripts => _Scripts_Object;
        #endregion
        #region LandTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<LandTexture> _LandTextures_Object;
        public OblivionGroup<LandTexture> LandTextures => _LandTextures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ILandTextureGetter> IOblivionModGetter.LandTextures => _LandTextures_Object;
        #endregion
        #region Enchantments
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Enchantment> _Enchantments_Object;
        public OblivionGroup<Enchantment> Enchantments => _Enchantments_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IEnchantmentGetter> IOblivionModGetter.Enchantments => _Enchantments_Object;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Spell> _Spells_Object;
        public OblivionGroup<Spell> Spells => _Spells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ISpellGetter> IOblivionModGetter.Spells => _Spells_Object;
        #endregion
        #region Birthsigns
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Birthsign> _Birthsigns_Object;
        public OblivionGroup<Birthsign> Birthsigns => _Birthsigns_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IBirthsignGetter> IOblivionModGetter.Birthsigns => _Birthsigns_Object;
        #endregion
        #region Activators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Activator> _Activators_Object;
        public OblivionGroup<Activator> Activators => _Activators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IActivatorGetter> IOblivionModGetter.Activators => _Activators_Object;
        #endregion
        #region AlchemicalApparatus
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<AlchemicalApparatus> _AlchemicalApparatus_Object;
        public OblivionGroup<AlchemicalApparatus> AlchemicalApparatus => _AlchemicalApparatus_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IAlchemicalApparatusGetter> IOblivionModGetter.AlchemicalApparatus => _AlchemicalApparatus_Object;
        #endregion
        #region Armors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Armor> _Armors_Object;
        public OblivionGroup<Armor> Armors => _Armors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IArmorGetter> IOblivionModGetter.Armors => _Armors_Object;
        #endregion
        #region Books
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Book> _Books_Object;
        public OblivionGroup<Book> Books => _Books_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IBookGetter> IOblivionModGetter.Books => _Books_Object;
        #endregion
        #region Clothes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Clothing> _Clothes_Object;
        public OblivionGroup<Clothing> Clothes => _Clothes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IClothingGetter> IOblivionModGetter.Clothes => _Clothes_Object;
        #endregion
        #region Containers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Container> _Containers_Object;
        public OblivionGroup<Container> Containers => _Containers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IContainerGetter> IOblivionModGetter.Containers => _Containers_Object;
        #endregion
        #region Doors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Door> _Doors_Object;
        public OblivionGroup<Door> Doors => _Doors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IDoorGetter> IOblivionModGetter.Doors => _Doors_Object;
        #endregion
        #region Ingredients
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Ingredient> _Ingredients_Object;
        public OblivionGroup<Ingredient> Ingredients => _Ingredients_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IIngredientGetter> IOblivionModGetter.Ingredients => _Ingredients_Object;
        #endregion
        #region Lights
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Light> _Lights_Object;
        public OblivionGroup<Light> Lights => _Lights_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ILightGetter> IOblivionModGetter.Lights => _Lights_Object;
        #endregion
        #region Miscellaneous
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Miscellaneous> _Miscellaneous_Object;
        public OblivionGroup<Miscellaneous> Miscellaneous => _Miscellaneous_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IMiscellaneousGetter> IOblivionModGetter.Miscellaneous => _Miscellaneous_Object;
        #endregion
        #region Statics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Static> _Statics_Object;
        public OblivionGroup<Static> Statics => _Statics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IStaticGetter> IOblivionModGetter.Statics => _Statics_Object;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Grass> _Grasses_Object;
        public OblivionGroup<Grass> Grasses => _Grasses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IGrassGetter> IOblivionModGetter.Grasses => _Grasses_Object;
        #endregion
        #region Trees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Tree> _Trees_Object;
        public OblivionGroup<Tree> Trees => _Trees_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ITreeGetter> IOblivionModGetter.Trees => _Trees_Object;
        #endregion
        #region Flora
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Flora> _Flora_Object;
        public OblivionGroup<Flora> Flora => _Flora_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IFloraGetter> IOblivionModGetter.Flora => _Flora_Object;
        #endregion
        #region Furniture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Furniture> _Furniture_Object;
        public OblivionGroup<Furniture> Furniture => _Furniture_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IFurnitureGetter> IOblivionModGetter.Furniture => _Furniture_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Weapon> _Weapons_Object;
        public OblivionGroup<Weapon> Weapons => _Weapons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IWeaponGetter> IOblivionModGetter.Weapons => _Weapons_Object;
        #endregion
        #region Ammunitions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Ammunition> _Ammunitions_Object;
        public OblivionGroup<Ammunition> Ammunitions => _Ammunitions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IAmmunitionGetter> IOblivionModGetter.Ammunitions => _Ammunitions_Object;
        #endregion
        #region Npcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Npc> _Npcs_Object;
        public OblivionGroup<Npc> Npcs => _Npcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<INpcGetter> IOblivionModGetter.Npcs => _Npcs_Object;
        #endregion
        #region Creatures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Creature> _Creatures_Object;
        public OblivionGroup<Creature> Creatures => _Creatures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ICreatureGetter> IOblivionModGetter.Creatures => _Creatures_Object;
        #endregion
        #region LeveledCreatures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<LeveledCreature> _LeveledCreatures_Object;
        public OblivionGroup<LeveledCreature> LeveledCreatures => _LeveledCreatures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ILeveledCreatureGetter> IOblivionModGetter.LeveledCreatures => _LeveledCreatures_Object;
        #endregion
        #region SoulGems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<SoulGem> _SoulGems_Object;
        public OblivionGroup<SoulGem> SoulGems => _SoulGems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ISoulGemGetter> IOblivionModGetter.SoulGems => _SoulGems_Object;
        #endregion
        #region Keys
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Key> _Keys_Object;
        public OblivionGroup<Key> Keys => _Keys_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IKeyGetter> IOblivionModGetter.Keys => _Keys_Object;
        #endregion
        #region Potions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Potion> _Potions_Object;
        public OblivionGroup<Potion> Potions => _Potions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IPotionGetter> IOblivionModGetter.Potions => _Potions_Object;
        #endregion
        #region Subspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Subspace> _Subspaces_Object;
        public OblivionGroup<Subspace> Subspaces => _Subspaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ISubspaceGetter> IOblivionModGetter.Subspaces => _Subspaces_Object;
        #endregion
        #region SigilStones
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<SigilStone> _SigilStones_Object;
        public OblivionGroup<SigilStone> SigilStones => _SigilStones_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ISigilStoneGetter> IOblivionModGetter.SigilStones => _SigilStones_Object;
        #endregion
        #region LeveledItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<LeveledItem> _LeveledItems_Object;
        public OblivionGroup<LeveledItem> LeveledItems => _LeveledItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ILeveledItemGetter> IOblivionModGetter.LeveledItems => _LeveledItems_Object;
        #endregion
        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Weather> _Weathers_Object;
        public OblivionGroup<Weather> Weathers => _Weathers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IWeatherGetter> IOblivionModGetter.Weathers => _Weathers_Object;
        #endregion
        #region Climates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Climate> _Climates_Object;
        public OblivionGroup<Climate> Climates => _Climates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IClimateGetter> IOblivionModGetter.Climates => _Climates_Object;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Region> _Regions_Object;
        public OblivionGroup<Region> Regions => _Regions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IRegionGetter> IOblivionModGetter.Regions => _Regions_Object;
        #endregion
        #region Cells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly OblivionListGroup<CellBlock> _Cells_Object = new OblivionListGroup<CellBlock>();
        public OblivionListGroup<CellBlock> Cells => _Cells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionListGroupGetter<ICellBlockGetter> IOblivionModGetter.Cells => _Cells_Object;
        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Worldspace> _Worldspaces_Object;
        public OblivionGroup<Worldspace> Worldspaces => _Worldspaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IWorldspaceGetter> IOblivionModGetter.Worldspaces => _Worldspaces_Object;
        #endregion
        #region DialogTopics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<DialogTopic> _DialogTopics_Object;
        public OblivionGroup<DialogTopic> DialogTopics => _DialogTopics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IDialogTopicGetter> IOblivionModGetter.DialogTopics => _DialogTopics_Object;
        #endregion
        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Quest> _Quests_Object;
        public OblivionGroup<Quest> Quests => _Quests_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IQuestGetter> IOblivionModGetter.Quests => _Quests_Object;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<IdleAnimation> _IdleAnimations_Object;
        public OblivionGroup<IdleAnimation> IdleAnimations => _IdleAnimations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IIdleAnimationGetter> IOblivionModGetter.IdleAnimations => _IdleAnimations_Object;
        #endregion
        #region AIPackages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<AIPackage> _AIPackages_Object;
        public OblivionGroup<AIPackage> AIPackages => _AIPackages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IAIPackageGetter> IOblivionModGetter.AIPackages => _AIPackages_Object;
        #endregion
        #region CombatStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<CombatStyle> _CombatStyles_Object;
        public OblivionGroup<CombatStyle> CombatStyles => _CombatStyles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ICombatStyleGetter> IOblivionModGetter.CombatStyles => _CombatStyles_Object;
        #endregion
        #region LoadScreens
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<LoadScreen> _LoadScreens_Object;
        public OblivionGroup<LoadScreen> LoadScreens => _LoadScreens_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ILoadScreenGetter> IOblivionModGetter.LoadScreens => _LoadScreens_Object;
        #endregion
        #region LeveledSpells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<LeveledSpell> _LeveledSpells_Object;
        public OblivionGroup<LeveledSpell> LeveledSpells => _LeveledSpells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<ILeveledSpellGetter> IOblivionModGetter.LeveledSpells => _LeveledSpells_Object;
        #endregion
        #region AnimatedObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<AnimatedObject> _AnimatedObjects_Object;
        public OblivionGroup<AnimatedObject> AnimatedObjects => _AnimatedObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IAnimatedObjectGetter> IOblivionModGetter.AnimatedObjects => _AnimatedObjects_Object;
        #endregion
        #region Waters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<Water> _Waters_Object;
        public OblivionGroup<Water> Waters => _Waters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IWaterGetter> IOblivionModGetter.Waters => _Waters_Object;
        #endregion
        #region EffectShaders
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OblivionGroup<EffectShader> _EffectShaders_Object;
        public OblivionGroup<EffectShader> EffectShaders => _EffectShaders_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IOblivionGroupGetter<IEffectShaderGetter> IOblivionModGetter.EffectShaders => _EffectShaders_Object;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            OblivionModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IOblivionModGetter rhs) return false;
            return ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IOblivionModGetter? obj)
        {
            return ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, OblivionModHeader.Mask<TItem>?>(initialValue, new OblivionModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Globals = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Classes = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Hairs = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Eyes = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Races = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Sounds = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Skills = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.MagicEffects = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Scripts = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.LandTextures = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Enchantments = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Spells = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Birthsigns = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Activators = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.AlchemicalApparatus = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Armors = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Books = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Clothes = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Containers = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Doors = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Ingredients = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Lights = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Miscellaneous = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Statics = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Grasses = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Trees = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Flora = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Furniture = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Weapons = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Ammunitions = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Npcs = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Creatures = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.LeveledCreatures = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.SoulGems = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Keys = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Potions = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Subspaces = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.SigilStones = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.LeveledItems = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Weathers = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Climates = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Regions = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Cells = new MaskItem<TItem, OblivionListGroup.Mask<TItem>?>(initialValue, new OblivionListGroup.Mask<TItem>(initialValue));
                this.Worldspaces = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.DialogTopics = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Quests = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.IdleAnimations = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.AIPackages = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.CombatStyles = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.LoadScreens = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.LeveledSpells = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.AnimatedObjects = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.Waters = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
                this.EffectShaders = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(initialValue, new OblivionGroup.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem Globals,
                TItem Classes,
                TItem Factions,
                TItem Hairs,
                TItem Eyes,
                TItem Races,
                TItem Sounds,
                TItem Skills,
                TItem MagicEffects,
                TItem Scripts,
                TItem LandTextures,
                TItem Enchantments,
                TItem Spells,
                TItem Birthsigns,
                TItem Activators,
                TItem AlchemicalApparatus,
                TItem Armors,
                TItem Books,
                TItem Clothes,
                TItem Containers,
                TItem Doors,
                TItem Ingredients,
                TItem Lights,
                TItem Miscellaneous,
                TItem Statics,
                TItem Grasses,
                TItem Trees,
                TItem Flora,
                TItem Furniture,
                TItem Weapons,
                TItem Ammunitions,
                TItem Npcs,
                TItem Creatures,
                TItem LeveledCreatures,
                TItem SoulGems,
                TItem Keys,
                TItem Potions,
                TItem Subspaces,
                TItem SigilStones,
                TItem LeveledItems,
                TItem Weathers,
                TItem Climates,
                TItem Regions,
                TItem Cells,
                TItem Worldspaces,
                TItem DialogTopics,
                TItem Quests,
                TItem IdleAnimations,
                TItem AIPackages,
                TItem CombatStyles,
                TItem LoadScreens,
                TItem LeveledSpells,
                TItem AnimatedObjects,
                TItem Waters,
                TItem EffectShaders)
            {
                this.ModHeader = new MaskItem<TItem, OblivionModHeader.Mask<TItem>?>(ModHeader, new OblivionModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(GameSettings, new OblivionGroup.Mask<TItem>(GameSettings));
                this.Globals = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Globals, new OblivionGroup.Mask<TItem>(Globals));
                this.Classes = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Classes, new OblivionGroup.Mask<TItem>(Classes));
                this.Factions = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Factions, new OblivionGroup.Mask<TItem>(Factions));
                this.Hairs = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Hairs, new OblivionGroup.Mask<TItem>(Hairs));
                this.Eyes = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Eyes, new OblivionGroup.Mask<TItem>(Eyes));
                this.Races = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Races, new OblivionGroup.Mask<TItem>(Races));
                this.Sounds = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Sounds, new OblivionGroup.Mask<TItem>(Sounds));
                this.Skills = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Skills, new OblivionGroup.Mask<TItem>(Skills));
                this.MagicEffects = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(MagicEffects, new OblivionGroup.Mask<TItem>(MagicEffects));
                this.Scripts = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Scripts, new OblivionGroup.Mask<TItem>(Scripts));
                this.LandTextures = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(LandTextures, new OblivionGroup.Mask<TItem>(LandTextures));
                this.Enchantments = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Enchantments, new OblivionGroup.Mask<TItem>(Enchantments));
                this.Spells = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Spells, new OblivionGroup.Mask<TItem>(Spells));
                this.Birthsigns = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Birthsigns, new OblivionGroup.Mask<TItem>(Birthsigns));
                this.Activators = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Activators, new OblivionGroup.Mask<TItem>(Activators));
                this.AlchemicalApparatus = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(AlchemicalApparatus, new OblivionGroup.Mask<TItem>(AlchemicalApparatus));
                this.Armors = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Armors, new OblivionGroup.Mask<TItem>(Armors));
                this.Books = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Books, new OblivionGroup.Mask<TItem>(Books));
                this.Clothes = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Clothes, new OblivionGroup.Mask<TItem>(Clothes));
                this.Containers = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Containers, new OblivionGroup.Mask<TItem>(Containers));
                this.Doors = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Doors, new OblivionGroup.Mask<TItem>(Doors));
                this.Ingredients = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Ingredients, new OblivionGroup.Mask<TItem>(Ingredients));
                this.Lights = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Lights, new OblivionGroup.Mask<TItem>(Lights));
                this.Miscellaneous = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Miscellaneous, new OblivionGroup.Mask<TItem>(Miscellaneous));
                this.Statics = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Statics, new OblivionGroup.Mask<TItem>(Statics));
                this.Grasses = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Grasses, new OblivionGroup.Mask<TItem>(Grasses));
                this.Trees = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Trees, new OblivionGroup.Mask<TItem>(Trees));
                this.Flora = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Flora, new OblivionGroup.Mask<TItem>(Flora));
                this.Furniture = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Furniture, new OblivionGroup.Mask<TItem>(Furniture));
                this.Weapons = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Weapons, new OblivionGroup.Mask<TItem>(Weapons));
                this.Ammunitions = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Ammunitions, new OblivionGroup.Mask<TItem>(Ammunitions));
                this.Npcs = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Npcs, new OblivionGroup.Mask<TItem>(Npcs));
                this.Creatures = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Creatures, new OblivionGroup.Mask<TItem>(Creatures));
                this.LeveledCreatures = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(LeveledCreatures, new OblivionGroup.Mask<TItem>(LeveledCreatures));
                this.SoulGems = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(SoulGems, new OblivionGroup.Mask<TItem>(SoulGems));
                this.Keys = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Keys, new OblivionGroup.Mask<TItem>(Keys));
                this.Potions = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Potions, new OblivionGroup.Mask<TItem>(Potions));
                this.Subspaces = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Subspaces, new OblivionGroup.Mask<TItem>(Subspaces));
                this.SigilStones = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(SigilStones, new OblivionGroup.Mask<TItem>(SigilStones));
                this.LeveledItems = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(LeveledItems, new OblivionGroup.Mask<TItem>(LeveledItems));
                this.Weathers = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Weathers, new OblivionGroup.Mask<TItem>(Weathers));
                this.Climates = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Climates, new OblivionGroup.Mask<TItem>(Climates));
                this.Regions = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Regions, new OblivionGroup.Mask<TItem>(Regions));
                this.Cells = new MaskItem<TItem, OblivionListGroup.Mask<TItem>?>(Cells, new OblivionListGroup.Mask<TItem>(Cells));
                this.Worldspaces = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Worldspaces, new OblivionGroup.Mask<TItem>(Worldspaces));
                this.DialogTopics = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(DialogTopics, new OblivionGroup.Mask<TItem>(DialogTopics));
                this.Quests = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Quests, new OblivionGroup.Mask<TItem>(Quests));
                this.IdleAnimations = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(IdleAnimations, new OblivionGroup.Mask<TItem>(IdleAnimations));
                this.AIPackages = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(AIPackages, new OblivionGroup.Mask<TItem>(AIPackages));
                this.CombatStyles = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(CombatStyles, new OblivionGroup.Mask<TItem>(CombatStyles));
                this.LoadScreens = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(LoadScreens, new OblivionGroup.Mask<TItem>(LoadScreens));
                this.LeveledSpells = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(LeveledSpells, new OblivionGroup.Mask<TItem>(LeveledSpells));
                this.AnimatedObjects = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(AnimatedObjects, new OblivionGroup.Mask<TItem>(AnimatedObjects));
                this.Waters = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(Waters, new OblivionGroup.Mask<TItem>(Waters));
                this.EffectShaders = new MaskItem<TItem, OblivionGroup.Mask<TItem>?>(EffectShaders, new OblivionGroup.Mask<TItem>(EffectShaders));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, OblivionModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Globals { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Classes { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Factions { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Hairs { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Eyes { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Races { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Sounds { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Skills { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? MagicEffects { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Scripts { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? LandTextures { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Enchantments { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Spells { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Birthsigns { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Activators { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? AlchemicalApparatus { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Armors { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Books { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Clothes { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Containers { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Doors { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Ingredients { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Lights { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Miscellaneous { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Statics { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Grasses { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Trees { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Flora { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Furniture { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Weapons { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Ammunitions { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Npcs { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Creatures { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? LeveledCreatures { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? SoulGems { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Keys { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Potions { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Subspaces { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? SigilStones { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? LeveledItems { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Weathers { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Climates { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Regions { get; set; }
            public MaskItem<TItem, OblivionListGroup.Mask<TItem>?>? Cells { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Worldspaces { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? DialogTopics { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Quests { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? IdleAnimations { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? AIPackages { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? CombatStyles { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? LoadScreens { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? LeveledSpells { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? AnimatedObjects { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? Waters { get; set; }
            public MaskItem<TItem, OblivionGroup.Mask<TItem>?>? EffectShaders { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.Globals, rhs.Globals)) return false;
                if (!object.Equals(this.Classes, rhs.Classes)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.Races, rhs.Races)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                if (!object.Equals(this.Skills, rhs.Skills)) return false;
                if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
                if (!object.Equals(this.Scripts, rhs.Scripts)) return false;
                if (!object.Equals(this.LandTextures, rhs.LandTextures)) return false;
                if (!object.Equals(this.Enchantments, rhs.Enchantments)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Birthsigns, rhs.Birthsigns)) return false;
                if (!object.Equals(this.Activators, rhs.Activators)) return false;
                if (!object.Equals(this.AlchemicalApparatus, rhs.AlchemicalApparatus)) return false;
                if (!object.Equals(this.Armors, rhs.Armors)) return false;
                if (!object.Equals(this.Books, rhs.Books)) return false;
                if (!object.Equals(this.Clothes, rhs.Clothes)) return false;
                if (!object.Equals(this.Containers, rhs.Containers)) return false;
                if (!object.Equals(this.Doors, rhs.Doors)) return false;
                if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
                if (!object.Equals(this.Lights, rhs.Lights)) return false;
                if (!object.Equals(this.Miscellaneous, rhs.Miscellaneous)) return false;
                if (!object.Equals(this.Statics, rhs.Statics)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Trees, rhs.Trees)) return false;
                if (!object.Equals(this.Flora, rhs.Flora)) return false;
                if (!object.Equals(this.Furniture, rhs.Furniture)) return false;
                if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
                if (!object.Equals(this.Ammunitions, rhs.Ammunitions)) return false;
                if (!object.Equals(this.Npcs, rhs.Npcs)) return false;
                if (!object.Equals(this.Creatures, rhs.Creatures)) return false;
                if (!object.Equals(this.LeveledCreatures, rhs.LeveledCreatures)) return false;
                if (!object.Equals(this.SoulGems, rhs.SoulGems)) return false;
                if (!object.Equals(this.Keys, rhs.Keys)) return false;
                if (!object.Equals(this.Potions, rhs.Potions)) return false;
                if (!object.Equals(this.Subspaces, rhs.Subspaces)) return false;
                if (!object.Equals(this.SigilStones, rhs.SigilStones)) return false;
                if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
                if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
                if (!object.Equals(this.Climates, rhs.Climates)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.Cells, rhs.Cells)) return false;
                if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
                if (!object.Equals(this.DialogTopics, rhs.DialogTopics)) return false;
                if (!object.Equals(this.Quests, rhs.Quests)) return false;
                if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
                if (!object.Equals(this.AIPackages, rhs.AIPackages)) return false;
                if (!object.Equals(this.CombatStyles, rhs.CombatStyles)) return false;
                if (!object.Equals(this.LoadScreens, rhs.LoadScreens)) return false;
                if (!object.Equals(this.LeveledSpells, rhs.LeveledSpells)) return false;
                if (!object.Equals(this.AnimatedObjects, rhs.AnimatedObjects)) return false;
                if (!object.Equals(this.Waters, rhs.Waters)) return false;
                if (!object.Equals(this.EffectShaders, rhs.EffectShaders)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.Globals);
                hash.Add(this.Classes);
                hash.Add(this.Factions);
                hash.Add(this.Hairs);
                hash.Add(this.Eyes);
                hash.Add(this.Races);
                hash.Add(this.Sounds);
                hash.Add(this.Skills);
                hash.Add(this.MagicEffects);
                hash.Add(this.Scripts);
                hash.Add(this.LandTextures);
                hash.Add(this.Enchantments);
                hash.Add(this.Spells);
                hash.Add(this.Birthsigns);
                hash.Add(this.Activators);
                hash.Add(this.AlchemicalApparatus);
                hash.Add(this.Armors);
                hash.Add(this.Books);
                hash.Add(this.Clothes);
                hash.Add(this.Containers);
                hash.Add(this.Doors);
                hash.Add(this.Ingredients);
                hash.Add(this.Lights);
                hash.Add(this.Miscellaneous);
                hash.Add(this.Statics);
                hash.Add(this.Grasses);
                hash.Add(this.Trees);
                hash.Add(this.Flora);
                hash.Add(this.Furniture);
                hash.Add(this.Weapons);
                hash.Add(this.Ammunitions);
                hash.Add(this.Npcs);
                hash.Add(this.Creatures);
                hash.Add(this.LeveledCreatures);
                hash.Add(this.SoulGems);
                hash.Add(this.Keys);
                hash.Add(this.Potions);
                hash.Add(this.Subspaces);
                hash.Add(this.SigilStones);
                hash.Add(this.LeveledItems);
                hash.Add(this.Weathers);
                hash.Add(this.Climates);
                hash.Add(this.Regions);
                hash.Add(this.Cells);
                hash.Add(this.Worldspaces);
                hash.Add(this.DialogTopics);
                hash.Add(this.Quests);
                hash.Add(this.IdleAnimations);
                hash.Add(this.AIPackages);
                hash.Add(this.CombatStyles);
                hash.Add(this.LoadScreens);
                hash.Add(this.LeveledSpells);
                hash.Add(this.AnimatedObjects);
                hash.Add(this.Waters);
                hash.Add(this.EffectShaders);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (Globals != null)
                {
                    if (!eval(this.Globals.Overall)) return false;
                    if (this.Globals.Specific != null && !this.Globals.Specific.All(eval)) return false;
                }
                if (Classes != null)
                {
                    if (!eval(this.Classes.Overall)) return false;
                    if (this.Classes.Specific != null && !this.Classes.Specific.All(eval)) return false;
                }
                if (Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null && !this.Factions.Specific.All(eval)) return false;
                }
                if (Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null && !this.Hairs.Specific.All(eval)) return false;
                }
                if (Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null && !this.Eyes.Specific.All(eval)) return false;
                }
                if (Races != null)
                {
                    if (!eval(this.Races.Overall)) return false;
                    if (this.Races.Specific != null && !this.Races.Specific.All(eval)) return false;
                }
                if (Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null && !this.Sounds.Specific.All(eval)) return false;
                }
                if (Skills != null)
                {
                    if (!eval(this.Skills.Overall)) return false;
                    if (this.Skills.Specific != null && !this.Skills.Specific.All(eval)) return false;
                }
                if (MagicEffects != null)
                {
                    if (!eval(this.MagicEffects.Overall)) return false;
                    if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.All(eval)) return false;
                }
                if (Scripts != null)
                {
                    if (!eval(this.Scripts.Overall)) return false;
                    if (this.Scripts.Specific != null && !this.Scripts.Specific.All(eval)) return false;
                }
                if (LandTextures != null)
                {
                    if (!eval(this.LandTextures.Overall)) return false;
                    if (this.LandTextures.Specific != null && !this.LandTextures.Specific.All(eval)) return false;
                }
                if (Enchantments != null)
                {
                    if (!eval(this.Enchantments.Overall)) return false;
                    if (this.Enchantments.Specific != null && !this.Enchantments.Specific.All(eval)) return false;
                }
                if (Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null && !this.Spells.Specific.All(eval)) return false;
                }
                if (Birthsigns != null)
                {
                    if (!eval(this.Birthsigns.Overall)) return false;
                    if (this.Birthsigns.Specific != null && !this.Birthsigns.Specific.All(eval)) return false;
                }
                if (Activators != null)
                {
                    if (!eval(this.Activators.Overall)) return false;
                    if (this.Activators.Specific != null && !this.Activators.Specific.All(eval)) return false;
                }
                if (AlchemicalApparatus != null)
                {
                    if (!eval(this.AlchemicalApparatus.Overall)) return false;
                    if (this.AlchemicalApparatus.Specific != null && !this.AlchemicalApparatus.Specific.All(eval)) return false;
                }
                if (Armors != null)
                {
                    if (!eval(this.Armors.Overall)) return false;
                    if (this.Armors.Specific != null && !this.Armors.Specific.All(eval)) return false;
                }
                if (Books != null)
                {
                    if (!eval(this.Books.Overall)) return false;
                    if (this.Books.Specific != null && !this.Books.Specific.All(eval)) return false;
                }
                if (Clothes != null)
                {
                    if (!eval(this.Clothes.Overall)) return false;
                    if (this.Clothes.Specific != null && !this.Clothes.Specific.All(eval)) return false;
                }
                if (Containers != null)
                {
                    if (!eval(this.Containers.Overall)) return false;
                    if (this.Containers.Specific != null && !this.Containers.Specific.All(eval)) return false;
                }
                if (Doors != null)
                {
                    if (!eval(this.Doors.Overall)) return false;
                    if (this.Doors.Specific != null && !this.Doors.Specific.All(eval)) return false;
                }
                if (Ingredients != null)
                {
                    if (!eval(this.Ingredients.Overall)) return false;
                    if (this.Ingredients.Specific != null && !this.Ingredients.Specific.All(eval)) return false;
                }
                if (Lights != null)
                {
                    if (!eval(this.Lights.Overall)) return false;
                    if (this.Lights.Specific != null && !this.Lights.Specific.All(eval)) return false;
                }
                if (Miscellaneous != null)
                {
                    if (!eval(this.Miscellaneous.Overall)) return false;
                    if (this.Miscellaneous.Specific != null && !this.Miscellaneous.Specific.All(eval)) return false;
                }
                if (Statics != null)
                {
                    if (!eval(this.Statics.Overall)) return false;
                    if (this.Statics.Specific != null && !this.Statics.Specific.All(eval)) return false;
                }
                if (Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null && !this.Grasses.Specific.All(eval)) return false;
                }
                if (Trees != null)
                {
                    if (!eval(this.Trees.Overall)) return false;
                    if (this.Trees.Specific != null && !this.Trees.Specific.All(eval)) return false;
                }
                if (Flora != null)
                {
                    if (!eval(this.Flora.Overall)) return false;
                    if (this.Flora.Specific != null && !this.Flora.Specific.All(eval)) return false;
                }
                if (Furniture != null)
                {
                    if (!eval(this.Furniture.Overall)) return false;
                    if (this.Furniture.Specific != null && !this.Furniture.Specific.All(eval)) return false;
                }
                if (Weapons != null)
                {
                    if (!eval(this.Weapons.Overall)) return false;
                    if (this.Weapons.Specific != null && !this.Weapons.Specific.All(eval)) return false;
                }
                if (Ammunitions != null)
                {
                    if (!eval(this.Ammunitions.Overall)) return false;
                    if (this.Ammunitions.Specific != null && !this.Ammunitions.Specific.All(eval)) return false;
                }
                if (Npcs != null)
                {
                    if (!eval(this.Npcs.Overall)) return false;
                    if (this.Npcs.Specific != null && !this.Npcs.Specific.All(eval)) return false;
                }
                if (Creatures != null)
                {
                    if (!eval(this.Creatures.Overall)) return false;
                    if (this.Creatures.Specific != null && !this.Creatures.Specific.All(eval)) return false;
                }
                if (LeveledCreatures != null)
                {
                    if (!eval(this.LeveledCreatures.Overall)) return false;
                    if (this.LeveledCreatures.Specific != null && !this.LeveledCreatures.Specific.All(eval)) return false;
                }
                if (SoulGems != null)
                {
                    if (!eval(this.SoulGems.Overall)) return false;
                    if (this.SoulGems.Specific != null && !this.SoulGems.Specific.All(eval)) return false;
                }
                if (Keys != null)
                {
                    if (!eval(this.Keys.Overall)) return false;
                    if (this.Keys.Specific != null && !this.Keys.Specific.All(eval)) return false;
                }
                if (Potions != null)
                {
                    if (!eval(this.Potions.Overall)) return false;
                    if (this.Potions.Specific != null && !this.Potions.Specific.All(eval)) return false;
                }
                if (Subspaces != null)
                {
                    if (!eval(this.Subspaces.Overall)) return false;
                    if (this.Subspaces.Specific != null && !this.Subspaces.Specific.All(eval)) return false;
                }
                if (SigilStones != null)
                {
                    if (!eval(this.SigilStones.Overall)) return false;
                    if (this.SigilStones.Specific != null && !this.SigilStones.Specific.All(eval)) return false;
                }
                if (LeveledItems != null)
                {
                    if (!eval(this.LeveledItems.Overall)) return false;
                    if (this.LeveledItems.Specific != null && !this.LeveledItems.Specific.All(eval)) return false;
                }
                if (Weathers != null)
                {
                    if (!eval(this.Weathers.Overall)) return false;
                    if (this.Weathers.Specific != null && !this.Weathers.Specific.All(eval)) return false;
                }
                if (Climates != null)
                {
                    if (!eval(this.Climates.Overall)) return false;
                    if (this.Climates.Specific != null && !this.Climates.Specific.All(eval)) return false;
                }
                if (Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null && !this.Regions.Specific.All(eval)) return false;
                }
                if (Cells != null)
                {
                    if (!eval(this.Cells.Overall)) return false;
                    if (this.Cells.Specific != null && !this.Cells.Specific.All(eval)) return false;
                }
                if (Worldspaces != null)
                {
                    if (!eval(this.Worldspaces.Overall)) return false;
                    if (this.Worldspaces.Specific != null && !this.Worldspaces.Specific.All(eval)) return false;
                }
                if (DialogTopics != null)
                {
                    if (!eval(this.DialogTopics.Overall)) return false;
                    if (this.DialogTopics.Specific != null && !this.DialogTopics.Specific.All(eval)) return false;
                }
                if (Quests != null)
                {
                    if (!eval(this.Quests.Overall)) return false;
                    if (this.Quests.Specific != null && !this.Quests.Specific.All(eval)) return false;
                }
                if (IdleAnimations != null)
                {
                    if (!eval(this.IdleAnimations.Overall)) return false;
                    if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.All(eval)) return false;
                }
                if (AIPackages != null)
                {
                    if (!eval(this.AIPackages.Overall)) return false;
                    if (this.AIPackages.Specific != null && !this.AIPackages.Specific.All(eval)) return false;
                }
                if (CombatStyles != null)
                {
                    if (!eval(this.CombatStyles.Overall)) return false;
                    if (this.CombatStyles.Specific != null && !this.CombatStyles.Specific.All(eval)) return false;
                }
                if (LoadScreens != null)
                {
                    if (!eval(this.LoadScreens.Overall)) return false;
                    if (this.LoadScreens.Specific != null && !this.LoadScreens.Specific.All(eval)) return false;
                }
                if (LeveledSpells != null)
                {
                    if (!eval(this.LeveledSpells.Overall)) return false;
                    if (this.LeveledSpells.Specific != null && !this.LeveledSpells.Specific.All(eval)) return false;
                }
                if (AnimatedObjects != null)
                {
                    if (!eval(this.AnimatedObjects.Overall)) return false;
                    if (this.AnimatedObjects.Specific != null && !this.AnimatedObjects.Specific.All(eval)) return false;
                }
                if (Waters != null)
                {
                    if (!eval(this.Waters.Overall)) return false;
                    if (this.Waters.Specific != null && !this.Waters.Specific.All(eval)) return false;
                }
                if (EffectShaders != null)
                {
                    if (!eval(this.EffectShaders.Overall)) return false;
                    if (this.EffectShaders.Specific != null && !this.EffectShaders.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (Globals != null)
                {
                    if (eval(this.Globals.Overall)) return true;
                    if (this.Globals.Specific != null && this.Globals.Specific.Any(eval)) return true;
                }
                if (Classes != null)
                {
                    if (eval(this.Classes.Overall)) return true;
                    if (this.Classes.Specific != null && this.Classes.Specific.Any(eval)) return true;
                }
                if (Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null && this.Factions.Specific.Any(eval)) return true;
                }
                if (Hairs != null)
                {
                    if (eval(this.Hairs.Overall)) return true;
                    if (this.Hairs.Specific != null && this.Hairs.Specific.Any(eval)) return true;
                }
                if (Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null && this.Eyes.Specific.Any(eval)) return true;
                }
                if (Races != null)
                {
                    if (eval(this.Races.Overall)) return true;
                    if (this.Races.Specific != null && this.Races.Specific.Any(eval)) return true;
                }
                if (Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null && this.Sounds.Specific.Any(eval)) return true;
                }
                if (Skills != null)
                {
                    if (eval(this.Skills.Overall)) return true;
                    if (this.Skills.Specific != null && this.Skills.Specific.Any(eval)) return true;
                }
                if (MagicEffects != null)
                {
                    if (eval(this.MagicEffects.Overall)) return true;
                    if (this.MagicEffects.Specific != null && this.MagicEffects.Specific.Any(eval)) return true;
                }
                if (Scripts != null)
                {
                    if (eval(this.Scripts.Overall)) return true;
                    if (this.Scripts.Specific != null && this.Scripts.Specific.Any(eval)) return true;
                }
                if (LandTextures != null)
                {
                    if (eval(this.LandTextures.Overall)) return true;
                    if (this.LandTextures.Specific != null && this.LandTextures.Specific.Any(eval)) return true;
                }
                if (Enchantments != null)
                {
                    if (eval(this.Enchantments.Overall)) return true;
                    if (this.Enchantments.Specific != null && this.Enchantments.Specific.Any(eval)) return true;
                }
                if (Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null && this.Spells.Specific.Any(eval)) return true;
                }
                if (Birthsigns != null)
                {
                    if (eval(this.Birthsigns.Overall)) return true;
                    if (this.Birthsigns.Specific != null && this.Birthsigns.Specific.Any(eval)) return true;
                }
                if (Activators != null)
                {
                    if (eval(this.Activators.Overall)) return true;
                    if (this.Activators.Specific != null && this.Activators.Specific.Any(eval)) return true;
                }
                if (AlchemicalApparatus != null)
                {
                    if (eval(this.AlchemicalApparatus.Overall)) return true;
                    if (this.AlchemicalApparatus.Specific != null && this.AlchemicalApparatus.Specific.Any(eval)) return true;
                }
                if (Armors != null)
                {
                    if (eval(this.Armors.Overall)) return true;
                    if (this.Armors.Specific != null && this.Armors.Specific.Any(eval)) return true;
                }
                if (Books != null)
                {
                    if (eval(this.Books.Overall)) return true;
                    if (this.Books.Specific != null && this.Books.Specific.Any(eval)) return true;
                }
                if (Clothes != null)
                {
                    if (eval(this.Clothes.Overall)) return true;
                    if (this.Clothes.Specific != null && this.Clothes.Specific.Any(eval)) return true;
                }
                if (Containers != null)
                {
                    if (eval(this.Containers.Overall)) return true;
                    if (this.Containers.Specific != null && this.Containers.Specific.Any(eval)) return true;
                }
                if (Doors != null)
                {
                    if (eval(this.Doors.Overall)) return true;
                    if (this.Doors.Specific != null && this.Doors.Specific.Any(eval)) return true;
                }
                if (Ingredients != null)
                {
                    if (eval(this.Ingredients.Overall)) return true;
                    if (this.Ingredients.Specific != null && this.Ingredients.Specific.Any(eval)) return true;
                }
                if (Lights != null)
                {
                    if (eval(this.Lights.Overall)) return true;
                    if (this.Lights.Specific != null && this.Lights.Specific.Any(eval)) return true;
                }
                if (Miscellaneous != null)
                {
                    if (eval(this.Miscellaneous.Overall)) return true;
                    if (this.Miscellaneous.Specific != null && this.Miscellaneous.Specific.Any(eval)) return true;
                }
                if (Statics != null)
                {
                    if (eval(this.Statics.Overall)) return true;
                    if (this.Statics.Specific != null && this.Statics.Specific.Any(eval)) return true;
                }
                if (Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null && this.Grasses.Specific.Any(eval)) return true;
                }
                if (Trees != null)
                {
                    if (eval(this.Trees.Overall)) return true;
                    if (this.Trees.Specific != null && this.Trees.Specific.Any(eval)) return true;
                }
                if (Flora != null)
                {
                    if (eval(this.Flora.Overall)) return true;
                    if (this.Flora.Specific != null && this.Flora.Specific.Any(eval)) return true;
                }
                if (Furniture != null)
                {
                    if (eval(this.Furniture.Overall)) return true;
                    if (this.Furniture.Specific != null && this.Furniture.Specific.Any(eval)) return true;
                }
                if (Weapons != null)
                {
                    if (eval(this.Weapons.Overall)) return true;
                    if (this.Weapons.Specific != null && this.Weapons.Specific.Any(eval)) return true;
                }
                if (Ammunitions != null)
                {
                    if (eval(this.Ammunitions.Overall)) return true;
                    if (this.Ammunitions.Specific != null && this.Ammunitions.Specific.Any(eval)) return true;
                }
                if (Npcs != null)
                {
                    if (eval(this.Npcs.Overall)) return true;
                    if (this.Npcs.Specific != null && this.Npcs.Specific.Any(eval)) return true;
                }
                if (Creatures != null)
                {
                    if (eval(this.Creatures.Overall)) return true;
                    if (this.Creatures.Specific != null && this.Creatures.Specific.Any(eval)) return true;
                }
                if (LeveledCreatures != null)
                {
                    if (eval(this.LeveledCreatures.Overall)) return true;
                    if (this.LeveledCreatures.Specific != null && this.LeveledCreatures.Specific.Any(eval)) return true;
                }
                if (SoulGems != null)
                {
                    if (eval(this.SoulGems.Overall)) return true;
                    if (this.SoulGems.Specific != null && this.SoulGems.Specific.Any(eval)) return true;
                }
                if (Keys != null)
                {
                    if (eval(this.Keys.Overall)) return true;
                    if (this.Keys.Specific != null && this.Keys.Specific.Any(eval)) return true;
                }
                if (Potions != null)
                {
                    if (eval(this.Potions.Overall)) return true;
                    if (this.Potions.Specific != null && this.Potions.Specific.Any(eval)) return true;
                }
                if (Subspaces != null)
                {
                    if (eval(this.Subspaces.Overall)) return true;
                    if (this.Subspaces.Specific != null && this.Subspaces.Specific.Any(eval)) return true;
                }
                if (SigilStones != null)
                {
                    if (eval(this.SigilStones.Overall)) return true;
                    if (this.SigilStones.Specific != null && this.SigilStones.Specific.Any(eval)) return true;
                }
                if (LeveledItems != null)
                {
                    if (eval(this.LeveledItems.Overall)) return true;
                    if (this.LeveledItems.Specific != null && this.LeveledItems.Specific.Any(eval)) return true;
                }
                if (Weathers != null)
                {
                    if (eval(this.Weathers.Overall)) return true;
                    if (this.Weathers.Specific != null && this.Weathers.Specific.Any(eval)) return true;
                }
                if (Climates != null)
                {
                    if (eval(this.Climates.Overall)) return true;
                    if (this.Climates.Specific != null && this.Climates.Specific.Any(eval)) return true;
                }
                if (Regions != null)
                {
                    if (eval(this.Regions.Overall)) return true;
                    if (this.Regions.Specific != null && this.Regions.Specific.Any(eval)) return true;
                }
                if (Cells != null)
                {
                    if (eval(this.Cells.Overall)) return true;
                    if (this.Cells.Specific != null && this.Cells.Specific.Any(eval)) return true;
                }
                if (Worldspaces != null)
                {
                    if (eval(this.Worldspaces.Overall)) return true;
                    if (this.Worldspaces.Specific != null && this.Worldspaces.Specific.Any(eval)) return true;
                }
                if (DialogTopics != null)
                {
                    if (eval(this.DialogTopics.Overall)) return true;
                    if (this.DialogTopics.Specific != null && this.DialogTopics.Specific.Any(eval)) return true;
                }
                if (Quests != null)
                {
                    if (eval(this.Quests.Overall)) return true;
                    if (this.Quests.Specific != null && this.Quests.Specific.Any(eval)) return true;
                }
                if (IdleAnimations != null)
                {
                    if (eval(this.IdleAnimations.Overall)) return true;
                    if (this.IdleAnimations.Specific != null && this.IdleAnimations.Specific.Any(eval)) return true;
                }
                if (AIPackages != null)
                {
                    if (eval(this.AIPackages.Overall)) return true;
                    if (this.AIPackages.Specific != null && this.AIPackages.Specific.Any(eval)) return true;
                }
                if (CombatStyles != null)
                {
                    if (eval(this.CombatStyles.Overall)) return true;
                    if (this.CombatStyles.Specific != null && this.CombatStyles.Specific.Any(eval)) return true;
                }
                if (LoadScreens != null)
                {
                    if (eval(this.LoadScreens.Overall)) return true;
                    if (this.LoadScreens.Specific != null && this.LoadScreens.Specific.Any(eval)) return true;
                }
                if (LeveledSpells != null)
                {
                    if (eval(this.LeveledSpells.Overall)) return true;
                    if (this.LeveledSpells.Specific != null && this.LeveledSpells.Specific.Any(eval)) return true;
                }
                if (AnimatedObjects != null)
                {
                    if (eval(this.AnimatedObjects.Overall)) return true;
                    if (this.AnimatedObjects.Specific != null && this.AnimatedObjects.Specific.Any(eval)) return true;
                }
                if (Waters != null)
                {
                    if (eval(this.Waters.Overall)) return true;
                    if (this.Waters.Specific != null && this.Waters.Specific.Any(eval)) return true;
                }
                if (EffectShaders != null)
                {
                    if (eval(this.EffectShaders.Overall)) return true;
                    if (this.EffectShaders.Specific != null && this.EffectShaders.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new OblivionMod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, OblivionModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.Globals = this.Globals == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
                obj.Classes = this.Classes == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Classes.Overall), this.Classes.Specific?.Translate(eval));
                obj.Factions = this.Factions == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Factions.Overall), this.Factions.Specific?.Translate(eval));
                obj.Hairs = this.Hairs == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Hairs.Overall), this.Hairs.Specific?.Translate(eval));
                obj.Eyes = this.Eyes == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Eyes.Overall), this.Eyes.Specific?.Translate(eval));
                obj.Races = this.Races == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Races.Overall), this.Races.Specific?.Translate(eval));
                obj.Sounds = this.Sounds == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Sounds.Overall), this.Sounds.Specific?.Translate(eval));
                obj.Skills = this.Skills == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Skills.Overall), this.Skills.Specific?.Translate(eval));
                obj.MagicEffects = this.MagicEffects == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.MagicEffects.Overall), this.MagicEffects.Specific?.Translate(eval));
                obj.Scripts = this.Scripts == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Scripts.Overall), this.Scripts.Specific?.Translate(eval));
                obj.LandTextures = this.LandTextures == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.LandTextures.Overall), this.LandTextures.Specific?.Translate(eval));
                obj.Enchantments = this.Enchantments == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Enchantments.Overall), this.Enchantments.Specific?.Translate(eval));
                obj.Spells = this.Spells == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Spells.Overall), this.Spells.Specific?.Translate(eval));
                obj.Birthsigns = this.Birthsigns == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Birthsigns.Overall), this.Birthsigns.Specific?.Translate(eval));
                obj.Activators = this.Activators == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Activators.Overall), this.Activators.Specific?.Translate(eval));
                obj.AlchemicalApparatus = this.AlchemicalApparatus == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.AlchemicalApparatus.Overall), this.AlchemicalApparatus.Specific?.Translate(eval));
                obj.Armors = this.Armors == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Armors.Overall), this.Armors.Specific?.Translate(eval));
                obj.Books = this.Books == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Books.Overall), this.Books.Specific?.Translate(eval));
                obj.Clothes = this.Clothes == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Clothes.Overall), this.Clothes.Specific?.Translate(eval));
                obj.Containers = this.Containers == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Containers.Overall), this.Containers.Specific?.Translate(eval));
                obj.Doors = this.Doors == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Doors.Overall), this.Doors.Specific?.Translate(eval));
                obj.Ingredients = this.Ingredients == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Ingredients.Overall), this.Ingredients.Specific?.Translate(eval));
                obj.Lights = this.Lights == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Lights.Overall), this.Lights.Specific?.Translate(eval));
                obj.Miscellaneous = this.Miscellaneous == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Miscellaneous.Overall), this.Miscellaneous.Specific?.Translate(eval));
                obj.Statics = this.Statics == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Statics.Overall), this.Statics.Specific?.Translate(eval));
                obj.Grasses = this.Grasses == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Grasses.Overall), this.Grasses.Specific?.Translate(eval));
                obj.Trees = this.Trees == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Trees.Overall), this.Trees.Specific?.Translate(eval));
                obj.Flora = this.Flora == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Flora.Overall), this.Flora.Specific?.Translate(eval));
                obj.Furniture = this.Furniture == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Furniture.Overall), this.Furniture.Specific?.Translate(eval));
                obj.Weapons = this.Weapons == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Weapons.Overall), this.Weapons.Specific?.Translate(eval));
                obj.Ammunitions = this.Ammunitions == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Ammunitions.Overall), this.Ammunitions.Specific?.Translate(eval));
                obj.Npcs = this.Npcs == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Npcs.Overall), this.Npcs.Specific?.Translate(eval));
                obj.Creatures = this.Creatures == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Creatures.Overall), this.Creatures.Specific?.Translate(eval));
                obj.LeveledCreatures = this.LeveledCreatures == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.LeveledCreatures.Overall), this.LeveledCreatures.Specific?.Translate(eval));
                obj.SoulGems = this.SoulGems == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.SoulGems.Overall), this.SoulGems.Specific?.Translate(eval));
                obj.Keys = this.Keys == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Keys.Overall), this.Keys.Specific?.Translate(eval));
                obj.Potions = this.Potions == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Potions.Overall), this.Potions.Specific?.Translate(eval));
                obj.Subspaces = this.Subspaces == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Subspaces.Overall), this.Subspaces.Specific?.Translate(eval));
                obj.SigilStones = this.SigilStones == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.SigilStones.Overall), this.SigilStones.Specific?.Translate(eval));
                obj.LeveledItems = this.LeveledItems == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.LeveledItems.Overall), this.LeveledItems.Specific?.Translate(eval));
                obj.Weathers = this.Weathers == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Weathers.Overall), this.Weathers.Specific?.Translate(eval));
                obj.Climates = this.Climates == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Climates.Overall), this.Climates.Specific?.Translate(eval));
                obj.Regions = this.Regions == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Regions.Overall), this.Regions.Specific?.Translate(eval));
                obj.Cells = this.Cells == null ? null : new MaskItem<R, OblivionListGroup.Mask<R>?>(eval(this.Cells.Overall), this.Cells.Specific?.Translate(eval));
                obj.Worldspaces = this.Worldspaces == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Worldspaces.Overall), this.Worldspaces.Specific?.Translate(eval));
                obj.DialogTopics = this.DialogTopics == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.DialogTopics.Overall), this.DialogTopics.Specific?.Translate(eval));
                obj.Quests = this.Quests == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Quests.Overall), this.Quests.Specific?.Translate(eval));
                obj.IdleAnimations = this.IdleAnimations == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.IdleAnimations.Overall), this.IdleAnimations.Specific?.Translate(eval));
                obj.AIPackages = this.AIPackages == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.AIPackages.Overall), this.AIPackages.Specific?.Translate(eval));
                obj.CombatStyles = this.CombatStyles == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.CombatStyles.Overall), this.CombatStyles.Specific?.Translate(eval));
                obj.LoadScreens = this.LoadScreens == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.LoadScreens.Overall), this.LoadScreens.Specific?.Translate(eval));
                obj.LeveledSpells = this.LeveledSpells == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.LeveledSpells.Overall), this.LeveledSpells.Specific?.Translate(eval));
                obj.AnimatedObjects = this.AnimatedObjects == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.AnimatedObjects.Overall), this.AnimatedObjects.Specific?.Translate(eval));
                obj.Waters = this.Waters == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.Waters.Overall), this.Waters.Specific?.Translate(eval));
                obj.EffectShaders = this.EffectShaders == null ? null : new MaskItem<R, OblivionGroup.Mask<R>?>(eval(this.EffectShaders.Overall), this.EffectShaders.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(OblivionMod.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, OblivionMod.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(OblivionMod.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.Print(sb);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.Print(sb);
                    }
                    if (printMask?.Globals?.Overall ?? true)
                    {
                        Globals?.Print(sb);
                    }
                    if (printMask?.Classes?.Overall ?? true)
                    {
                        Classes?.Print(sb);
                    }
                    if (printMask?.Factions?.Overall ?? true)
                    {
                        Factions?.Print(sb);
                    }
                    if (printMask?.Hairs?.Overall ?? true)
                    {
                        Hairs?.Print(sb);
                    }
                    if (printMask?.Eyes?.Overall ?? true)
                    {
                        Eyes?.Print(sb);
                    }
                    if (printMask?.Races?.Overall ?? true)
                    {
                        Races?.Print(sb);
                    }
                    if (printMask?.Sounds?.Overall ?? true)
                    {
                        Sounds?.Print(sb);
                    }
                    if (printMask?.Skills?.Overall ?? true)
                    {
                        Skills?.Print(sb);
                    }
                    if (printMask?.MagicEffects?.Overall ?? true)
                    {
                        MagicEffects?.Print(sb);
                    }
                    if (printMask?.Scripts?.Overall ?? true)
                    {
                        Scripts?.Print(sb);
                    }
                    if (printMask?.LandTextures?.Overall ?? true)
                    {
                        LandTextures?.Print(sb);
                    }
                    if (printMask?.Enchantments?.Overall ?? true)
                    {
                        Enchantments?.Print(sb);
                    }
                    if (printMask?.Spells?.Overall ?? true)
                    {
                        Spells?.Print(sb);
                    }
                    if (printMask?.Birthsigns?.Overall ?? true)
                    {
                        Birthsigns?.Print(sb);
                    }
                    if (printMask?.Activators?.Overall ?? true)
                    {
                        Activators?.Print(sb);
                    }
                    if (printMask?.AlchemicalApparatus?.Overall ?? true)
                    {
                        AlchemicalApparatus?.Print(sb);
                    }
                    if (printMask?.Armors?.Overall ?? true)
                    {
                        Armors?.Print(sb);
                    }
                    if (printMask?.Books?.Overall ?? true)
                    {
                        Books?.Print(sb);
                    }
                    if (printMask?.Clothes?.Overall ?? true)
                    {
                        Clothes?.Print(sb);
                    }
                    if (printMask?.Containers?.Overall ?? true)
                    {
                        Containers?.Print(sb);
                    }
                    if (printMask?.Doors?.Overall ?? true)
                    {
                        Doors?.Print(sb);
                    }
                    if (printMask?.Ingredients?.Overall ?? true)
                    {
                        Ingredients?.Print(sb);
                    }
                    if (printMask?.Lights?.Overall ?? true)
                    {
                        Lights?.Print(sb);
                    }
                    if (printMask?.Miscellaneous?.Overall ?? true)
                    {
                        Miscellaneous?.Print(sb);
                    }
                    if (printMask?.Statics?.Overall ?? true)
                    {
                        Statics?.Print(sb);
                    }
                    if (printMask?.Grasses?.Overall ?? true)
                    {
                        Grasses?.Print(sb);
                    }
                    if (printMask?.Trees?.Overall ?? true)
                    {
                        Trees?.Print(sb);
                    }
                    if (printMask?.Flora?.Overall ?? true)
                    {
                        Flora?.Print(sb);
                    }
                    if (printMask?.Furniture?.Overall ?? true)
                    {
                        Furniture?.Print(sb);
                    }
                    if (printMask?.Weapons?.Overall ?? true)
                    {
                        Weapons?.Print(sb);
                    }
                    if (printMask?.Ammunitions?.Overall ?? true)
                    {
                        Ammunitions?.Print(sb);
                    }
                    if (printMask?.Npcs?.Overall ?? true)
                    {
                        Npcs?.Print(sb);
                    }
                    if (printMask?.Creatures?.Overall ?? true)
                    {
                        Creatures?.Print(sb);
                    }
                    if (printMask?.LeveledCreatures?.Overall ?? true)
                    {
                        LeveledCreatures?.Print(sb);
                    }
                    if (printMask?.SoulGems?.Overall ?? true)
                    {
                        SoulGems?.Print(sb);
                    }
                    if (printMask?.Keys?.Overall ?? true)
                    {
                        Keys?.Print(sb);
                    }
                    if (printMask?.Potions?.Overall ?? true)
                    {
                        Potions?.Print(sb);
                    }
                    if (printMask?.Subspaces?.Overall ?? true)
                    {
                        Subspaces?.Print(sb);
                    }
                    if (printMask?.SigilStones?.Overall ?? true)
                    {
                        SigilStones?.Print(sb);
                    }
                    if (printMask?.LeveledItems?.Overall ?? true)
                    {
                        LeveledItems?.Print(sb);
                    }
                    if (printMask?.Weathers?.Overall ?? true)
                    {
                        Weathers?.Print(sb);
                    }
                    if (printMask?.Climates?.Overall ?? true)
                    {
                        Climates?.Print(sb);
                    }
                    if (printMask?.Regions?.Overall ?? true)
                    {
                        Regions?.Print(sb);
                    }
                    if (printMask?.Cells?.Overall ?? true)
                    {
                        Cells?.Print(sb);
                    }
                    if (printMask?.Worldspaces?.Overall ?? true)
                    {
                        Worldspaces?.Print(sb);
                    }
                    if (printMask?.DialogTopics?.Overall ?? true)
                    {
                        DialogTopics?.Print(sb);
                    }
                    if (printMask?.Quests?.Overall ?? true)
                    {
                        Quests?.Print(sb);
                    }
                    if (printMask?.IdleAnimations?.Overall ?? true)
                    {
                        IdleAnimations?.Print(sb);
                    }
                    if (printMask?.AIPackages?.Overall ?? true)
                    {
                        AIPackages?.Print(sb);
                    }
                    if (printMask?.CombatStyles?.Overall ?? true)
                    {
                        CombatStyles?.Print(sb);
                    }
                    if (printMask?.LoadScreens?.Overall ?? true)
                    {
                        LoadScreens?.Print(sb);
                    }
                    if (printMask?.LeveledSpells?.Overall ?? true)
                    {
                        LeveledSpells?.Print(sb);
                    }
                    if (printMask?.AnimatedObjects?.Overall ?? true)
                    {
                        AnimatedObjects?.Print(sb);
                    }
                    if (printMask?.Waters?.Overall ?? true)
                    {
                        Waters?.Print(sb);
                    }
                    if (printMask?.EffectShaders?.Overall ?? true)
                    {
                        EffectShaders?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, OblivionModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Global.ErrorMask>?>? Globals;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Class.ErrorMask>?>? Classes;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Faction.ErrorMask>?>? Factions;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Hair.ErrorMask>?>? Hairs;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Eye.ErrorMask>?>? Eyes;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Race.ErrorMask>?>? Races;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Sound.ErrorMask>?>? Sounds;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<SkillRecord.ErrorMask>?>? Skills;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<MagicEffect.ErrorMask>?>? MagicEffects;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Script.ErrorMask>?>? Scripts;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<LandTexture.ErrorMask>?>? LandTextures;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Enchantment.ErrorMask>?>? Enchantments;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Spell.ErrorMask>?>? Spells;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Birthsign.ErrorMask>?>? Birthsigns;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Activator.ErrorMask>?>? Activators;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<AlchemicalApparatus.ErrorMask>?>? AlchemicalApparatus;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Armor.ErrorMask>?>? Armors;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Book.ErrorMask>?>? Books;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Clothing.ErrorMask>?>? Clothes;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Container.ErrorMask>?>? Containers;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Door.ErrorMask>?>? Doors;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Ingredient.ErrorMask>?>? Ingredients;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Light.ErrorMask>?>? Lights;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Miscellaneous.ErrorMask>?>? Miscellaneous;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Static.ErrorMask>?>? Statics;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Grass.ErrorMask>?>? Grasses;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Tree.ErrorMask>?>? Trees;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Flora.ErrorMask>?>? Flora;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Furniture.ErrorMask>?>? Furniture;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Weapon.ErrorMask>?>? Weapons;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Ammunition.ErrorMask>?>? Ammunitions;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Npc.ErrorMask>?>? Npcs;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Creature.ErrorMask>?>? Creatures;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<LeveledCreature.ErrorMask>?>? LeveledCreatures;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<SoulGem.ErrorMask>?>? SoulGems;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Key.ErrorMask>?>? Keys;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Potion.ErrorMask>?>? Potions;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Subspace.ErrorMask>?>? Subspaces;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<SigilStone.ErrorMask>?>? SigilStones;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<LeveledItem.ErrorMask>?>? LeveledItems;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Weather.ErrorMask>?>? Weathers;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Climate.ErrorMask>?>? Climates;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Region.ErrorMask>?>? Regions;
            public MaskItem<Exception?, OblivionListGroup.ErrorMask<CellBlock.ErrorMask>?>? Cells;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Worldspace.ErrorMask>?>? Worldspaces;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<DialogTopic.ErrorMask>?>? DialogTopics;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Quest.ErrorMask>?>? Quests;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<IdleAnimation.ErrorMask>?>? IdleAnimations;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<AIPackage.ErrorMask>?>? AIPackages;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<CombatStyle.ErrorMask>?>? CombatStyles;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<LoadScreen.ErrorMask>?>? LoadScreens;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<LeveledSpell.ErrorMask>?>? LeveledSpells;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<AnimatedObject.ErrorMask>?>? AnimatedObjects;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<Water.ErrorMask>?>? Waters;
            public MaskItem<Exception?, OblivionGroup.ErrorMask<EffectShader.ErrorMask>?>? EffectShaders;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
                switch (enu)
                {
                    case OblivionMod_FieldIndex.ModHeader:
                        return ModHeader;
                    case OblivionMod_FieldIndex.GameSettings:
                        return GameSettings;
                    case OblivionMod_FieldIndex.Globals:
                        return Globals;
                    case OblivionMod_FieldIndex.Classes:
                        return Classes;
                    case OblivionMod_FieldIndex.Factions:
                        return Factions;
                    case OblivionMod_FieldIndex.Hairs:
                        return Hairs;
                    case OblivionMod_FieldIndex.Eyes:
                        return Eyes;
                    case OblivionMod_FieldIndex.Races:
                        return Races;
                    case OblivionMod_FieldIndex.Sounds:
                        return Sounds;
                    case OblivionMod_FieldIndex.Skills:
                        return Skills;
                    case OblivionMod_FieldIndex.MagicEffects:
                        return MagicEffects;
                    case OblivionMod_FieldIndex.Scripts:
                        return Scripts;
                    case OblivionMod_FieldIndex.LandTextures:
                        return LandTextures;
                    case OblivionMod_FieldIndex.Enchantments:
                        return Enchantments;
                    case OblivionMod_FieldIndex.Spells:
                        return Spells;
                    case OblivionMod_FieldIndex.Birthsigns:
                        return Birthsigns;
                    case OblivionMod_FieldIndex.Activators:
                        return Activators;
                    case OblivionMod_FieldIndex.AlchemicalApparatus:
                        return AlchemicalApparatus;
                    case OblivionMod_FieldIndex.Armors:
                        return Armors;
                    case OblivionMod_FieldIndex.Books:
                        return Books;
                    case OblivionMod_FieldIndex.Clothes:
                        return Clothes;
                    case OblivionMod_FieldIndex.Containers:
                        return Containers;
                    case OblivionMod_FieldIndex.Doors:
                        return Doors;
                    case OblivionMod_FieldIndex.Ingredients:
                        return Ingredients;
                    case OblivionMod_FieldIndex.Lights:
                        return Lights;
                    case OblivionMod_FieldIndex.Miscellaneous:
                        return Miscellaneous;
                    case OblivionMod_FieldIndex.Statics:
                        return Statics;
                    case OblivionMod_FieldIndex.Grasses:
                        return Grasses;
                    case OblivionMod_FieldIndex.Trees:
                        return Trees;
                    case OblivionMod_FieldIndex.Flora:
                        return Flora;
                    case OblivionMod_FieldIndex.Furniture:
                        return Furniture;
                    case OblivionMod_FieldIndex.Weapons:
                        return Weapons;
                    case OblivionMod_FieldIndex.Ammunitions:
                        return Ammunitions;
                    case OblivionMod_FieldIndex.Npcs:
                        return Npcs;
                    case OblivionMod_FieldIndex.Creatures:
                        return Creatures;
                    case OblivionMod_FieldIndex.LeveledCreatures:
                        return LeveledCreatures;
                    case OblivionMod_FieldIndex.SoulGems:
                        return SoulGems;
                    case OblivionMod_FieldIndex.Keys:
                        return Keys;
                    case OblivionMod_FieldIndex.Potions:
                        return Potions;
                    case OblivionMod_FieldIndex.Subspaces:
                        return Subspaces;
                    case OblivionMod_FieldIndex.SigilStones:
                        return SigilStones;
                    case OblivionMod_FieldIndex.LeveledItems:
                        return LeveledItems;
                    case OblivionMod_FieldIndex.Weathers:
                        return Weathers;
                    case OblivionMod_FieldIndex.Climates:
                        return Climates;
                    case OblivionMod_FieldIndex.Regions:
                        return Regions;
                    case OblivionMod_FieldIndex.Cells:
                        return Cells;
                    case OblivionMod_FieldIndex.Worldspaces:
                        return Worldspaces;
                    case OblivionMod_FieldIndex.DialogTopics:
                        return DialogTopics;
                    case OblivionMod_FieldIndex.Quests:
                        return Quests;
                    case OblivionMod_FieldIndex.IdleAnimations:
                        return IdleAnimations;
                    case OblivionMod_FieldIndex.AIPackages:
                        return AIPackages;
                    case OblivionMod_FieldIndex.CombatStyles:
                        return CombatStyles;
                    case OblivionMod_FieldIndex.LoadScreens:
                        return LoadScreens;
                    case OblivionMod_FieldIndex.LeveledSpells:
                        return LeveledSpells;
                    case OblivionMod_FieldIndex.AnimatedObjects:
                        return AnimatedObjects;
                    case OblivionMod_FieldIndex.Waters:
                        return Waters;
                    case OblivionMod_FieldIndex.EffectShaders:
                        return EffectShaders;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
                switch (enu)
                {
                    case OblivionMod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, OblivionModHeader.ErrorMask?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, OblivionGroup.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Globals:
                        this.Globals = new MaskItem<Exception?, OblivionGroup.ErrorMask<Global.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Classes:
                        this.Classes = new MaskItem<Exception?, OblivionGroup.ErrorMask<Class.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, OblivionGroup.ErrorMask<Faction.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, OblivionGroup.ErrorMask<Hair.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, OblivionGroup.ErrorMask<Eye.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Races:
                        this.Races = new MaskItem<Exception?, OblivionGroup.ErrorMask<Race.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, OblivionGroup.ErrorMask<Sound.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Skills:
                        this.Skills = new MaskItem<Exception?, OblivionGroup.ErrorMask<SkillRecord.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.MagicEffects:
                        this.MagicEffects = new MaskItem<Exception?, OblivionGroup.ErrorMask<MagicEffect.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Scripts:
                        this.Scripts = new MaskItem<Exception?, OblivionGroup.ErrorMask<Script.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.LandTextures:
                        this.LandTextures = new MaskItem<Exception?, OblivionGroup.ErrorMask<LandTexture.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Enchantments:
                        this.Enchantments = new MaskItem<Exception?, OblivionGroup.ErrorMask<Enchantment.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, OblivionGroup.ErrorMask<Spell.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Birthsigns:
                        this.Birthsigns = new MaskItem<Exception?, OblivionGroup.ErrorMask<Birthsign.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Activators:
                        this.Activators = new MaskItem<Exception?, OblivionGroup.ErrorMask<Activator.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.AlchemicalApparatus:
                        this.AlchemicalApparatus = new MaskItem<Exception?, OblivionGroup.ErrorMask<AlchemicalApparatus.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Armors:
                        this.Armors = new MaskItem<Exception?, OblivionGroup.ErrorMask<Armor.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Books:
                        this.Books = new MaskItem<Exception?, OblivionGroup.ErrorMask<Book.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Clothes:
                        this.Clothes = new MaskItem<Exception?, OblivionGroup.ErrorMask<Clothing.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Containers:
                        this.Containers = new MaskItem<Exception?, OblivionGroup.ErrorMask<Container.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Doors:
                        this.Doors = new MaskItem<Exception?, OblivionGroup.ErrorMask<Door.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Ingredients:
                        this.Ingredients = new MaskItem<Exception?, OblivionGroup.ErrorMask<Ingredient.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Lights:
                        this.Lights = new MaskItem<Exception?, OblivionGroup.ErrorMask<Light.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Miscellaneous:
                        this.Miscellaneous = new MaskItem<Exception?, OblivionGroup.ErrorMask<Miscellaneous.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Statics:
                        this.Statics = new MaskItem<Exception?, OblivionGroup.ErrorMask<Static.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, OblivionGroup.ErrorMask<Grass.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Trees:
                        this.Trees = new MaskItem<Exception?, OblivionGroup.ErrorMask<Tree.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Flora:
                        this.Flora = new MaskItem<Exception?, OblivionGroup.ErrorMask<Flora.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Furniture:
                        this.Furniture = new MaskItem<Exception?, OblivionGroup.ErrorMask<Furniture.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Weapons:
                        this.Weapons = new MaskItem<Exception?, OblivionGroup.ErrorMask<Weapon.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Ammunitions:
                        this.Ammunitions = new MaskItem<Exception?, OblivionGroup.ErrorMask<Ammunition.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Npcs:
                        this.Npcs = new MaskItem<Exception?, OblivionGroup.ErrorMask<Npc.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Creatures:
                        this.Creatures = new MaskItem<Exception?, OblivionGroup.ErrorMask<Creature.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.LeveledCreatures:
                        this.LeveledCreatures = new MaskItem<Exception?, OblivionGroup.ErrorMask<LeveledCreature.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.SoulGems:
                        this.SoulGems = new MaskItem<Exception?, OblivionGroup.ErrorMask<SoulGem.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Keys:
                        this.Keys = new MaskItem<Exception?, OblivionGroup.ErrorMask<Key.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Potions:
                        this.Potions = new MaskItem<Exception?, OblivionGroup.ErrorMask<Potion.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Subspaces:
                        this.Subspaces = new MaskItem<Exception?, OblivionGroup.ErrorMask<Subspace.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.SigilStones:
                        this.SigilStones = new MaskItem<Exception?, OblivionGroup.ErrorMask<SigilStone.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.LeveledItems:
                        this.LeveledItems = new MaskItem<Exception?, OblivionGroup.ErrorMask<LeveledItem.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Weathers:
                        this.Weathers = new MaskItem<Exception?, OblivionGroup.ErrorMask<Weather.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Climates:
                        this.Climates = new MaskItem<Exception?, OblivionGroup.ErrorMask<Climate.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, OblivionGroup.ErrorMask<Region.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Cells:
                        this.Cells = new MaskItem<Exception?, OblivionListGroup.ErrorMask<CellBlock.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Worldspaces:
                        this.Worldspaces = new MaskItem<Exception?, OblivionGroup.ErrorMask<Worldspace.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.DialogTopics:
                        this.DialogTopics = new MaskItem<Exception?, OblivionGroup.ErrorMask<DialogTopic.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Quests:
                        this.Quests = new MaskItem<Exception?, OblivionGroup.ErrorMask<Quest.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = new MaskItem<Exception?, OblivionGroup.ErrorMask<IdleAnimation.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.AIPackages:
                        this.AIPackages = new MaskItem<Exception?, OblivionGroup.ErrorMask<AIPackage.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.CombatStyles:
                        this.CombatStyles = new MaskItem<Exception?, OblivionGroup.ErrorMask<CombatStyle.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.LoadScreens:
                        this.LoadScreens = new MaskItem<Exception?, OblivionGroup.ErrorMask<LoadScreen.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.LeveledSpells:
                        this.LeveledSpells = new MaskItem<Exception?, OblivionGroup.ErrorMask<LeveledSpell.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = new MaskItem<Exception?, OblivionGroup.ErrorMask<AnimatedObject.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.Waters:
                        this.Waters = new MaskItem<Exception?, OblivionGroup.ErrorMask<Water.ErrorMask>?>(ex, null);
                        break;
                    case OblivionMod_FieldIndex.EffectShaders:
                        this.EffectShaders = new MaskItem<Exception?, OblivionGroup.ErrorMask<EffectShader.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                OblivionMod_FieldIndex enu = (OblivionMod_FieldIndex)index;
                switch (enu)
                {
                    case OblivionMod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, OblivionModHeader.ErrorMask?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, OblivionGroup.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Globals:
                        this.Globals = (MaskItem<Exception?, OblivionGroup.ErrorMask<Global.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Classes:
                        this.Classes = (MaskItem<Exception?, OblivionGroup.ErrorMask<Class.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, OblivionGroup.ErrorMask<Faction.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, OblivionGroup.ErrorMask<Hair.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, OblivionGroup.ErrorMask<Eye.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Races:
                        this.Races = (MaskItem<Exception?, OblivionGroup.ErrorMask<Race.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, OblivionGroup.ErrorMask<Sound.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Skills:
                        this.Skills = (MaskItem<Exception?, OblivionGroup.ErrorMask<SkillRecord.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.MagicEffects:
                        this.MagicEffects = (MaskItem<Exception?, OblivionGroup.ErrorMask<MagicEffect.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Scripts:
                        this.Scripts = (MaskItem<Exception?, OblivionGroup.ErrorMask<Script.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.LandTextures:
                        this.LandTextures = (MaskItem<Exception?, OblivionGroup.ErrorMask<LandTexture.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Enchantments:
                        this.Enchantments = (MaskItem<Exception?, OblivionGroup.ErrorMask<Enchantment.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, OblivionGroup.ErrorMask<Spell.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Birthsigns:
                        this.Birthsigns = (MaskItem<Exception?, OblivionGroup.ErrorMask<Birthsign.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Activators:
                        this.Activators = (MaskItem<Exception?, OblivionGroup.ErrorMask<Activator.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.AlchemicalApparatus:
                        this.AlchemicalApparatus = (MaskItem<Exception?, OblivionGroup.ErrorMask<AlchemicalApparatus.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Armors:
                        this.Armors = (MaskItem<Exception?, OblivionGroup.ErrorMask<Armor.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Books:
                        this.Books = (MaskItem<Exception?, OblivionGroup.ErrorMask<Book.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Clothes:
                        this.Clothes = (MaskItem<Exception?, OblivionGroup.ErrorMask<Clothing.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Containers:
                        this.Containers = (MaskItem<Exception?, OblivionGroup.ErrorMask<Container.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Doors:
                        this.Doors = (MaskItem<Exception?, OblivionGroup.ErrorMask<Door.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Ingredients:
                        this.Ingredients = (MaskItem<Exception?, OblivionGroup.ErrorMask<Ingredient.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Lights:
                        this.Lights = (MaskItem<Exception?, OblivionGroup.ErrorMask<Light.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Miscellaneous:
                        this.Miscellaneous = (MaskItem<Exception?, OblivionGroup.ErrorMask<Miscellaneous.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Statics:
                        this.Statics = (MaskItem<Exception?, OblivionGroup.ErrorMask<Static.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, OblivionGroup.ErrorMask<Grass.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Trees:
                        this.Trees = (MaskItem<Exception?, OblivionGroup.ErrorMask<Tree.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Flora:
                        this.Flora = (MaskItem<Exception?, OblivionGroup.ErrorMask<Flora.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Furniture:
                        this.Furniture = (MaskItem<Exception?, OblivionGroup.ErrorMask<Furniture.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Weapons:
                        this.Weapons = (MaskItem<Exception?, OblivionGroup.ErrorMask<Weapon.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Ammunitions:
                        this.Ammunitions = (MaskItem<Exception?, OblivionGroup.ErrorMask<Ammunition.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Npcs:
                        this.Npcs = (MaskItem<Exception?, OblivionGroup.ErrorMask<Npc.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Creatures:
                        this.Creatures = (MaskItem<Exception?, OblivionGroup.ErrorMask<Creature.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.LeveledCreatures:
                        this.LeveledCreatures = (MaskItem<Exception?, OblivionGroup.ErrorMask<LeveledCreature.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.SoulGems:
                        this.SoulGems = (MaskItem<Exception?, OblivionGroup.ErrorMask<SoulGem.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Keys:
                        this.Keys = (MaskItem<Exception?, OblivionGroup.ErrorMask<Key.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Potions:
                        this.Potions = (MaskItem<Exception?, OblivionGroup.ErrorMask<Potion.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Subspaces:
                        this.Subspaces = (MaskItem<Exception?, OblivionGroup.ErrorMask<Subspace.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.SigilStones:
                        this.SigilStones = (MaskItem<Exception?, OblivionGroup.ErrorMask<SigilStone.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.LeveledItems:
                        this.LeveledItems = (MaskItem<Exception?, OblivionGroup.ErrorMask<LeveledItem.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Weathers:
                        this.Weathers = (MaskItem<Exception?, OblivionGroup.ErrorMask<Weather.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Climates:
                        this.Climates = (MaskItem<Exception?, OblivionGroup.ErrorMask<Climate.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, OblivionGroup.ErrorMask<Region.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Cells:
                        this.Cells = (MaskItem<Exception?, OblivionListGroup.ErrorMask<CellBlock.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Worldspaces:
                        this.Worldspaces = (MaskItem<Exception?, OblivionGroup.ErrorMask<Worldspace.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.DialogTopics:
                        this.DialogTopics = (MaskItem<Exception?, OblivionGroup.ErrorMask<DialogTopic.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Quests:
                        this.Quests = (MaskItem<Exception?, OblivionGroup.ErrorMask<Quest.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = (MaskItem<Exception?, OblivionGroup.ErrorMask<IdleAnimation.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.AIPackages:
                        this.AIPackages = (MaskItem<Exception?, OblivionGroup.ErrorMask<AIPackage.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.CombatStyles:
                        this.CombatStyles = (MaskItem<Exception?, OblivionGroup.ErrorMask<CombatStyle.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.LoadScreens:
                        this.LoadScreens = (MaskItem<Exception?, OblivionGroup.ErrorMask<LoadScreen.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.LeveledSpells:
                        this.LeveledSpells = (MaskItem<Exception?, OblivionGroup.ErrorMask<LeveledSpell.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = (MaskItem<Exception?, OblivionGroup.ErrorMask<AnimatedObject.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.Waters:
                        this.Waters = (MaskItem<Exception?, OblivionGroup.ErrorMask<Water.ErrorMask>?>?)obj;
                        break;
                    case OblivionMod_FieldIndex.EffectShaders:
                        this.EffectShaders = (MaskItem<Exception?, OblivionGroup.ErrorMask<EffectShader.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (Globals != null) return true;
                if (Classes != null) return true;
                if (Factions != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (Races != null) return true;
                if (Sounds != null) return true;
                if (Skills != null) return true;
                if (MagicEffects != null) return true;
                if (Scripts != null) return true;
                if (LandTextures != null) return true;
                if (Enchantments != null) return true;
                if (Spells != null) return true;
                if (Birthsigns != null) return true;
                if (Activators != null) return true;
                if (AlchemicalApparatus != null) return true;
                if (Armors != null) return true;
                if (Books != null) return true;
                if (Clothes != null) return true;
                if (Containers != null) return true;
                if (Doors != null) return true;
                if (Ingredients != null) return true;
                if (Lights != null) return true;
                if (Miscellaneous != null) return true;
                if (Statics != null) return true;
                if (Grasses != null) return true;
                if (Trees != null) return true;
                if (Flora != null) return true;
                if (Furniture != null) return true;
                if (Weapons != null) return true;
                if (Ammunitions != null) return true;
                if (Npcs != null) return true;
                if (Creatures != null) return true;
                if (LeveledCreatures != null) return true;
                if (SoulGems != null) return true;
                if (Keys != null) return true;
                if (Potions != null) return true;
                if (Subspaces != null) return true;
                if (SigilStones != null) return true;
                if (LeveledItems != null) return true;
                if (Weathers != null) return true;
                if (Climates != null) return true;
                if (Regions != null) return true;
                if (Cells != null) return true;
                if (Worldspaces != null) return true;
                if (DialogTopics != null) return true;
                if (Quests != null) return true;
                if (IdleAnimations != null) return true;
                if (AIPackages != null) return true;
                if (CombatStyles != null) return true;
                if (LoadScreens != null) return true;
                if (LeveledSpells != null) return true;
                if (AnimatedObjects != null) return true;
                if (Waters != null) return true;
                if (EffectShaders != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                ModHeader?.Print(sb);
                GameSettings?.Print(sb);
                Globals?.Print(sb);
                Classes?.Print(sb);
                Factions?.Print(sb);
                Hairs?.Print(sb);
                Eyes?.Print(sb);
                Races?.Print(sb);
                Sounds?.Print(sb);
                Skills?.Print(sb);
                MagicEffects?.Print(sb);
                Scripts?.Print(sb);
                LandTextures?.Print(sb);
                Enchantments?.Print(sb);
                Spells?.Print(sb);
                Birthsigns?.Print(sb);
                Activators?.Print(sb);
                AlchemicalApparatus?.Print(sb);
                Armors?.Print(sb);
                Books?.Print(sb);
                Clothes?.Print(sb);
                Containers?.Print(sb);
                Doors?.Print(sb);
                Ingredients?.Print(sb);
                Lights?.Print(sb);
                Miscellaneous?.Print(sb);
                Statics?.Print(sb);
                Grasses?.Print(sb);
                Trees?.Print(sb);
                Flora?.Print(sb);
                Furniture?.Print(sb);
                Weapons?.Print(sb);
                Ammunitions?.Print(sb);
                Npcs?.Print(sb);
                Creatures?.Print(sb);
                LeveledCreatures?.Print(sb);
                SoulGems?.Print(sb);
                Keys?.Print(sb);
                Potions?.Print(sb);
                Subspaces?.Print(sb);
                SigilStones?.Print(sb);
                LeveledItems?.Print(sb);
                Weathers?.Print(sb);
                Climates?.Print(sb);
                Regions?.Print(sb);
                Cells?.Print(sb);
                Worldspaces?.Print(sb);
                DialogTopics?.Print(sb);
                Quests?.Print(sb);
                IdleAnimations?.Print(sb);
                AIPackages?.Print(sb);
                CombatStyles?.Print(sb);
                LoadScreens?.Print(sb);
                LeveledSpells?.Print(sb);
                AnimatedObjects?.Print(sb);
                Waters?.Print(sb);
                EffectShaders?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.Globals = this.Globals.Combine(rhs.Globals, (l, r) => l.Combine(r));
                ret.Classes = this.Classes.Combine(rhs.Classes, (l, r) => l.Combine(r));
                ret.Factions = this.Factions.Combine(rhs.Factions, (l, r) => l.Combine(r));
                ret.Hairs = this.Hairs.Combine(rhs.Hairs, (l, r) => l.Combine(r));
                ret.Eyes = this.Eyes.Combine(rhs.Eyes, (l, r) => l.Combine(r));
                ret.Races = this.Races.Combine(rhs.Races, (l, r) => l.Combine(r));
                ret.Sounds = this.Sounds.Combine(rhs.Sounds, (l, r) => l.Combine(r));
                ret.Skills = this.Skills.Combine(rhs.Skills, (l, r) => l.Combine(r));
                ret.MagicEffects = this.MagicEffects.Combine(rhs.MagicEffects, (l, r) => l.Combine(r));
                ret.Scripts = this.Scripts.Combine(rhs.Scripts, (l, r) => l.Combine(r));
                ret.LandTextures = this.LandTextures.Combine(rhs.LandTextures, (l, r) => l.Combine(r));
                ret.Enchantments = this.Enchantments.Combine(rhs.Enchantments, (l, r) => l.Combine(r));
                ret.Spells = this.Spells.Combine(rhs.Spells, (l, r) => l.Combine(r));
                ret.Birthsigns = this.Birthsigns.Combine(rhs.Birthsigns, (l, r) => l.Combine(r));
                ret.Activators = this.Activators.Combine(rhs.Activators, (l, r) => l.Combine(r));
                ret.AlchemicalApparatus = this.AlchemicalApparatus.Combine(rhs.AlchemicalApparatus, (l, r) => l.Combine(r));
                ret.Armors = this.Armors.Combine(rhs.Armors, (l, r) => l.Combine(r));
                ret.Books = this.Books.Combine(rhs.Books, (l, r) => l.Combine(r));
                ret.Clothes = this.Clothes.Combine(rhs.Clothes, (l, r) => l.Combine(r));
                ret.Containers = this.Containers.Combine(rhs.Containers, (l, r) => l.Combine(r));
                ret.Doors = this.Doors.Combine(rhs.Doors, (l, r) => l.Combine(r));
                ret.Ingredients = this.Ingredients.Combine(rhs.Ingredients, (l, r) => l.Combine(r));
                ret.Lights = this.Lights.Combine(rhs.Lights, (l, r) => l.Combine(r));
                ret.Miscellaneous = this.Miscellaneous.Combine(rhs.Miscellaneous, (l, r) => l.Combine(r));
                ret.Statics = this.Statics.Combine(rhs.Statics, (l, r) => l.Combine(r));
                ret.Grasses = this.Grasses.Combine(rhs.Grasses, (l, r) => l.Combine(r));
                ret.Trees = this.Trees.Combine(rhs.Trees, (l, r) => l.Combine(r));
                ret.Flora = this.Flora.Combine(rhs.Flora, (l, r) => l.Combine(r));
                ret.Furniture = this.Furniture.Combine(rhs.Furniture, (l, r) => l.Combine(r));
                ret.Weapons = this.Weapons.Combine(rhs.Weapons, (l, r) => l.Combine(r));
                ret.Ammunitions = this.Ammunitions.Combine(rhs.Ammunitions, (l, r) => l.Combine(r));
                ret.Npcs = this.Npcs.Combine(rhs.Npcs, (l, r) => l.Combine(r));
                ret.Creatures = this.Creatures.Combine(rhs.Creatures, (l, r) => l.Combine(r));
                ret.LeveledCreatures = this.LeveledCreatures.Combine(rhs.LeveledCreatures, (l, r) => l.Combine(r));
                ret.SoulGems = this.SoulGems.Combine(rhs.SoulGems, (l, r) => l.Combine(r));
                ret.Keys = this.Keys.Combine(rhs.Keys, (l, r) => l.Combine(r));
                ret.Potions = this.Potions.Combine(rhs.Potions, (l, r) => l.Combine(r));
                ret.Subspaces = this.Subspaces.Combine(rhs.Subspaces, (l, r) => l.Combine(r));
                ret.SigilStones = this.SigilStones.Combine(rhs.SigilStones, (l, r) => l.Combine(r));
                ret.LeveledItems = this.LeveledItems.Combine(rhs.LeveledItems, (l, r) => l.Combine(r));
                ret.Weathers = this.Weathers.Combine(rhs.Weathers, (l, r) => l.Combine(r));
                ret.Climates = this.Climates.Combine(rhs.Climates, (l, r) => l.Combine(r));
                ret.Regions = this.Regions.Combine(rhs.Regions, (l, r) => l.Combine(r));
                ret.Cells = this.Cells.Combine(rhs.Cells, (l, r) => l.Combine(r));
                ret.Worldspaces = this.Worldspaces.Combine(rhs.Worldspaces, (l, r) => l.Combine(r));
                ret.DialogTopics = this.DialogTopics.Combine(rhs.DialogTopics, (l, r) => l.Combine(r));
                ret.Quests = this.Quests.Combine(rhs.Quests, (l, r) => l.Combine(r));
                ret.IdleAnimations = this.IdleAnimations.Combine(rhs.IdleAnimations, (l, r) => l.Combine(r));
                ret.AIPackages = this.AIPackages.Combine(rhs.AIPackages, (l, r) => l.Combine(r));
                ret.CombatStyles = this.CombatStyles.Combine(rhs.CombatStyles, (l, r) => l.Combine(r));
                ret.LoadScreens = this.LoadScreens.Combine(rhs.LoadScreens, (l, r) => l.Combine(r));
                ret.LeveledSpells = this.LeveledSpells.Combine(rhs.LeveledSpells, (l, r) => l.Combine(r));
                ret.AnimatedObjects = this.AnimatedObjects.Combine(rhs.AnimatedObjects, (l, r) => l.Combine(r));
                ret.Waters = this.Waters.Combine(rhs.Waters, (l, r) => l.Combine(r));
                ret.EffectShaders = this.EffectShaders.Combine(rhs.EffectShaders, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public OblivionModHeader.TranslationMask? ModHeader;
            public OblivionGroup.TranslationMask<GameSetting.TranslationMask>? GameSettings;
            public OblivionGroup.TranslationMask<Global.TranslationMask>? Globals;
            public OblivionGroup.TranslationMask<Class.TranslationMask>? Classes;
            public OblivionGroup.TranslationMask<Faction.TranslationMask>? Factions;
            public OblivionGroup.TranslationMask<Hair.TranslationMask>? Hairs;
            public OblivionGroup.TranslationMask<Eye.TranslationMask>? Eyes;
            public OblivionGroup.TranslationMask<Race.TranslationMask>? Races;
            public OblivionGroup.TranslationMask<Sound.TranslationMask>? Sounds;
            public OblivionGroup.TranslationMask<SkillRecord.TranslationMask>? Skills;
            public OblivionGroup.TranslationMask<MagicEffect.TranslationMask>? MagicEffects;
            public OblivionGroup.TranslationMask<Script.TranslationMask>? Scripts;
            public OblivionGroup.TranslationMask<LandTexture.TranslationMask>? LandTextures;
            public OblivionGroup.TranslationMask<Enchantment.TranslationMask>? Enchantments;
            public OblivionGroup.TranslationMask<Spell.TranslationMask>? Spells;
            public OblivionGroup.TranslationMask<Birthsign.TranslationMask>? Birthsigns;
            public OblivionGroup.TranslationMask<Activator.TranslationMask>? Activators;
            public OblivionGroup.TranslationMask<AlchemicalApparatus.TranslationMask>? AlchemicalApparatus;
            public OblivionGroup.TranslationMask<Armor.TranslationMask>? Armors;
            public OblivionGroup.TranslationMask<Book.TranslationMask>? Books;
            public OblivionGroup.TranslationMask<Clothing.TranslationMask>? Clothes;
            public OblivionGroup.TranslationMask<Container.TranslationMask>? Containers;
            public OblivionGroup.TranslationMask<Door.TranslationMask>? Doors;
            public OblivionGroup.TranslationMask<Ingredient.TranslationMask>? Ingredients;
            public OblivionGroup.TranslationMask<Light.TranslationMask>? Lights;
            public OblivionGroup.TranslationMask<Miscellaneous.TranslationMask>? Miscellaneous;
            public OblivionGroup.TranslationMask<Static.TranslationMask>? Statics;
            public OblivionGroup.TranslationMask<Grass.TranslationMask>? Grasses;
            public OblivionGroup.TranslationMask<Tree.TranslationMask>? Trees;
            public OblivionGroup.TranslationMask<Flora.TranslationMask>? Flora;
            public OblivionGroup.TranslationMask<Furniture.TranslationMask>? Furniture;
            public OblivionGroup.TranslationMask<Weapon.TranslationMask>? Weapons;
            public OblivionGroup.TranslationMask<Ammunition.TranslationMask>? Ammunitions;
            public OblivionGroup.TranslationMask<Npc.TranslationMask>? Npcs;
            public OblivionGroup.TranslationMask<Creature.TranslationMask>? Creatures;
            public OblivionGroup.TranslationMask<LeveledCreature.TranslationMask>? LeveledCreatures;
            public OblivionGroup.TranslationMask<SoulGem.TranslationMask>? SoulGems;
            public OblivionGroup.TranslationMask<Key.TranslationMask>? Keys;
            public OblivionGroup.TranslationMask<Potion.TranslationMask>? Potions;
            public OblivionGroup.TranslationMask<Subspace.TranslationMask>? Subspaces;
            public OblivionGroup.TranslationMask<SigilStone.TranslationMask>? SigilStones;
            public OblivionGroup.TranslationMask<LeveledItem.TranslationMask>? LeveledItems;
            public OblivionGroup.TranslationMask<Weather.TranslationMask>? Weathers;
            public OblivionGroup.TranslationMask<Climate.TranslationMask>? Climates;
            public OblivionGroup.TranslationMask<Region.TranslationMask>? Regions;
            public OblivionListGroup.TranslationMask<CellBlock.TranslationMask>? Cells;
            public OblivionGroup.TranslationMask<Worldspace.TranslationMask>? Worldspaces;
            public OblivionGroup.TranslationMask<DialogTopic.TranslationMask>? DialogTopics;
            public OblivionGroup.TranslationMask<Quest.TranslationMask>? Quests;
            public OblivionGroup.TranslationMask<IdleAnimation.TranslationMask>? IdleAnimations;
            public OblivionGroup.TranslationMask<AIPackage.TranslationMask>? AIPackages;
            public OblivionGroup.TranslationMask<CombatStyle.TranslationMask>? CombatStyles;
            public OblivionGroup.TranslationMask<LoadScreen.TranslationMask>? LoadScreens;
            public OblivionGroup.TranslationMask<LeveledSpell.TranslationMask>? LeveledSpells;
            public OblivionGroup.TranslationMask<AnimatedObject.TranslationMask>? AnimatedObjects;
            public OblivionGroup.TranslationMask<Water.TranslationMask>? Waters;
            public OblivionGroup.TranslationMask<EffectShader.TranslationMask>? EffectShaders;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader != null ? ModHeader.OnOverall : DefaultOn, ModHeader?.GetCrystal()));
                ret.Add((GameSettings != null ? GameSettings.OnOverall : DefaultOn, GameSettings?.GetCrystal()));
                ret.Add((Globals != null ? Globals.OnOverall : DefaultOn, Globals?.GetCrystal()));
                ret.Add((Classes != null ? Classes.OnOverall : DefaultOn, Classes?.GetCrystal()));
                ret.Add((Factions != null ? Factions.OnOverall : DefaultOn, Factions?.GetCrystal()));
                ret.Add((Hairs != null ? Hairs.OnOverall : DefaultOn, Hairs?.GetCrystal()));
                ret.Add((Eyes != null ? Eyes.OnOverall : DefaultOn, Eyes?.GetCrystal()));
                ret.Add((Races != null ? Races.OnOverall : DefaultOn, Races?.GetCrystal()));
                ret.Add((Sounds != null ? Sounds.OnOverall : DefaultOn, Sounds?.GetCrystal()));
                ret.Add((Skills != null ? Skills.OnOverall : DefaultOn, Skills?.GetCrystal()));
                ret.Add((MagicEffects != null ? MagicEffects.OnOverall : DefaultOn, MagicEffects?.GetCrystal()));
                ret.Add((Scripts != null ? Scripts.OnOverall : DefaultOn, Scripts?.GetCrystal()));
                ret.Add((LandTextures != null ? LandTextures.OnOverall : DefaultOn, LandTextures?.GetCrystal()));
                ret.Add((Enchantments != null ? Enchantments.OnOverall : DefaultOn, Enchantments?.GetCrystal()));
                ret.Add((Spells != null ? Spells.OnOverall : DefaultOn, Spells?.GetCrystal()));
                ret.Add((Birthsigns != null ? Birthsigns.OnOverall : DefaultOn, Birthsigns?.GetCrystal()));
                ret.Add((Activators != null ? Activators.OnOverall : DefaultOn, Activators?.GetCrystal()));
                ret.Add((AlchemicalApparatus != null ? AlchemicalApparatus.OnOverall : DefaultOn, AlchemicalApparatus?.GetCrystal()));
                ret.Add((Armors != null ? Armors.OnOverall : DefaultOn, Armors?.GetCrystal()));
                ret.Add((Books != null ? Books.OnOverall : DefaultOn, Books?.GetCrystal()));
                ret.Add((Clothes != null ? Clothes.OnOverall : DefaultOn, Clothes?.GetCrystal()));
                ret.Add((Containers != null ? Containers.OnOverall : DefaultOn, Containers?.GetCrystal()));
                ret.Add((Doors != null ? Doors.OnOverall : DefaultOn, Doors?.GetCrystal()));
                ret.Add((Ingredients != null ? Ingredients.OnOverall : DefaultOn, Ingredients?.GetCrystal()));
                ret.Add((Lights != null ? Lights.OnOverall : DefaultOn, Lights?.GetCrystal()));
                ret.Add((Miscellaneous != null ? Miscellaneous.OnOverall : DefaultOn, Miscellaneous?.GetCrystal()));
                ret.Add((Statics != null ? Statics.OnOverall : DefaultOn, Statics?.GetCrystal()));
                ret.Add((Grasses != null ? Grasses.OnOverall : DefaultOn, Grasses?.GetCrystal()));
                ret.Add((Trees != null ? Trees.OnOverall : DefaultOn, Trees?.GetCrystal()));
                ret.Add((Flora != null ? Flora.OnOverall : DefaultOn, Flora?.GetCrystal()));
                ret.Add((Furniture != null ? Furniture.OnOverall : DefaultOn, Furniture?.GetCrystal()));
                ret.Add((Weapons != null ? Weapons.OnOverall : DefaultOn, Weapons?.GetCrystal()));
                ret.Add((Ammunitions != null ? Ammunitions.OnOverall : DefaultOn, Ammunitions?.GetCrystal()));
                ret.Add((Npcs != null ? Npcs.OnOverall : DefaultOn, Npcs?.GetCrystal()));
                ret.Add((Creatures != null ? Creatures.OnOverall : DefaultOn, Creatures?.GetCrystal()));
                ret.Add((LeveledCreatures != null ? LeveledCreatures.OnOverall : DefaultOn, LeveledCreatures?.GetCrystal()));
                ret.Add((SoulGems != null ? SoulGems.OnOverall : DefaultOn, SoulGems?.GetCrystal()));
                ret.Add((Keys != null ? Keys.OnOverall : DefaultOn, Keys?.GetCrystal()));
                ret.Add((Potions != null ? Potions.OnOverall : DefaultOn, Potions?.GetCrystal()));
                ret.Add((Subspaces != null ? Subspaces.OnOverall : DefaultOn, Subspaces?.GetCrystal()));
                ret.Add((SigilStones != null ? SigilStones.OnOverall : DefaultOn, SigilStones?.GetCrystal()));
                ret.Add((LeveledItems != null ? LeveledItems.OnOverall : DefaultOn, LeveledItems?.GetCrystal()));
                ret.Add((Weathers != null ? Weathers.OnOverall : DefaultOn, Weathers?.GetCrystal()));
                ret.Add((Climates != null ? Climates.OnOverall : DefaultOn, Climates?.GetCrystal()));
                ret.Add((Regions != null ? Regions.OnOverall : DefaultOn, Regions?.GetCrystal()));
                ret.Add((Cells != null ? Cells.OnOverall : DefaultOn, Cells?.GetCrystal()));
                ret.Add((Worldspaces != null ? Worldspaces.OnOverall : DefaultOn, Worldspaces?.GetCrystal()));
                ret.Add((DialogTopics != null ? DialogTopics.OnOverall : DefaultOn, DialogTopics?.GetCrystal()));
                ret.Add((Quests != null ? Quests.OnOverall : DefaultOn, Quests?.GetCrystal()));
                ret.Add((IdleAnimations != null ? IdleAnimations.OnOverall : DefaultOn, IdleAnimations?.GetCrystal()));
                ret.Add((AIPackages != null ? AIPackages.OnOverall : DefaultOn, AIPackages?.GetCrystal()));
                ret.Add((CombatStyles != null ? CombatStyles.OnOverall : DefaultOn, CombatStyles?.GetCrystal()));
                ret.Add((LoadScreens != null ? LoadScreens.OnOverall : DefaultOn, LoadScreens?.GetCrystal()));
                ret.Add((LeveledSpells != null ? LeveledSpells.OnOverall : DefaultOn, LeveledSpells?.GetCrystal()));
                ret.Add((AnimatedObjects != null ? AnimatedObjects.OnOverall : DefaultOn, AnimatedObjects?.GetCrystal()));
                ret.Add((Waters != null ? Waters.OnOverall : DefaultOn, Waters?.GetCrystal()));
                ret.Add((EffectShaders != null ? EffectShaders.OnOverall : DefaultOn, EffectShaders?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public OblivionRelease OblivionRelease { get; }
        public override GameRelease GameRelease => OblivionRelease.ToGameRelease();
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        IGroup<T>? IMod.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroup? IMod.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        uint IModGetter.GetRecordCount() => this.GetRecordCount();
        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => OblivionModMixIn.GetEqualsMask(this, (IOblivionModGetter)rhs, include);
        public override bool CanUseLocalization => false;
        public override bool UsingLocalization
        {
            get => false;
            set => throw new ArgumentException("Tried to set localization flag on unsupported mod type");
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<MasterReference> IMod.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IMod.NextFormID
        {
            get => this.ModHeader.Stats.NextFormID;
            set => this.ModHeader.Stats.NextFormID = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IModGetter.NextFormID => this.ModHeader.Stats.NextFormID;
        /// <param name="modKey">ModKey to assign to the mod</param>
        /// <param name="release">Release to assign to the mod</param>
        /// <param name="headerVersion">Header version to assign to the mod.  Default value is latest header version the game supports</param>
        /// <param name="forceUseLowerFormIDRanges">Default value of false, which will not use lower FormID ranges from 1-X.  A null value will refer to header version + game release to determine if it should be allowed.  True will force it to always use FormIDs 1-X</param>
        public OblivionMod(
            ModKey modKey,
            OblivionRelease release,
            float? headerVersion = null,
            bool? forceUseLowerFormIDRanges = false)
            : base(modKey)
        {
            if (headerVersion != null)
            {
                this.ModHeader.Stats.Version = headerVersion.Value;
            }
            this.OblivionRelease = release;
            this.ModHeader.Stats.NextFormID = GetDefaultInitialNextFormID(forceUseLowerFormIDRanges: forceUseLowerFormIDRanges);
            _GameSettings_Object = new OblivionGroup<GameSetting>(this);
            _Globals_Object = new OblivionGroup<Global>(this);
            _Classes_Object = new OblivionGroup<Class>(this);
            _Factions_Object = new OblivionGroup<Faction>(this);
            _Hairs_Object = new OblivionGroup<Hair>(this);
            _Eyes_Object = new OblivionGroup<Eye>(this);
            _Races_Object = new OblivionGroup<Race>(this);
            _Sounds_Object = new OblivionGroup<Sound>(this);
            _Skills_Object = new OblivionGroup<SkillRecord>(this);
            _MagicEffects_Object = new OblivionGroup<MagicEffect>(this);
            _Scripts_Object = new OblivionGroup<Script>(this);
            _LandTextures_Object = new OblivionGroup<LandTexture>(this);
            _Enchantments_Object = new OblivionGroup<Enchantment>(this);
            _Spells_Object = new OblivionGroup<Spell>(this);
            _Birthsigns_Object = new OblivionGroup<Birthsign>(this);
            _Activators_Object = new OblivionGroup<Activator>(this);
            _AlchemicalApparatus_Object = new OblivionGroup<AlchemicalApparatus>(this);
            _Armors_Object = new OblivionGroup<Armor>(this);
            _Books_Object = new OblivionGroup<Book>(this);
            _Clothes_Object = new OblivionGroup<Clothing>(this);
            _Containers_Object = new OblivionGroup<Container>(this);
            _Doors_Object = new OblivionGroup<Door>(this);
            _Ingredients_Object = new OblivionGroup<Ingredient>(this);
            _Lights_Object = new OblivionGroup<Light>(this);
            _Miscellaneous_Object = new OblivionGroup<Miscellaneous>(this);
            _Statics_Object = new OblivionGroup<Static>(this);
            _Grasses_Object = new OblivionGroup<Grass>(this);
            _Trees_Object = new OblivionGroup<Tree>(this);
            _Flora_Object = new OblivionGroup<Flora>(this);
            _Furniture_Object = new OblivionGroup<Furniture>(this);
            _Weapons_Object = new OblivionGroup<Weapon>(this);
            _Ammunitions_Object = new OblivionGroup<Ammunition>(this);
            _Npcs_Object = new OblivionGroup<Npc>(this);
            _Creatures_Object = new OblivionGroup<Creature>(this);
            _LeveledCreatures_Object = new OblivionGroup<LeveledCreature>(this);
            _SoulGems_Object = new OblivionGroup<SoulGem>(this);
            _Keys_Object = new OblivionGroup<Key>(this);
            _Potions_Object = new OblivionGroup<Potion>(this);
            _Subspaces_Object = new OblivionGroup<Subspace>(this);
            _SigilStones_Object = new OblivionGroup<SigilStone>(this);
            _LeveledItems_Object = new OblivionGroup<LeveledItem>(this);
            _Weathers_Object = new OblivionGroup<Weather>(this);
            _Climates_Object = new OblivionGroup<Climate>(this);
            _Regions_Object = new OblivionGroup<Region>(this);
            _Worldspaces_Object = new OblivionGroup<Worldspace>(this);
            _DialogTopics_Object = new OblivionGroup<DialogTopic>(this);
            _Quests_Object = new OblivionGroup<Quest>(this);
            _IdleAnimations_Object = new OblivionGroup<IdleAnimation>(this);
            _AIPackages_Object = new OblivionGroup<AIPackage>(this);
            _CombatStyles_Object = new OblivionGroup<CombatStyle>(this);
            _LoadScreens_Object = new OblivionGroup<LoadScreen>(this);
            _LeveledSpells_Object = new OblivionGroup<LeveledSpell>(this);
            _AnimatedObjects_Object = new OblivionGroup<AnimatedObject>(this);
            _Waters_Object = new OblivionGroup<Water>(this);
            _EffectShaders_Object = new OblivionGroup<EffectShader>(this);
            CustomCtor();
        }
        public void AddRecords(
            OblivionMod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(rhsMod.Classes.RecordCache.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(rhsMod.Factions.RecordCache.Items);
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.RecordCache.Set(rhsMod.Hairs.RecordCache.Items);
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.RecordCache.Set(rhsMod.Eyes.RecordCache.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(rhsMod.Races.RecordCache.Items);
            }
            if (mask?.Sounds ?? true)
            {
                this.Sounds.RecordCache.Set(rhsMod.Sounds.RecordCache.Items);
            }
            if (mask?.Skills ?? true)
            {
                this.Skills.RecordCache.Set(rhsMod.Skills.RecordCache.Items);
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.RecordCache.Set(rhsMod.MagicEffects.RecordCache.Items);
            }
            if (mask?.Scripts ?? true)
            {
                this.Scripts.RecordCache.Set(rhsMod.Scripts.RecordCache.Items);
            }
            if (mask?.LandTextures ?? true)
            {
                this.LandTextures.RecordCache.Set(rhsMod.LandTextures.RecordCache.Items);
            }
            if (mask?.Enchantments ?? true)
            {
                this.Enchantments.RecordCache.Set(rhsMod.Enchantments.RecordCache.Items);
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.RecordCache.Set(rhsMod.Spells.RecordCache.Items);
            }
            if (mask?.Birthsigns ?? true)
            {
                this.Birthsigns.RecordCache.Set(rhsMod.Birthsigns.RecordCache.Items);
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.RecordCache.Set(rhsMod.Activators.RecordCache.Items);
            }
            if (mask?.AlchemicalApparatus ?? true)
            {
                this.AlchemicalApparatus.RecordCache.Set(rhsMod.AlchemicalApparatus.RecordCache.Items);
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.RecordCache.Set(rhsMod.Armors.RecordCache.Items);
            }
            if (mask?.Books ?? true)
            {
                this.Books.RecordCache.Set(rhsMod.Books.RecordCache.Items);
            }
            if (mask?.Clothes ?? true)
            {
                this.Clothes.RecordCache.Set(rhsMod.Clothes.RecordCache.Items);
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.RecordCache.Set(rhsMod.Containers.RecordCache.Items);
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.RecordCache.Set(rhsMod.Doors.RecordCache.Items);
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.RecordCache.Set(rhsMod.Ingredients.RecordCache.Items);
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.RecordCache.Set(rhsMod.Lights.RecordCache.Items);
            }
            if (mask?.Miscellaneous ?? true)
            {
                this.Miscellaneous.RecordCache.Set(rhsMod.Miscellaneous.RecordCache.Items);
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.RecordCache.Set(rhsMod.Statics.RecordCache.Items);
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.RecordCache.Set(rhsMod.Grasses.RecordCache.Items);
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.RecordCache.Set(rhsMod.Trees.RecordCache.Items);
            }
            if (mask?.Flora ?? true)
            {
                this.Flora.RecordCache.Set(rhsMod.Flora.RecordCache.Items);
            }
            if (mask?.Furniture ?? true)
            {
                this.Furniture.RecordCache.Set(rhsMod.Furniture.RecordCache.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(rhsMod.Weapons.RecordCache.Items);
            }
            if (mask?.Ammunitions ?? true)
            {
                this.Ammunitions.RecordCache.Set(rhsMod.Ammunitions.RecordCache.Items);
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(rhsMod.Npcs.RecordCache.Items);
            }
            if (mask?.Creatures ?? true)
            {
                this.Creatures.RecordCache.Set(rhsMod.Creatures.RecordCache.Items);
            }
            if (mask?.LeveledCreatures ?? true)
            {
                this.LeveledCreatures.RecordCache.Set(rhsMod.LeveledCreatures.RecordCache.Items);
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.RecordCache.Set(rhsMod.SoulGems.RecordCache.Items);
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.RecordCache.Set(rhsMod.Keys.RecordCache.Items);
            }
            if (mask?.Potions ?? true)
            {
                this.Potions.RecordCache.Set(rhsMod.Potions.RecordCache.Items);
            }
            if (mask?.Subspaces ?? true)
            {
                this.Subspaces.RecordCache.Set(rhsMod.Subspaces.RecordCache.Items);
            }
            if (mask?.SigilStones ?? true)
            {
                this.SigilStones.RecordCache.Set(rhsMod.SigilStones.RecordCache.Items);
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.RecordCache.Set(rhsMod.LeveledItems.RecordCache.Items);
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.RecordCache.Set(rhsMod.Weathers.RecordCache.Items);
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.RecordCache.Set(rhsMod.Climates.RecordCache.Items);
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.RecordCache.Set(rhsMod.Regions.RecordCache.Items);
            }
            if (mask?.Cells ?? true)
            {
                if (rhsMod.Cells.Records.Count > 0)
                {
                    throw new NotImplementedException("Cell additions need implementing");
                }
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.RecordCache.Set(rhsMod.Worldspaces.RecordCache.Items);
            }
            if (mask?.DialogTopics ?? true)
            {
                this.DialogTopics.RecordCache.Set(rhsMod.DialogTopics.RecordCache.Items);
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.RecordCache.Set(rhsMod.Quests.RecordCache.Items);
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.RecordCache.Set(rhsMod.IdleAnimations.RecordCache.Items);
            }
            if (mask?.AIPackages ?? true)
            {
                this.AIPackages.RecordCache.Set(rhsMod.AIPackages.RecordCache.Items);
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.RecordCache.Set(rhsMod.CombatStyles.RecordCache.Items);
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.RecordCache.Set(rhsMod.LoadScreens.RecordCache.Items);
            }
            if (mask?.LeveledSpells ?? true)
            {
                this.LeveledSpells.RecordCache.Set(rhsMod.LeveledSpells.RecordCache.Items);
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.RecordCache.Set(rhsMod.AnimatedObjects.RecordCache.Items);
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.RecordCache.Set(rhsMod.Waters.RecordCache.Items);
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.RecordCache.Set(rhsMod.EffectShaders.RecordCache.Items);
            }
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = this.GetRecordCount();
        }

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => OblivionModCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => OblivionModSetterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IOblivionMod, IOblivionModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IOblivionMod, IOblivionModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => OblivionModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks() => OblivionModSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => OblivionModSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => OblivionModSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        #region Binary Create
        public static OblivionMod CreateFromBinary(
            ModPath path,
            OblivionRelease release,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static OblivionMod CreateFromBinary(
            ModPath path,
            OblivionRelease release,
            ErrorMaskBuilder? errorMask,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static OblivionMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            OblivionRelease release,
            RecordTypeInfoCacheReader infoCache,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        public static OblivionMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            OblivionRelease release,
            RecordTypeInfoCacheReader infoCache,
            ErrorMaskBuilder? errorMask,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        #endregion

        public static IOblivionModDisposableGetter CreateFromBinaryOverlay(
            ModPath path,
            OblivionRelease release,
            BinaryReadParameters? param = null)
        {
            return OblivionModBinaryOverlay.OblivionModFactory(
                path: path,
                release: release,
                param: param);
        }

        public static IOblivionModDisposableGetter CreateFromBinaryOverlay(
            Stream stream,
            OblivionRelease release,
            ModKey modKey,
            BinaryReadParameters? param = null)
        {
            param ??= BinaryReadParameters.Default;
            var meta = ParsingMeta.Factory(param, release.ToGameRelease(), modKey, stream);
            return OblivionModBinaryOverlay.OblivionModFactory(
                stream: new MutagenBinaryReadStream(stream, meta),
                modKey: modKey,
                release: release,
                shouldDispose: false);
        }

        public static OblivionMod CreateFromBinary(
            MutagenFrame frame,
            OblivionRelease release,
            GroupMask? importMask = null)
        {
            try
            {
                var ret = new OblivionMod(
                    modKey: frame.MetaData.ModKey,
                    release: release);
                ((OblivionModSetterCommon)((IOblivionModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                    item: ret,
                    frame: frame,
                    release: release,
                    importMask: importMask);
                return ret;
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, frame.MetaData.ModKey);
                throw;
            }
        }

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static OblivionMod GetNew()
        {
            return new OblivionMod();
        }

    }
    #endregion

    #region Interface
    public partial interface IOblivionMod :
        IAssetLinkContainer,
        IContextMod<IOblivionMod, IOblivionModGetter>,
        IFormLinkContainer,
        ILoquiObjectSetter<IOblivionMod>,
        IMajorRecordEnumerable,
        IMod,
        IOblivionModGetter
    {
        new OblivionModHeader ModHeader { get; }
        new OblivionGroup<GameSetting> GameSettings { get; }
        new OblivionGroup<Global> Globals { get; }
        new OblivionGroup<Class> Classes { get; }
        new OblivionGroup<Faction> Factions { get; }
        new OblivionGroup<Hair> Hairs { get; }
        new OblivionGroup<Eye> Eyes { get; }
        new OblivionGroup<Race> Races { get; }
        new OblivionGroup<Sound> Sounds { get; }
        new OblivionGroup<SkillRecord> Skills { get; }
        new OblivionGroup<MagicEffect> MagicEffects { get; }
        new OblivionGroup<Script> Scripts { get; }
        new OblivionGroup<LandTexture> LandTextures { get; }
        new OblivionGroup<Enchantment> Enchantments { get; }
        new OblivionGroup<Spell> Spells { get; }
        new OblivionGroup<Birthsign> Birthsigns { get; }
        new OblivionGroup<Activator> Activators { get; }
        new OblivionGroup<AlchemicalApparatus> AlchemicalApparatus { get; }
        new OblivionGroup<Armor> Armors { get; }
        new OblivionGroup<Book> Books { get; }
        new OblivionGroup<Clothing> Clothes { get; }
        new OblivionGroup<Container> Containers { get; }
        new OblivionGroup<Door> Doors { get; }
        new OblivionGroup<Ingredient> Ingredients { get; }
        new OblivionGroup<Light> Lights { get; }
        new OblivionGroup<Miscellaneous> Miscellaneous { get; }
        new OblivionGroup<Static> Statics { get; }
        new OblivionGroup<Grass> Grasses { get; }
        new OblivionGroup<Tree> Trees { get; }
        new OblivionGroup<Flora> Flora { get; }
        new OblivionGroup<Furniture> Furniture { get; }
        new OblivionGroup<Weapon> Weapons { get; }
        new OblivionGroup<Ammunition> Ammunitions { get; }
        new OblivionGroup<Npc> Npcs { get; }
        new OblivionGroup<Creature> Creatures { get; }
        new OblivionGroup<LeveledCreature> LeveledCreatures { get; }
        new OblivionGroup<SoulGem> SoulGems { get; }
        new OblivionGroup<Key> Keys { get; }
        new OblivionGroup<Potion> Potions { get; }
        new OblivionGroup<Subspace> Subspaces { get; }
        new OblivionGroup<SigilStone> SigilStones { get; }
        new OblivionGroup<LeveledItem> LeveledItems { get; }
        new OblivionGroup<Weather> Weathers { get; }
        new OblivionGroup<Climate> Climates { get; }
        new OblivionGroup<Region> Regions { get; }
        new OblivionListGroup<CellBlock> Cells { get; }
        new OblivionGroup<Worldspace> Worldspaces { get; }
        new OblivionGroup<DialogTopic> DialogTopics { get; }
        new OblivionGroup<Quest> Quests { get; }
        new OblivionGroup<IdleAnimation> IdleAnimations { get; }
        new OblivionGroup<AIPackage> AIPackages { get; }
        new OblivionGroup<CombatStyle> CombatStyles { get; }
        new OblivionGroup<LoadScreen> LoadScreens { get; }
        new OblivionGroup<LeveledSpell> LeveledSpells { get; }
        new OblivionGroup<AnimatedObject> AnimatedObjects { get; }
        new OblivionGroup<Water> Waters { get; }
        new OblivionGroup<EffectShader> EffectShaders { get; }
    }

    public partial interface IOblivionModGetter :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IContextGetterMod<IOblivionMod, IOblivionModGetter>,
        IFormLinkContainerGetter,
        ILoquiObject<IOblivionModGetter>,
        IMajorRecordContextEnumerable<IOblivionMod, IOblivionModGetter>,
        IMajorRecordGetterEnumerable,
        IModGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => OblivionMod_Registration.Instance;
        IOblivionModHeaderGetter ModHeader { get; }
        IOblivionGroupGetter<IGameSettingGetter> GameSettings { get; }
        IOblivionGroupGetter<IGlobalGetter> Globals { get; }
        IOblivionGroupGetter<IClassGetter> Classes { get; }
        IOblivionGroupGetter<IFactionGetter> Factions { get; }
        IOblivionGroupGetter<IHairGetter> Hairs { get; }
        IOblivionGroupGetter<IEyeGetter> Eyes { get; }
        IOblivionGroupGetter<IRaceGetter> Races { get; }
        IOblivionGroupGetter<ISoundGetter> Sounds { get; }
        IOblivionGroupGetter<ISkillRecordGetter> Skills { get; }
        IOblivionGroupGetter<IMagicEffectGetter> MagicEffects { get; }
        IOblivionGroupGetter<IScriptGetter> Scripts { get; }
        IOblivionGroupGetter<ILandTextureGetter> LandTextures { get; }
        IOblivionGroupGetter<IEnchantmentGetter> Enchantments { get; }
        IOblivionGroupGetter<ISpellGetter> Spells { get; }
        IOblivionGroupGetter<IBirthsignGetter> Birthsigns { get; }
        IOblivionGroupGetter<IActivatorGetter> Activators { get; }
        IOblivionGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatus { get; }
        IOblivionGroupGetter<IArmorGetter> Armors { get; }
        IOblivionGroupGetter<IBookGetter> Books { get; }
        IOblivionGroupGetter<IClothingGetter> Clothes { get; }
        IOblivionGroupGetter<IContainerGetter> Containers { get; }
        IOblivionGroupGetter<IDoorGetter> Doors { get; }
        IOblivionGroupGetter<IIngredientGetter> Ingredients { get; }
        IOblivionGroupGetter<ILightGetter> Lights { get; }
        IOblivionGroupGetter<IMiscellaneousGetter> Miscellaneous { get; }
        IOblivionGroupGetter<IStaticGetter> Statics { get; }
        IOblivionGroupGetter<IGrassGetter> Grasses { get; }
        IOblivionGroupGetter<ITreeGetter> Trees { get; }
        IOblivionGroupGetter<IFloraGetter> Flora { get; }
        IOblivionGroupGetter<IFurnitureGetter> Furniture { get; }
        IOblivionGroupGetter<IWeaponGetter> Weapons { get; }
        IOblivionGroupGetter<IAmmunitionGetter> Ammunitions { get; }
        IOblivionGroupGetter<INpcGetter> Npcs { get; }
        IOblivionGroupGetter<ICreatureGetter> Creatures { get; }
        IOblivionGroupGetter<ILeveledCreatureGetter> LeveledCreatures { get; }
        IOblivionGroupGetter<ISoulGemGetter> SoulGems { get; }
        IOblivionGroupGetter<IKeyGetter> Keys { get; }
        IOblivionGroupGetter<IPotionGetter> Potions { get; }
        IOblivionGroupGetter<ISubspaceGetter> Subspaces { get; }
        IOblivionGroupGetter<ISigilStoneGetter> SigilStones { get; }
        IOblivionGroupGetter<ILeveledItemGetter> LeveledItems { get; }
        IOblivionGroupGetter<IWeatherGetter> Weathers { get; }
        IOblivionGroupGetter<IClimateGetter> Climates { get; }
        IOblivionGroupGetter<IRegionGetter> Regions { get; }
        IOblivionListGroupGetter<ICellBlockGetter> Cells { get; }
        IOblivionGroupGetter<IWorldspaceGetter> Worldspaces { get; }
        IOblivionGroupGetter<IDialogTopicGetter> DialogTopics { get; }
        IOblivionGroupGetter<IQuestGetter> Quests { get; }
        IOblivionGroupGetter<IIdleAnimationGetter> IdleAnimations { get; }
        IOblivionGroupGetter<IAIPackageGetter> AIPackages { get; }
        IOblivionGroupGetter<ICombatStyleGetter> CombatStyles { get; }
        IOblivionGroupGetter<ILoadScreenGetter> LoadScreens { get; }
        IOblivionGroupGetter<ILeveledSpellGetter> LeveledSpells { get; }
        IOblivionGroupGetter<IAnimatedObjectGetter> AnimatedObjects { get; }
        IOblivionGroupGetter<IWaterGetter> Waters { get; }
        IOblivionGroupGetter<IEffectShaderGetter> EffectShaders { get; }

        #region Mutagen
        OblivionRelease OblivionRelease { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class OblivionModMixIn
    {
        public static void Clear(this IOblivionMod item)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static OblivionMod.Mask<bool> GetEqualsMask(
            this IOblivionModGetter item,
            IOblivionModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IOblivionModGetter item,
            string? name = null,
            OblivionMod.Mask<bool>? printMask = null)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IOblivionModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            OblivionMod.Mask<bool>? printMask = null)
        {
            ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IOblivionModGetter item,
            IOblivionModGetter rhs,
            OblivionMod.TranslationMask? equalsMask = null)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IOblivionMod lhs,
            IOblivionModGetter rhs)
        {
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IOblivionMod lhs,
            IOblivionModGetter rhs,
            OblivionMod.TranslationMask? copyMask = null)
        {
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IOblivionMod lhs,
            IOblivionModGetter rhs,
            out OblivionMod.ErrorMask errorMask,
            OblivionMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = OblivionMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IOblivionMod lhs,
            IOblivionModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static OblivionMod DeepCopy(
            this IOblivionModGetter item,
            OblivionMod.TranslationMask? copyMask = null)
        {
            return ((OblivionModSetterTranslationCommon)((IOblivionModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static OblivionMod DeepCopy(
            this IOblivionModGetter item,
            out OblivionMod.ErrorMask errorMask,
            OblivionMod.TranslationMask? copyMask = null)
        {
            return ((OblivionModSetterTranslationCommon)((IOblivionModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static OblivionMod DeepCopy(
            this IOblivionModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((OblivionModSetterTranslationCommon)((IOblivionModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IGroupGetter<T>? TryGetTopLevelGroup<T>(this IOblivionModGetter obj)
            where T : IMajorRecordGetter
        {
            return (IGroupGetter<T>?)((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroupGetter? TryGetTopLevelGroup(
            this IOblivionModGetter obj,
            Type type)
        {
            return (IGroupGetter?)((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static IGroup<T>? TryGetTopLevelGroup<T>(this IOblivionMod obj)
            where T : IMajorRecord
        {
            return (IGroup<T>?)((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroup? TryGetTopLevelGroup(
            this IOblivionMod obj,
            Type type)
        {
            return (IGroup?)((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static uint GetRecordCount(this IOblivionModGetter item)
        {
            return ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).GetRecordCount(item: item);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this IOblivionModGetter obj)
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IOblivionModGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this IOblivionModGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this IOblivionMod obj)
        {
            return ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IOblivionMod obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this IOblivionMod obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            IEnumerable<FormKey> keys)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            IEnumerable<IFormLinkIdentifier> keys)
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            HashSet<FormKey> keys)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IOblivionMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IOblivionMod obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IOblivionMod obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IOblivionMod obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IOblivionMod obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IOblivionMod obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, TSetter, TGetter>> EnumerateMajorRecordContexts<TSetter, TGetter>(
            this IOblivionModGetter obj,
            ILinkCache linkCache,
            bool throwIfUnknown = true)
            where TSetter : class, IMajorRecordQueryable, TGetter
            where TGetter : class, IMajorRecordQueryableGetter
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: typeof(TGetter),
                throwIfUnknown: throwIfUnknown)
                .Select(m => m.AsType<IOblivionMod, IOblivionModGetter, IMajorRecordQueryable, IMajorRecordQueryableGetter, TSetter, TGetter>())
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IMajorRecordGetter>> EnumerateMajorRecordContexts(this IOblivionModGetter obj)
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: null!)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            this IOblivionModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((OblivionModCommon)((IOblivionModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IOblivionMod item,
            MutagenFrame frame,
            OblivionRelease release,
            GroupMask? importMask = null)
        {
            ((OblivionModSetterCommon)((IOblivionModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                release: release,
                importMask: importMask);
        }

        public static void CopyInFromBinary(
            this IOblivionMod item,
            ModPath path,
            OblivionRelease release,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    CopyInFromBinary(
                        item: item,
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static void CopyInFromBinary(
            this IOblivionMod item,
            Stream stream,
            ModKey modKey,
            OblivionRelease release,
            RecordTypeInfoCacheReader infoCache,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    CopyInFromBinary(
                        item: item,
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    #region Field Index
    internal enum OblivionMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Globals = 2,
        Classes = 3,
        Factions = 4,
        Hairs = 5,
        Eyes = 6,
        Races = 7,
        Sounds = 8,
        Skills = 9,
        MagicEffects = 10,
        Scripts = 11,
        LandTextures = 12,
        Enchantments = 13,
        Spells = 14,
        Birthsigns = 15,
        Activators = 16,
        AlchemicalApparatus = 17,
        Armors = 18,
        Books = 19,
        Clothes = 20,
        Containers = 21,
        Doors = 22,
        Ingredients = 23,
        Lights = 24,
        Miscellaneous = 25,
        Statics = 26,
        Grasses = 27,
        Trees = 28,
        Flora = 29,
        Furniture = 30,
        Weapons = 31,
        Ammunitions = 32,
        Npcs = 33,
        Creatures = 34,
        LeveledCreatures = 35,
        SoulGems = 36,
        Keys = 37,
        Potions = 38,
        Subspaces = 39,
        SigilStones = 40,
        LeveledItems = 41,
        Weathers = 42,
        Climates = 43,
        Regions = 44,
        Cells = 45,
        Worldspaces = 46,
        DialogTopics = 47,
        Quests = 48,
        IdleAnimations = 49,
        AIPackages = 50,
        CombatStyles = 51,
        LoadScreens = 52,
        LeveledSpells = 53,
        AnimatedObjects = 54,
        Waters = 55,
        EffectShaders = 56,
    }
    #endregion

    #region Registration
    internal partial class OblivionMod_Registration : ILoquiRegistration
    {
        public static readonly OblivionMod_Registration Instance = new OblivionMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Oblivion.ProtocolKey;

        public const ushort AdditionalFieldCount = 57;

        public const ushort FieldCount = 57;

        public static readonly Type MaskType = typeof(OblivionMod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(OblivionMod.ErrorMask);

        public static readonly Type ClassType = typeof(OblivionMod);

        public static readonly Type GetterType = typeof(IOblivionModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IOblivionMod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Oblivion.OblivionMod";

        public const string Name = "OblivionMod";

        public const string Namespace = "Mutagen.Bethesda.Oblivion";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static readonly Type BinaryWriteTranslation = typeof(OblivionModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class OblivionModSetterCommon
    {
        public static readonly OblivionModSetterCommon Instance = new OblivionModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IOblivionMod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Globals.Clear();
            item.Classes.Clear();
            item.Factions.Clear();
            item.Hairs.Clear();
            item.Eyes.Clear();
            item.Races.Clear();
            item.Sounds.Clear();
            item.Skills.Clear();
            item.MagicEffects.Clear();
            item.Scripts.Clear();
            item.LandTextures.Clear();
            item.Enchantments.Clear();
            item.Spells.Clear();
            item.Birthsigns.Clear();
            item.Activators.Clear();
            item.AlchemicalApparatus.Clear();
            item.Armors.Clear();
            item.Books.Clear();
            item.Clothes.Clear();
            item.Containers.Clear();
            item.Doors.Clear();
            item.Ingredients.Clear();
            item.Lights.Clear();
            item.Miscellaneous.Clear();
            item.Statics.Clear();
            item.Grasses.Clear();
            item.Trees.Clear();
            item.Flora.Clear();
            item.Furniture.Clear();
            item.Weapons.Clear();
            item.Ammunitions.Clear();
            item.Npcs.Clear();
            item.Creatures.Clear();
            item.LeveledCreatures.Clear();
            item.SoulGems.Clear();
            item.Keys.Clear();
            item.Potions.Clear();
            item.Subspaces.Clear();
            item.SigilStones.Clear();
            item.LeveledItems.Clear();
            item.Weathers.Clear();
            item.Climates.Clear();
            item.Regions.Clear();
            item.Worldspaces.Clear();
            item.DialogTopics.Clear();
            item.Quests.Clear();
            item.IdleAnimations.Clear();
            item.AIPackages.Clear();
            item.CombatStyles.Clear();
            item.LoadScreens.Clear();
            item.LeveledSpells.Clear();
            item.AnimatedObjects.Clear();
            item.Waters.Clear();
            item.EffectShaders.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IOblivionMod obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Factions.RemapLinks(mapping);
            obj.Races.RemapLinks(mapping);
            obj.MagicEffects.RemapLinks(mapping);
            obj.Scripts.RemapLinks(mapping);
            obj.LandTextures.RemapLinks(mapping);
            obj.Enchantments.RemapLinks(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Birthsigns.RemapLinks(mapping);
            obj.Activators.RemapLinks(mapping);
            obj.AlchemicalApparatus.RemapLinks(mapping);
            obj.Armors.RemapLinks(mapping);
            obj.Books.RemapLinks(mapping);
            obj.Clothes.RemapLinks(mapping);
            obj.Containers.RemapLinks(mapping);
            obj.Doors.RemapLinks(mapping);
            obj.Ingredients.RemapLinks(mapping);
            obj.Lights.RemapLinks(mapping);
            obj.Miscellaneous.RemapLinks(mapping);
            obj.Flora.RemapLinks(mapping);
            obj.Furniture.RemapLinks(mapping);
            obj.Weapons.RemapLinks(mapping);
            obj.Ammunitions.RemapLinks(mapping);
            obj.Npcs.RemapLinks(mapping);
            obj.Creatures.RemapLinks(mapping);
            obj.LeveledCreatures.RemapLinks(mapping);
            obj.SoulGems.RemapLinks(mapping);
            obj.Keys.RemapLinks(mapping);
            obj.Potions.RemapLinks(mapping);
            obj.SigilStones.RemapLinks(mapping);
            obj.LeveledItems.RemapLinks(mapping);
            obj.Weathers.RemapLinks(mapping);
            obj.Climates.RemapLinks(mapping);
            obj.Regions.RemapLinks(mapping);
            obj.Cells.RemapLinks(mapping);
            obj.Worldspaces.RemapLinks(mapping);
            obj.DialogTopics.RemapLinks(mapping);
            obj.Quests.RemapLinks(mapping);
            obj.IdleAnimations.RemapLinks(mapping);
            obj.AIPackages.RemapLinks(mapping);
            obj.LoadScreens.RemapLinks(mapping);
            obj.LeveledSpells.RemapLinks(mapping);
            obj.AnimatedObjects.RemapLinks(mapping);
            obj.Waters.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(IOblivionMod obj)
        {
            foreach (var item in OblivionModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IOblivionMod obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IOblivionMod obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in OblivionModCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IOblivionMod obj,
            HashSet<FormKey> keys)
        {
            obj.GameSettings.Remove(keys);
            obj.Globals.Remove(keys);
            obj.Classes.Remove(keys);
            obj.Factions.Remove(keys);
            obj.Hairs.Remove(keys);
            obj.Eyes.Remove(keys);
            obj.Races.Remove(keys);
            obj.Sounds.Remove(keys);
            obj.Skills.Remove(keys);
            obj.MagicEffects.Remove(keys);
            obj.Scripts.Remove(keys);
            obj.LandTextures.Remove(keys);
            obj.Enchantments.Remove(keys);
            obj.Spells.Remove(keys);
            obj.Birthsigns.Remove(keys);
            obj.Activators.Remove(keys);
            obj.AlchemicalApparatus.Remove(keys);
            obj.Armors.Remove(keys);
            obj.Books.Remove(keys);
            obj.Clothes.Remove(keys);
            obj.Containers.Remove(keys);
            obj.Doors.Remove(keys);
            obj.Ingredients.Remove(keys);
            obj.Lights.Remove(keys);
            obj.Miscellaneous.Remove(keys);
            obj.Statics.Remove(keys);
            obj.Grasses.Remove(keys);
            obj.Trees.Remove(keys);
            obj.Flora.Remove(keys);
            obj.Furniture.Remove(keys);
            obj.Weapons.Remove(keys);
            obj.Ammunitions.Remove(keys);
            obj.Npcs.Remove(keys);
            obj.Creatures.Remove(keys);
            obj.LeveledCreatures.Remove(keys);
            obj.SoulGems.Remove(keys);
            obj.Keys.Remove(keys);
            obj.Potions.Remove(keys);
            obj.Subspaces.Remove(keys);
            obj.SigilStones.Remove(keys);
            obj.LeveledItems.Remove(keys);
            obj.Weathers.Remove(keys);
            obj.Climates.Remove(keys);
            obj.Regions.Remove(keys);
            obj.Cells.Remove(keys);
            obj.Worldspaces.Remove(keys);
            obj.DialogTopics.Remove(keys);
            obj.Quests.Remove(keys);
            obj.IdleAnimations.Remove(keys);
            obj.AIPackages.Remove(keys);
            obj.CombatStyles.Remove(keys);
            obj.LoadScreens.Remove(keys);
            obj.LeveledSpells.Remove(keys);
            obj.AnimatedObjects.Remove(keys);
            obj.Waters.Remove(keys);
            obj.EffectShaders.Remove(keys);
        }
        
        public void Remove(
            IOblivionMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    if (!OblivionMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                case "GameSettingInt":
                case "IGameSettingIntGetter":
                case "IGameSettingInt":
                case "IGameSettingIntInternal":
                case "GameSettingFloat":
                case "IGameSettingFloatGetter":
                case "IGameSettingFloat":
                case "IGameSettingFloatInternal":
                case "GameSettingString":
                case "IGameSettingStringGetter":
                case "IGameSettingString":
                case "IGameSettingStringInternal":
                    obj.GameSettings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                case "GlobalInt":
                case "IGlobalIntGetter":
                case "IGlobalInt":
                case "IGlobalIntInternal":
                case "GlobalShort":
                case "IGlobalShortGetter":
                case "IGlobalShort":
                case "IGlobalShortInternal":
                case "GlobalFloat":
                case "IGlobalFloatGetter":
                case "IGlobalFloat":
                case "IGlobalFloatInternal":
                case "GlobalUnknown":
                case "IGlobalUnknownGetter":
                case "IGlobalUnknown":
                case "IGlobalUnknownInternal":
                    obj.Globals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    obj.Classes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    obj.Factions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    obj.Hairs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Eye":
                case "IEyeGetter":
                case "IEye":
                case "IEyeInternal":
                    obj.Eyes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    obj.Races.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Sound":
                case "ISoundGetter":
                case "ISound":
                case "ISoundInternal":
                    obj.Sounds.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SkillRecord":
                case "ISkillRecordGetter":
                case "ISkillRecord":
                case "ISkillRecordInternal":
                    obj.Skills.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    obj.MagicEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Script":
                case "IScriptGetter":
                case "IScript":
                case "IScriptInternal":
                    obj.Scripts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LandTexture":
                case "ILandTextureGetter":
                case "ILandTexture":
                case "ILandTextureInternal":
                    obj.LandTextures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Enchantment":
                case "IEnchantmentGetter":
                case "IEnchantment":
                case "IEnchantmentInternal":
                    obj.Enchantments.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    obj.Spells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Birthsign":
                case "IBirthsignGetter":
                case "IBirthsign":
                case "IBirthsignInternal":
                    obj.Birthsigns.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    obj.Activators.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    obj.AlchemicalApparatus.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    obj.Armors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    obj.Books.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Clothing":
                case "IClothingGetter":
                case "IClothing":
                case "IClothingInternal":
                    obj.Clothes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    obj.Containers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    obj.Doors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    obj.Ingredients.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    obj.Lights.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Miscellaneous":
                case "IMiscellaneousGetter":
                case "IMiscellaneous":
                case "IMiscellaneousInternal":
                    obj.Miscellaneous.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    obj.Statics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    obj.Grasses.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    obj.Trees.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    obj.Flora.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    obj.Furniture.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    obj.Weapons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    obj.Ammunitions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    obj.Npcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Creature":
                case "ICreatureGetter":
                case "ICreature":
                case "ICreatureInternal":
                    obj.Creatures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledCreature":
                case "ILeveledCreatureGetter":
                case "ILeveledCreature":
                case "ILeveledCreatureInternal":
                    obj.LeveledCreatures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    obj.SoulGems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    obj.Keys.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Potion":
                case "IPotionGetter":
                case "IPotion":
                case "IPotionInternal":
                    obj.Potions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Subspace":
                case "ISubspaceGetter":
                case "ISubspace":
                case "ISubspaceInternal":
                    obj.Subspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SigilStone":
                case "ISigilStoneGetter":
                case "ISigilStone":
                case "ISigilStoneInternal":
                    obj.SigilStones.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    obj.LeveledItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    obj.Weathers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    obj.Climates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    obj.Regions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    obj.DialogTopics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    obj.IdleAnimations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AIPackage":
                case "IAIPackageGetter":
                case "IAIPackage":
                case "IAIPackageInternal":
                    obj.AIPackages.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    obj.CombatStyles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    obj.LoadScreens.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    obj.LeveledSpells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    obj.AnimatedObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    obj.Waters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    obj.EffectShaders.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Road":
                case "IRoadGetter":
                case "IRoad":
                case "IRoadInternal":
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogItem":
                case "IDialogItemGetter":
                case "IDialogItem":
                case "IDialogItemInternal":
                    obj.DialogTopics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IItem":
                case "IItemGetter":
                    Remove(obj, keys, typeof(IAlchemicalApparatusGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IClothingGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscellaneousGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IPotionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISigilStoneGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoulGemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "INpcSpawn":
                case "INpcSpawnGetter":
                    Remove(obj, keys, typeof(ICreatureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledCreatureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "INpcRecord":
                case "INpcRecordGetter":
                    Remove(obj, keys, typeof(ICreatureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IOwner":
                case "IOwnerGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ISpellRecord":
                case "ISpellRecordGetter":
                    Remove(obj, keys, typeof(ILeveledSpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlace":
                case "IPlaceGetter":
                    Remove(obj, keys, typeof(IWorldspaceGetter), throwIfUnknown: throwIfUnknown);
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IOblivionMod obj)
        {
            if (obj.Cells is IAssetLinkContainer CellslinkCont)
            {
                foreach (var item in CellslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Worldspaces is IAssetLinkContainer WorldspaceslinkCont)
            {
                foreach (var item in WorldspaceslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IOblivionMod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            obj.Cells.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Worldspaces.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IOblivionMod item,
            MutagenFrame frame,
            OblivionRelease release,
            GroupMask? importMask = null)
        {
            PluginUtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                fillTyped: OblivionModBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class OblivionModCommon
    {
        public static readonly OblivionModCommon Instance = new OblivionModCommon();

        public OblivionMod.Mask<bool> GetEqualsMask(
            IOblivionModGetter item,
            IOblivionModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new OblivionMod.Mask<bool>(false);
            ((OblivionModCommon)((IOblivionModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IOblivionModGetter item,
            IOblivionModGetter rhs,
            OblivionMod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
            ret.Hairs = MaskItemExt.Factory(item.Hairs.GetEqualsMask(rhs.Hairs, include), include);
            ret.Eyes = MaskItemExt.Factory(item.Eyes.GetEqualsMask(rhs.Eyes, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.Sounds = MaskItemExt.Factory(item.Sounds.GetEqualsMask(rhs.Sounds, include), include);
            ret.Skills = MaskItemExt.Factory(item.Skills.GetEqualsMask(rhs.Skills, include), include);
            ret.MagicEffects = MaskItemExt.Factory(item.MagicEffects.GetEqualsMask(rhs.MagicEffects, include), include);
            ret.Scripts = MaskItemExt.Factory(item.Scripts.GetEqualsMask(rhs.Scripts, include), include);
            ret.LandTextures = MaskItemExt.Factory(item.LandTextures.GetEqualsMask(rhs.LandTextures, include), include);
            ret.Enchantments = MaskItemExt.Factory(item.Enchantments.GetEqualsMask(rhs.Enchantments, include), include);
            ret.Spells = MaskItemExt.Factory(item.Spells.GetEqualsMask(rhs.Spells, include), include);
            ret.Birthsigns = MaskItemExt.Factory(item.Birthsigns.GetEqualsMask(rhs.Birthsigns, include), include);
            ret.Activators = MaskItemExt.Factory(item.Activators.GetEqualsMask(rhs.Activators, include), include);
            ret.AlchemicalApparatus = MaskItemExt.Factory(item.AlchemicalApparatus.GetEqualsMask(rhs.AlchemicalApparatus, include), include);
            ret.Armors = MaskItemExt.Factory(item.Armors.GetEqualsMask(rhs.Armors, include), include);
            ret.Books = MaskItemExt.Factory(item.Books.GetEqualsMask(rhs.Books, include), include);
            ret.Clothes = MaskItemExt.Factory(item.Clothes.GetEqualsMask(rhs.Clothes, include), include);
            ret.Containers = MaskItemExt.Factory(item.Containers.GetEqualsMask(rhs.Containers, include), include);
            ret.Doors = MaskItemExt.Factory(item.Doors.GetEqualsMask(rhs.Doors, include), include);
            ret.Ingredients = MaskItemExt.Factory(item.Ingredients.GetEqualsMask(rhs.Ingredients, include), include);
            ret.Lights = MaskItemExt.Factory(item.Lights.GetEqualsMask(rhs.Lights, include), include);
            ret.Miscellaneous = MaskItemExt.Factory(item.Miscellaneous.GetEqualsMask(rhs.Miscellaneous, include), include);
            ret.Statics = MaskItemExt.Factory(item.Statics.GetEqualsMask(rhs.Statics, include), include);
            ret.Grasses = MaskItemExt.Factory(item.Grasses.GetEqualsMask(rhs.Grasses, include), include);
            ret.Trees = MaskItemExt.Factory(item.Trees.GetEqualsMask(rhs.Trees, include), include);
            ret.Flora = MaskItemExt.Factory(item.Flora.GetEqualsMask(rhs.Flora, include), include);
            ret.Furniture = MaskItemExt.Factory(item.Furniture.GetEqualsMask(rhs.Furniture, include), include);
            ret.Weapons = MaskItemExt.Factory(item.Weapons.GetEqualsMask(rhs.Weapons, include), include);
            ret.Ammunitions = MaskItemExt.Factory(item.Ammunitions.GetEqualsMask(rhs.Ammunitions, include), include);
            ret.Npcs = MaskItemExt.Factory(item.Npcs.GetEqualsMask(rhs.Npcs, include), include);
            ret.Creatures = MaskItemExt.Factory(item.Creatures.GetEqualsMask(rhs.Creatures, include), include);
            ret.LeveledCreatures = MaskItemExt.Factory(item.LeveledCreatures.GetEqualsMask(rhs.LeveledCreatures, include), include);
            ret.SoulGems = MaskItemExt.Factory(item.SoulGems.GetEqualsMask(rhs.SoulGems, include), include);
            ret.Keys = MaskItemExt.Factory(item.Keys.GetEqualsMask(rhs.Keys, include), include);
            ret.Potions = MaskItemExt.Factory(item.Potions.GetEqualsMask(rhs.Potions, include), include);
            ret.Subspaces = MaskItemExt.Factory(item.Subspaces.GetEqualsMask(rhs.Subspaces, include), include);
            ret.SigilStones = MaskItemExt.Factory(item.SigilStones.GetEqualsMask(rhs.SigilStones, include), include);
            ret.LeveledItems = MaskItemExt.Factory(item.LeveledItems.GetEqualsMask(rhs.LeveledItems, include), include);
            ret.Weathers = MaskItemExt.Factory(item.Weathers.GetEqualsMask(rhs.Weathers, include), include);
            ret.Climates = MaskItemExt.Factory(item.Climates.GetEqualsMask(rhs.Climates, include), include);
            ret.Regions = MaskItemExt.Factory(item.Regions.GetEqualsMask(rhs.Regions, include), include);
            ret.Cells = MaskItemExt.Factory(item.Cells.GetEqualsMask(rhs.Cells, include), include);
            ret.Worldspaces = MaskItemExt.Factory(item.Worldspaces.GetEqualsMask(rhs.Worldspaces, include), include);
            ret.DialogTopics = MaskItemExt.Factory(item.DialogTopics.GetEqualsMask(rhs.DialogTopics, include), include);
            ret.Quests = MaskItemExt.Factory(item.Quests.GetEqualsMask(rhs.Quests, include), include);
            ret.IdleAnimations = MaskItemExt.Factory(item.IdleAnimations.GetEqualsMask(rhs.IdleAnimations, include), include);
            ret.AIPackages = MaskItemExt.Factory(item.AIPackages.GetEqualsMask(rhs.AIPackages, include), include);
            ret.CombatStyles = MaskItemExt.Factory(item.CombatStyles.GetEqualsMask(rhs.CombatStyles, include), include);
            ret.LoadScreens = MaskItemExt.Factory(item.LoadScreens.GetEqualsMask(rhs.LoadScreens, include), include);
            ret.LeveledSpells = MaskItemExt.Factory(item.LeveledSpells.GetEqualsMask(rhs.LeveledSpells, include), include);
            ret.AnimatedObjects = MaskItemExt.Factory(item.AnimatedObjects.GetEqualsMask(rhs.AnimatedObjects, include), include);
            ret.Waters = MaskItemExt.Factory(item.Waters.GetEqualsMask(rhs.Waters, include), include);
            ret.EffectShaders = MaskItemExt.Factory(item.EffectShaders.GetEqualsMask(rhs.EffectShaders, include), include);
        }
        
        public string Print(
            IOblivionModGetter item,
            string? name = null,
            OblivionMod.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IOblivionModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            OblivionMod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"OblivionMod =>");
            }
            else
            {
                sb.AppendLine($"{name} (OblivionMod) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IOblivionModGetter item,
            StructuredStringBuilder sb,
            OblivionMod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.Print(sb, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.Print(sb, "GameSettings");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.Print(sb, "Globals");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.Print(sb, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.Print(sb, "Factions");
            }
            if (printMask?.Hairs?.Overall ?? true)
            {
                item.Hairs?.Print(sb, "Hairs");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                item.Eyes?.Print(sb, "Eyes");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.Print(sb, "Races");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                item.Sounds?.Print(sb, "Sounds");
            }
            if (printMask?.Skills?.Overall ?? true)
            {
                item.Skills?.Print(sb, "Skills");
            }
            if (printMask?.MagicEffects?.Overall ?? true)
            {
                item.MagicEffects?.Print(sb, "MagicEffects");
            }
            if (printMask?.Scripts?.Overall ?? true)
            {
                item.Scripts?.Print(sb, "Scripts");
            }
            if (printMask?.LandTextures?.Overall ?? true)
            {
                item.LandTextures?.Print(sb, "LandTextures");
            }
            if (printMask?.Enchantments?.Overall ?? true)
            {
                item.Enchantments?.Print(sb, "Enchantments");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                item.Spells?.Print(sb, "Spells");
            }
            if (printMask?.Birthsigns?.Overall ?? true)
            {
                item.Birthsigns?.Print(sb, "Birthsigns");
            }
            if (printMask?.Activators?.Overall ?? true)
            {
                item.Activators?.Print(sb, "Activators");
            }
            if (printMask?.AlchemicalApparatus?.Overall ?? true)
            {
                item.AlchemicalApparatus?.Print(sb, "AlchemicalApparatus");
            }
            if (printMask?.Armors?.Overall ?? true)
            {
                item.Armors?.Print(sb, "Armors");
            }
            if (printMask?.Books?.Overall ?? true)
            {
                item.Books?.Print(sb, "Books");
            }
            if (printMask?.Clothes?.Overall ?? true)
            {
                item.Clothes?.Print(sb, "Clothes");
            }
            if (printMask?.Containers?.Overall ?? true)
            {
                item.Containers?.Print(sb, "Containers");
            }
            if (printMask?.Doors?.Overall ?? true)
            {
                item.Doors?.Print(sb, "Doors");
            }
            if (printMask?.Ingredients?.Overall ?? true)
            {
                item.Ingredients?.Print(sb, "Ingredients");
            }
            if (printMask?.Lights?.Overall ?? true)
            {
                item.Lights?.Print(sb, "Lights");
            }
            if (printMask?.Miscellaneous?.Overall ?? true)
            {
                item.Miscellaneous?.Print(sb, "Miscellaneous");
            }
            if (printMask?.Statics?.Overall ?? true)
            {
                item.Statics?.Print(sb, "Statics");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                item.Grasses?.Print(sb, "Grasses");
            }
            if (printMask?.Trees?.Overall ?? true)
            {
                item.Trees?.Print(sb, "Trees");
            }
            if (printMask?.Flora?.Overall ?? true)
            {
                item.Flora?.Print(sb, "Flora");
            }
            if (printMask?.Furniture?.Overall ?? true)
            {
                item.Furniture?.Print(sb, "Furniture");
            }
            if (printMask?.Weapons?.Overall ?? true)
            {
                item.Weapons?.Print(sb, "Weapons");
            }
            if (printMask?.Ammunitions?.Overall ?? true)
            {
                item.Ammunitions?.Print(sb, "Ammunitions");
            }
            if (printMask?.Npcs?.Overall ?? true)
            {
                item.Npcs?.Print(sb, "Npcs");
            }
            if (printMask?.Creatures?.Overall ?? true)
            {
                item.Creatures?.Print(sb, "Creatures");
            }
            if (printMask?.LeveledCreatures?.Overall ?? true)
            {
                item.LeveledCreatures?.Print(sb, "LeveledCreatures");
            }
            if (printMask?.SoulGems?.Overall ?? true)
            {
                item.SoulGems?.Print(sb, "SoulGems");
            }
            if (printMask?.Keys?.Overall ?? true)
            {
                item.Keys?.Print(sb, "Keys");
            }
            if (printMask?.Potions?.Overall ?? true)
            {
                item.Potions?.Print(sb, "Potions");
            }
            if (printMask?.Subspaces?.Overall ?? true)
            {
                item.Subspaces?.Print(sb, "Subspaces");
            }
            if (printMask?.SigilStones?.Overall ?? true)
            {
                item.SigilStones?.Print(sb, "SigilStones");
            }
            if (printMask?.LeveledItems?.Overall ?? true)
            {
                item.LeveledItems?.Print(sb, "LeveledItems");
            }
            if (printMask?.Weathers?.Overall ?? true)
            {
                item.Weathers?.Print(sb, "Weathers");
            }
            if (printMask?.Climates?.Overall ?? true)
            {
                item.Climates?.Print(sb, "Climates");
            }
            if (printMask?.Regions?.Overall ?? true)
            {
                item.Regions?.Print(sb, "Regions");
            }
            if (printMask?.Cells?.Overall ?? true)
            {
                item.Cells?.Print(sb, "Cells");
            }
            if (printMask?.Worldspaces?.Overall ?? true)
            {
                item.Worldspaces?.Print(sb, "Worldspaces");
            }
            if (printMask?.DialogTopics?.Overall ?? true)
            {
                item.DialogTopics?.Print(sb, "DialogTopics");
            }
            if (printMask?.Quests?.Overall ?? true)
            {
                item.Quests?.Print(sb, "Quests");
            }
            if (printMask?.IdleAnimations?.Overall ?? true)
            {
                item.IdleAnimations?.Print(sb, "IdleAnimations");
            }
            if (printMask?.AIPackages?.Overall ?? true)
            {
                item.AIPackages?.Print(sb, "AIPackages");
            }
            if (printMask?.CombatStyles?.Overall ?? true)
            {
                item.CombatStyles?.Print(sb, "CombatStyles");
            }
            if (printMask?.LoadScreens?.Overall ?? true)
            {
                item.LoadScreens?.Print(sb, "LoadScreens");
            }
            if (printMask?.LeveledSpells?.Overall ?? true)
            {
                item.LeveledSpells?.Print(sb, "LeveledSpells");
            }
            if (printMask?.AnimatedObjects?.Overall ?? true)
            {
                item.AnimatedObjects?.Print(sb, "AnimatedObjects");
            }
            if (printMask?.Waters?.Overall ?? true)
            {
                item.Waters?.Print(sb, "Waters");
            }
            if (printMask?.EffectShaders?.Overall ?? true)
            {
                item.EffectShaders?.Print(sb, "EffectShaders");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IOblivionModGetter? lhs,
            IOblivionModGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.ModHeader) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ModHeader, rhs.ModHeader, out var lhsModHeader, out var rhsModHeader, out var isModHeaderEqual))
                {
                    if (!((OblivionModHeaderCommon)((IOblivionModHeaderGetter)lhsModHeader).CommonInstance()!).Equals(lhsModHeader, rhsModHeader, equalsMask?.GetSubCrystal((int)OblivionMod_FieldIndex.ModHeader))) return false;
                }
                else if (!isModHeaderEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.GameSettings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GameSettings, rhs.GameSettings, out var lhsGameSettings, out var rhsGameSettings, out var isGameSettingsEqual))
                {
                    if (!object.Equals(lhsGameSettings, rhsGameSettings)) return false;
                }
                else if (!isGameSettingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Globals) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Globals, rhs.Globals, out var lhsGlobals, out var rhsGlobals, out var isGlobalsEqual))
                {
                    if (!object.Equals(lhsGlobals, rhsGlobals)) return false;
                }
                else if (!isGlobalsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Classes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Classes, rhs.Classes, out var lhsClasses, out var rhsClasses, out var isClassesEqual))
                {
                    if (!object.Equals(lhsClasses, rhsClasses)) return false;
                }
                else if (!isClassesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Factions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Factions, rhs.Factions, out var lhsFactions, out var rhsFactions, out var isFactionsEqual))
                {
                    if (!object.Equals(lhsFactions, rhsFactions)) return false;
                }
                else if (!isFactionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Hairs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Hairs, rhs.Hairs, out var lhsHairs, out var rhsHairs, out var isHairsEqual))
                {
                    if (!object.Equals(lhsHairs, rhsHairs)) return false;
                }
                else if (!isHairsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Eyes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Eyes, rhs.Eyes, out var lhsEyes, out var rhsEyes, out var isEyesEqual))
                {
                    if (!object.Equals(lhsEyes, rhsEyes)) return false;
                }
                else if (!isEyesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Races) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Races, rhs.Races, out var lhsRaces, out var rhsRaces, out var isRacesEqual))
                {
                    if (!object.Equals(lhsRaces, rhsRaces)) return false;
                }
                else if (!isRacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Sounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Sounds, rhs.Sounds, out var lhsSounds, out var rhsSounds, out var isSoundsEqual))
                {
                    if (!object.Equals(lhsSounds, rhsSounds)) return false;
                }
                else if (!isSoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Skills) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Skills, rhs.Skills, out var lhsSkills, out var rhsSkills, out var isSkillsEqual))
                {
                    if (!object.Equals(lhsSkills, rhsSkills)) return false;
                }
                else if (!isSkillsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.MagicEffects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MagicEffects, rhs.MagicEffects, out var lhsMagicEffects, out var rhsMagicEffects, out var isMagicEffectsEqual))
                {
                    if (!object.Equals(lhsMagicEffects, rhsMagicEffects)) return false;
                }
                else if (!isMagicEffectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Scripts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Scripts, rhs.Scripts, out var lhsScripts, out var rhsScripts, out var isScriptsEqual))
                {
                    if (!object.Equals(lhsScripts, rhsScripts)) return false;
                }
                else if (!isScriptsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LandTextures) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LandTextures, rhs.LandTextures, out var lhsLandTextures, out var rhsLandTextures, out var isLandTexturesEqual))
                {
                    if (!object.Equals(lhsLandTextures, rhsLandTextures)) return false;
                }
                else if (!isLandTexturesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Enchantments) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Enchantments, rhs.Enchantments, out var lhsEnchantments, out var rhsEnchantments, out var isEnchantmentsEqual))
                {
                    if (!object.Equals(lhsEnchantments, rhsEnchantments)) return false;
                }
                else if (!isEnchantmentsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Spells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Spells, rhs.Spells, out var lhsSpells, out var rhsSpells, out var isSpellsEqual))
                {
                    if (!object.Equals(lhsSpells, rhsSpells)) return false;
                }
                else if (!isSpellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Birthsigns) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Birthsigns, rhs.Birthsigns, out var lhsBirthsigns, out var rhsBirthsigns, out var isBirthsignsEqual))
                {
                    if (!object.Equals(lhsBirthsigns, rhsBirthsigns)) return false;
                }
                else if (!isBirthsignsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Activators) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Activators, rhs.Activators, out var lhsActivators, out var rhsActivators, out var isActivatorsEqual))
                {
                    if (!object.Equals(lhsActivators, rhsActivators)) return false;
                }
                else if (!isActivatorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AlchemicalApparatus) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AlchemicalApparatus, rhs.AlchemicalApparatus, out var lhsAlchemicalApparatus, out var rhsAlchemicalApparatus, out var isAlchemicalApparatusEqual))
                {
                    if (!object.Equals(lhsAlchemicalApparatus, rhsAlchemicalApparatus)) return false;
                }
                else if (!isAlchemicalApparatusEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Armors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Armors, rhs.Armors, out var lhsArmors, out var rhsArmors, out var isArmorsEqual))
                {
                    if (!object.Equals(lhsArmors, rhsArmors)) return false;
                }
                else if (!isArmorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Books) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Books, rhs.Books, out var lhsBooks, out var rhsBooks, out var isBooksEqual))
                {
                    if (!object.Equals(lhsBooks, rhsBooks)) return false;
                }
                else if (!isBooksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Clothes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Clothes, rhs.Clothes, out var lhsClothes, out var rhsClothes, out var isClothesEqual))
                {
                    if (!object.Equals(lhsClothes, rhsClothes)) return false;
                }
                else if (!isClothesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Containers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Containers, rhs.Containers, out var lhsContainers, out var rhsContainers, out var isContainersEqual))
                {
                    if (!object.Equals(lhsContainers, rhsContainers)) return false;
                }
                else if (!isContainersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Doors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Doors, rhs.Doors, out var lhsDoors, out var rhsDoors, out var isDoorsEqual))
                {
                    if (!object.Equals(lhsDoors, rhsDoors)) return false;
                }
                else if (!isDoorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ingredients) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ingredients, rhs.Ingredients, out var lhsIngredients, out var rhsIngredients, out var isIngredientsEqual))
                {
                    if (!object.Equals(lhsIngredients, rhsIngredients)) return false;
                }
                else if (!isIngredientsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Lights) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Lights, rhs.Lights, out var lhsLights, out var rhsLights, out var isLightsEqual))
                {
                    if (!object.Equals(lhsLights, rhsLights)) return false;
                }
                else if (!isLightsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Miscellaneous) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Miscellaneous, rhs.Miscellaneous, out var lhsMiscellaneous, out var rhsMiscellaneous, out var isMiscellaneousEqual))
                {
                    if (!object.Equals(lhsMiscellaneous, rhsMiscellaneous)) return false;
                }
                else if (!isMiscellaneousEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Statics) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Statics, rhs.Statics, out var lhsStatics, out var rhsStatics, out var isStaticsEqual))
                {
                    if (!object.Equals(lhsStatics, rhsStatics)) return false;
                }
                else if (!isStaticsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Grasses) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Grasses, rhs.Grasses, out var lhsGrasses, out var rhsGrasses, out var isGrassesEqual))
                {
                    if (!object.Equals(lhsGrasses, rhsGrasses)) return false;
                }
                else if (!isGrassesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Trees) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Trees, rhs.Trees, out var lhsTrees, out var rhsTrees, out var isTreesEqual))
                {
                    if (!object.Equals(lhsTrees, rhsTrees)) return false;
                }
                else if (!isTreesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Flora) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Flora, rhs.Flora, out var lhsFlora, out var rhsFlora, out var isFloraEqual))
                {
                    if (!object.Equals(lhsFlora, rhsFlora)) return false;
                }
                else if (!isFloraEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Furniture) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Furniture, rhs.Furniture, out var lhsFurniture, out var rhsFurniture, out var isFurnitureEqual))
                {
                    if (!object.Equals(lhsFurniture, rhsFurniture)) return false;
                }
                else if (!isFurnitureEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weapons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weapons, rhs.Weapons, out var lhsWeapons, out var rhsWeapons, out var isWeaponsEqual))
                {
                    if (!object.Equals(lhsWeapons, rhsWeapons)) return false;
                }
                else if (!isWeaponsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ammunitions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ammunitions, rhs.Ammunitions, out var lhsAmmunitions, out var rhsAmmunitions, out var isAmmunitionsEqual))
                {
                    if (!object.Equals(lhsAmmunitions, rhsAmmunitions)) return false;
                }
                else if (!isAmmunitionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Npcs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Npcs, rhs.Npcs, out var lhsNpcs, out var rhsNpcs, out var isNpcsEqual))
                {
                    if (!object.Equals(lhsNpcs, rhsNpcs)) return false;
                }
                else if (!isNpcsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Creatures) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Creatures, rhs.Creatures, out var lhsCreatures, out var rhsCreatures, out var isCreaturesEqual))
                {
                    if (!object.Equals(lhsCreatures, rhsCreatures)) return false;
                }
                else if (!isCreaturesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledCreatures) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledCreatures, rhs.LeveledCreatures, out var lhsLeveledCreatures, out var rhsLeveledCreatures, out var isLeveledCreaturesEqual))
                {
                    if (!object.Equals(lhsLeveledCreatures, rhsLeveledCreatures)) return false;
                }
                else if (!isLeveledCreaturesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SoulGems) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoulGems, rhs.SoulGems, out var lhsSoulGems, out var rhsSoulGems, out var isSoulGemsEqual))
                {
                    if (!object.Equals(lhsSoulGems, rhsSoulGems)) return false;
                }
                else if (!isSoulGemsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Keys) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Keys, rhs.Keys, out var lhsKeys, out var rhsKeys, out var isKeysEqual))
                {
                    if (!object.Equals(lhsKeys, rhsKeys)) return false;
                }
                else if (!isKeysEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Potions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Potions, rhs.Potions, out var lhsPotions, out var rhsPotions, out var isPotionsEqual))
                {
                    if (!object.Equals(lhsPotions, rhsPotions)) return false;
                }
                else if (!isPotionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Subspaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Subspaces, rhs.Subspaces, out var lhsSubspaces, out var rhsSubspaces, out var isSubspacesEqual))
                {
                    if (!object.Equals(lhsSubspaces, rhsSubspaces)) return false;
                }
                else if (!isSubspacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SigilStones) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SigilStones, rhs.SigilStones, out var lhsSigilStones, out var rhsSigilStones, out var isSigilStonesEqual))
                {
                    if (!object.Equals(lhsSigilStones, rhsSigilStones)) return false;
                }
                else if (!isSigilStonesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledItems) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledItems, rhs.LeveledItems, out var lhsLeveledItems, out var rhsLeveledItems, out var isLeveledItemsEqual))
                {
                    if (!object.Equals(lhsLeveledItems, rhsLeveledItems)) return false;
                }
                else if (!isLeveledItemsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weathers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weathers, rhs.Weathers, out var lhsWeathers, out var rhsWeathers, out var isWeathersEqual))
                {
                    if (!object.Equals(lhsWeathers, rhsWeathers)) return false;
                }
                else if (!isWeathersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Climates) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Climates, rhs.Climates, out var lhsClimates, out var rhsClimates, out var isClimatesEqual))
                {
                    if (!object.Equals(lhsClimates, rhsClimates)) return false;
                }
                else if (!isClimatesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Regions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Regions, rhs.Regions, out var lhsRegions, out var rhsRegions, out var isRegionsEqual))
                {
                    if (!object.Equals(lhsRegions, rhsRegions)) return false;
                }
                else if (!isRegionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Cells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Cells, rhs.Cells, out var lhsCells, out var rhsCells, out var isCellsEqual))
                {
                    if (!object.Equals(lhsCells, rhsCells)) return false;
                }
                else if (!isCellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Worldspaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Worldspaces, rhs.Worldspaces, out var lhsWorldspaces, out var rhsWorldspaces, out var isWorldspacesEqual))
                {
                    if (!object.Equals(lhsWorldspaces, rhsWorldspaces)) return false;
                }
                else if (!isWorldspacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.DialogTopics) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DialogTopics, rhs.DialogTopics, out var lhsDialogTopics, out var rhsDialogTopics, out var isDialogTopicsEqual))
                {
                    if (!object.Equals(lhsDialogTopics, rhsDialogTopics)) return false;
                }
                else if (!isDialogTopicsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Quests) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Quests, rhs.Quests, out var lhsQuests, out var rhsQuests, out var isQuestsEqual))
                {
                    if (!object.Equals(lhsQuests, rhsQuests)) return false;
                }
                else if (!isQuestsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.IdleAnimations) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IdleAnimations, rhs.IdleAnimations, out var lhsIdleAnimations, out var rhsIdleAnimations, out var isIdleAnimationsEqual))
                {
                    if (!object.Equals(lhsIdleAnimations, rhsIdleAnimations)) return false;
                }
                else if (!isIdleAnimationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AIPackages) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AIPackages, rhs.AIPackages, out var lhsAIPackages, out var rhsAIPackages, out var isAIPackagesEqual))
                {
                    if (!object.Equals(lhsAIPackages, rhsAIPackages)) return false;
                }
                else if (!isAIPackagesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.CombatStyles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CombatStyles, rhs.CombatStyles, out var lhsCombatStyles, out var rhsCombatStyles, out var isCombatStylesEqual))
                {
                    if (!object.Equals(lhsCombatStyles, rhsCombatStyles)) return false;
                }
                else if (!isCombatStylesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LoadScreens) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LoadScreens, rhs.LoadScreens, out var lhsLoadScreens, out var rhsLoadScreens, out var isLoadScreensEqual))
                {
                    if (!object.Equals(lhsLoadScreens, rhsLoadScreens)) return false;
                }
                else if (!isLoadScreensEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledSpells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledSpells, rhs.LeveledSpells, out var lhsLeveledSpells, out var rhsLeveledSpells, out var isLeveledSpellsEqual))
                {
                    if (!object.Equals(lhsLeveledSpells, rhsLeveledSpells)) return false;
                }
                else if (!isLeveledSpellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AnimatedObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AnimatedObjects, rhs.AnimatedObjects, out var lhsAnimatedObjects, out var rhsAnimatedObjects, out var isAnimatedObjectsEqual))
                {
                    if (!object.Equals(lhsAnimatedObjects, rhsAnimatedObjects)) return false;
                }
                else if (!isAnimatedObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Waters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Waters, rhs.Waters, out var lhsWaters, out var rhsWaters, out var isWatersEqual))
                {
                    if (!object.Equals(lhsWaters, rhsWaters)) return false;
                }
                else if (!isWatersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.EffectShaders) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EffectShaders, rhs.EffectShaders, out var lhsEffectShaders, out var rhsEffectShaders, out var isEffectShadersEqual))
                {
                    if (!object.Equals(lhsEffectShaders, rhsEffectShaders)) return false;
                }
                else if (!isEffectShadersEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IOblivionModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.Globals);
            hash.Add(item.Classes);
            hash.Add(item.Factions);
            hash.Add(item.Hairs);
            hash.Add(item.Eyes);
            hash.Add(item.Races);
            hash.Add(item.Sounds);
            hash.Add(item.Skills);
            hash.Add(item.MagicEffects);
            hash.Add(item.Scripts);
            hash.Add(item.LandTextures);
            hash.Add(item.Enchantments);
            hash.Add(item.Spells);
            hash.Add(item.Birthsigns);
            hash.Add(item.Activators);
            hash.Add(item.AlchemicalApparatus);
            hash.Add(item.Armors);
            hash.Add(item.Books);
            hash.Add(item.Clothes);
            hash.Add(item.Containers);
            hash.Add(item.Doors);
            hash.Add(item.Ingredients);
            hash.Add(item.Lights);
            hash.Add(item.Miscellaneous);
            hash.Add(item.Statics);
            hash.Add(item.Grasses);
            hash.Add(item.Trees);
            hash.Add(item.Flora);
            hash.Add(item.Furniture);
            hash.Add(item.Weapons);
            hash.Add(item.Ammunitions);
            hash.Add(item.Npcs);
            hash.Add(item.Creatures);
            hash.Add(item.LeveledCreatures);
            hash.Add(item.SoulGems);
            hash.Add(item.Keys);
            hash.Add(item.Potions);
            hash.Add(item.Subspaces);
            hash.Add(item.SigilStones);
            hash.Add(item.LeveledItems);
            hash.Add(item.Weathers);
            hash.Add(item.Climates);
            hash.Add(item.Regions);
            hash.Add(item.Cells);
            hash.Add(item.Worldspaces);
            hash.Add(item.DialogTopics);
            hash.Add(item.Quests);
            hash.Add(item.IdleAnimations);
            hash.Add(item.AIPackages);
            hash.Add(item.CombatStyles);
            hash.Add(item.LoadScreens);
            hash.Add(item.LeveledSpells);
            hash.Add(item.AnimatedObjects);
            hash.Add(item.Waters);
            hash.Add(item.EffectShaders);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return OblivionMod.GetNew();
        }
        
        #region Mutagen
        public object? GetGroup(
            IOblivionModGetter obj,
            Type type)
        {
            switch (type.Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    return obj.Hairs;
                case "Eye":
                case "IEyeGetter":
                case "IEye":
                case "IEyeInternal":
                    return obj.Eyes;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races;
                case "Sound":
                case "ISoundGetter":
                case "ISound":
                case "ISoundInternal":
                    return obj.Sounds;
                case "SkillRecord":
                case "ISkillRecordGetter":
                case "ISkillRecord":
                case "ISkillRecordInternal":
                    return obj.Skills;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    return obj.MagicEffects;
                case "Script":
                case "IScriptGetter":
                case "IScript":
                case "IScriptInternal":
                    return obj.Scripts;
                case "LandTexture":
                case "ILandTextureGetter":
                case "ILandTexture":
                case "ILandTextureInternal":
                    return obj.LandTextures;
                case "Enchantment":
                case "IEnchantmentGetter":
                case "IEnchantment":
                case "IEnchantmentInternal":
                    return obj.Enchantments;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    return obj.Spells;
                case "Birthsign":
                case "IBirthsignGetter":
                case "IBirthsign":
                case "IBirthsignInternal":
                    return obj.Birthsigns;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    return obj.Activators;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    return obj.AlchemicalApparatus;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    return obj.Armors;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    return obj.Books;
                case "Clothing":
                case "IClothingGetter":
                case "IClothing":
                case "IClothingInternal":
                    return obj.Clothes;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    return obj.Containers;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    return obj.Doors;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    return obj.Ingredients;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    return obj.Lights;
                case "Miscellaneous":
                case "IMiscellaneousGetter":
                case "IMiscellaneous":
                case "IMiscellaneousInternal":
                    return obj.Miscellaneous;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    return obj.Statics;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    return obj.Grasses;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    return obj.Trees;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    return obj.Flora;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    return obj.Furniture;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    return obj.Weapons;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    return obj.Ammunitions;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    return obj.Npcs;
                case "Creature":
                case "ICreatureGetter":
                case "ICreature":
                case "ICreatureInternal":
                    return obj.Creatures;
                case "LeveledCreature":
                case "ILeveledCreatureGetter":
                case "ILeveledCreature":
                case "ILeveledCreatureInternal":
                    return obj.LeveledCreatures;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    return obj.SoulGems;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    return obj.Keys;
                case "Potion":
                case "IPotionGetter":
                case "IPotion":
                case "IPotionInternal":
                    return obj.Potions;
                case "Subspace":
                case "ISubspaceGetter":
                case "ISubspace":
                case "ISubspaceInternal":
                    return obj.Subspaces;
                case "SigilStone":
                case "ISigilStoneGetter":
                case "ISigilStone":
                case "ISigilStoneInternal":
                    return obj.SigilStones;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    return obj.LeveledItems;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    return obj.Weathers;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    return obj.Climates;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    return obj.Regions;
                case "CellBlock":
                case "ICellBlockGetter":
                case "ICellBlock":
                    return obj.Cells.Records;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    return obj.Worldspaces;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    return obj.DialogTopics;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    return obj.Quests;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    return obj.IdleAnimations;
                case "AIPackage":
                case "IAIPackageGetter":
                case "IAIPackage":
                case "IAIPackageInternal":
                    return obj.AIPackages;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    return obj.CombatStyles;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    return obj.LoadScreens;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    return obj.LeveledSpells;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    return obj.AnimatedObjects;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    return obj.Waters;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    return obj.EffectShaders;
                default:
                    return null;
            }
        }
        
        public static void WriteParallel(
            IOblivionModGetter item,
            MutagenWriter writer,
            BinaryWriteParameters param,
            ModKey modKey)
        {
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            Stream[] outputStreams = new Stream[56];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, 0, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Globals, 1, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Classes, 2, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Factions, 3, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Hairs, 4, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Eyes, 5, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Races, 6, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Sounds, 7, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Skills, 8, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MagicEffects, 9, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Scripts, 10, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LandTextures, 11, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Enchantments, 12, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Spells, 13, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Birthsigns, 14, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Activators, 15, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AlchemicalApparatus, 16, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Armors, 17, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Books, 18, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Clothes, 19, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Containers, 20, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Doors, 21, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Ingredients, 22, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Lights, 23, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Miscellaneous, 24, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Statics, 25, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Grasses, 26, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Trees, 27, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Flora, 28, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Furniture, 29, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Weapons, 30, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Ammunitions, 31, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Npcs, 32, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Creatures, 33, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledCreatures, 34, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoulGems, 35, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Keys, 36, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Potions, 37, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Subspaces, 38, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SigilStones, 39, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledItems, 40, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Weathers, 41, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Climates, 42, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Regions, 43, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteCellsParallel(item.Cells, 44, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteWorldspacesParallel(item.Worldspaces, 45, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteDialogTopicsParallel(item.DialogTopics, 46, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Quests, 47, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.IdleAnimations, 48, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AIPackages, 49, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CombatStyles, 50, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LoadScreens, 51, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledSpells, 52, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AnimatedObjects, 53, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Waters, 54, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.EffectShaders, 55, outputStreams, writer.MetaData, param.Parallel));
            Parallel.Invoke(param.Parallel.ParallelOptions, toDo.ToArray());
            PluginUtilityTranslation.CompileStreamsInto(
                outputStreams.WhereNotNull(),
                writer.BaseStream);
        }
        
        public static void WriteGroupParallel<T>(
            IOblivionGroupGetter<T> group,
            int targetIndex,
            Stream[] streamDepositArray,
            WritingBundle bundle,
            ParallelWriteParameters parallelParam)
            where T : class, IOblivionMajorRecordGetter, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Cut(parallelParam.CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[bundle.Constants.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), RecordTypes.GRUP.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, bundle.Constants, dispose: false))
            {
                stream.Position += 8;
                OblivionGroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, parallelParam.ParallelOptions, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, bundle with {}, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            PluginUtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public uint GetRecordCount(IOblivionModGetter item)
        {
            uint count = (uint)item.EnumerateMajorRecords().Count();
            count += item.GameSettings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Globals.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Classes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Factions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Hairs.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Eyes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Races.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Sounds.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Skills.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MagicEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Scripts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LandTextures.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Enchantments.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Spells.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Birthsigns.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Activators.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AlchemicalApparatus.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Armors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Books.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Clothes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Containers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Doors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Ingredients.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Lights.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Miscellaneous.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Statics.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Grasses.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Trees.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Flora.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Furniture.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Weapons.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Ammunitions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Npcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Creatures.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledCreatures.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoulGems.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Keys.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Potions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Subspaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SigilStones.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Weathers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Climates.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Regions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Cells.Records.Count > 0 ? 1 : default(uint);
            count += item.Worldspaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DialogTopics.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Quests.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.IdleAnimations.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AIPackages.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CombatStyles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LoadScreens.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledSpells.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AnimatedObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Waters.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.EffectShaders.RecordCache.Count > 0 ? 1 : default(uint);
            GetCustomRecordCount(item, (customCount) => count += customCount);
            return count;
        }
        
        partial void GetCustomRecordCount(IOblivionModGetter item, Action<uint> setter);
        
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IOblivionModGetter obj)
        {
            foreach (var item in obj.Factions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.Scripts is IFormLinkContainerGetter ScriptslinkCont)
            {
                foreach (var item in ScriptslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.LandTextures.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Enchantments.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Birthsigns.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AlchemicalApparatus.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Clothes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Miscellaneous.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Flora.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Creatures.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledCreatures.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoulGems.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Potions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SigilStones.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AIPackages.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledSpells.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateFormLinks())
            {
                yield return item;
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(IOblivionModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hairs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Eyes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Sounds.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Skills.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Scripts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LandTextures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Enchantments.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Birthsigns.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AlchemicalApparatus.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Clothes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Miscellaneous.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Flora.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Creatures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledCreatures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoulGems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Potions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Subspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SigilStones.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AIPackages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CombatStyles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledSpells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IOblivionModGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IOblivionModGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                    if (!OblivionMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in obj.Hairs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Eye":
                case "IEyeGetter":
                case "IEye":
                case "IEyeInternal":
                    foreach (var item in obj.Eyes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Sound":
                case "ISoundGetter":
                case "ISound":
                case "ISoundInternal":
                    foreach (var item in obj.Sounds.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SkillRecord":
                case "ISkillRecordGetter":
                case "ISkillRecord":
                case "ISkillRecordInternal":
                    foreach (var item in obj.Skills.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Script":
                case "IScriptGetter":
                case "IScript":
                case "IScriptInternal":
                    foreach (var item in obj.Scripts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandTexture":
                case "ILandTextureGetter":
                case "ILandTexture":
                case "ILandTextureInternal":
                    foreach (var item in obj.LandTextures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Enchantment":
                case "IEnchantmentGetter":
                case "IEnchantment":
                case "IEnchantmentInternal":
                    foreach (var item in obj.Enchantments.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in obj.Spells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Birthsign":
                case "IBirthsignGetter":
                case "IBirthsign":
                case "IBirthsignInternal":
                    foreach (var item in obj.Birthsigns.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in obj.AlchemicalApparatus.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Clothing":
                case "IClothingGetter":
                case "IClothing":
                case "IClothingInternal":
                    foreach (var item in obj.Clothes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in obj.Ingredients.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Miscellaneous":
                case "IMiscellaneousGetter":
                case "IMiscellaneous":
                case "IMiscellaneousInternal":
                    foreach (var item in obj.Miscellaneous.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in obj.Trees.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Flora.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in obj.Furniture.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in obj.Ammunitions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Creature":
                case "ICreatureGetter":
                case "ICreature":
                case "ICreatureInternal":
                    foreach (var item in obj.Creatures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledCreature":
                case "ILeveledCreatureGetter":
                case "ILeveledCreature":
                case "ILeveledCreatureInternal":
                    foreach (var item in obj.LeveledCreatures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in obj.SoulGems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Potion":
                case "IPotionGetter":
                case "IPotion":
                case "IPotionInternal":
                    foreach (var item in obj.Potions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Subspace":
                case "ISubspaceGetter":
                case "ISubspace":
                case "ISubspaceInternal":
                    foreach (var item in obj.Subspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SigilStone":
                case "ISigilStoneGetter":
                case "ISigilStone":
                case "ISigilStoneInternal":
                    foreach (var item in obj.SigilStones.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in obj.Weathers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in obj.Climates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in obj.Regions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in obj.IdleAnimations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AIPackage":
                case "IAIPackageGetter":
                case "IAIPackage":
                case "IAIPackageInternal":
                    foreach (var item in obj.AIPackages.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in obj.CombatStyles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in obj.LoadScreens.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    foreach (var item in obj.LeveledSpells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in obj.Waters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in obj.EffectShaders.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Road":
                case "IRoadGetter":
                case "IRoad":
                case "IRoadInternal":
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogItem":
                case "IDialogItemGetter":
                case "IDialogItem":
                case "IDialogItemInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Oblivion, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IOblivionModGetter obj,
            ILinkCache linkCache)
        {
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, GameSetting, IGameSettingGetter>(
                srcGroup: obj.GameSettings,
                type: typeof(IGameSettingGetter),
                modKey: obj.ModKey,
                group: (m) => m.GameSettings,
                groupGetter: (m) => m.GameSettings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Global, IGlobalGetter>(
                srcGroup: obj.Globals,
                type: typeof(IGlobalGetter),
                modKey: obj.ModKey,
                group: (m) => m.Globals,
                groupGetter: (m) => m.Globals))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Class, IClassGetter>(
                srcGroup: obj.Classes,
                type: typeof(IClassGetter),
                modKey: obj.ModKey,
                group: (m) => m.Classes,
                groupGetter: (m) => m.Classes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Faction, IFactionGetter>(
                srcGroup: obj.Factions,
                type: typeof(IFactionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Factions,
                groupGetter: (m) => m.Factions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Hair, IHairGetter>(
                srcGroup: obj.Hairs,
                type: typeof(IHairGetter),
                modKey: obj.ModKey,
                group: (m) => m.Hairs,
                groupGetter: (m) => m.Hairs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Eye, IEyeGetter>(
                srcGroup: obj.Eyes,
                type: typeof(IEyeGetter),
                modKey: obj.ModKey,
                group: (m) => m.Eyes,
                groupGetter: (m) => m.Eyes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Race, IRaceGetter>(
                srcGroup: obj.Races,
                type: typeof(IRaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Races,
                groupGetter: (m) => m.Races))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Sound, ISoundGetter>(
                srcGroup: obj.Sounds,
                type: typeof(ISoundGetter),
                modKey: obj.ModKey,
                group: (m) => m.Sounds,
                groupGetter: (m) => m.Sounds))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, SkillRecord, ISkillRecordGetter>(
                srcGroup: obj.Skills,
                type: typeof(ISkillRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Skills,
                groupGetter: (m) => m.Skills))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, MagicEffect, IMagicEffectGetter>(
                srcGroup: obj.MagicEffects,
                type: typeof(IMagicEffectGetter),
                modKey: obj.ModKey,
                group: (m) => m.MagicEffects,
                groupGetter: (m) => m.MagicEffects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Script, IScriptGetter>(
                srcGroup: obj.Scripts,
                type: typeof(IScriptGetter),
                modKey: obj.ModKey,
                group: (m) => m.Scripts,
                groupGetter: (m) => m.Scripts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, LandTexture, ILandTextureGetter>(
                srcGroup: obj.LandTextures,
                type: typeof(ILandTextureGetter),
                modKey: obj.ModKey,
                group: (m) => m.LandTextures,
                groupGetter: (m) => m.LandTextures))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Enchantment, IEnchantmentGetter>(
                srcGroup: obj.Enchantments,
                type: typeof(IEnchantmentGetter),
                modKey: obj.ModKey,
                group: (m) => m.Enchantments,
                groupGetter: (m) => m.Enchantments))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Spell, ISpellGetter>(
                srcGroup: obj.Spells,
                type: typeof(ISpellGetter),
                modKey: obj.ModKey,
                group: (m) => m.Spells,
                groupGetter: (m) => m.Spells))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Birthsign, IBirthsignGetter>(
                srcGroup: obj.Birthsigns,
                type: typeof(IBirthsignGetter),
                modKey: obj.ModKey,
                group: (m) => m.Birthsigns,
                groupGetter: (m) => m.Birthsigns))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Activator, IActivatorGetter>(
                srcGroup: obj.Activators,
                type: typeof(IActivatorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Activators,
                groupGetter: (m) => m.Activators))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, AlchemicalApparatus, IAlchemicalApparatusGetter>(
                srcGroup: obj.AlchemicalApparatus,
                type: typeof(IAlchemicalApparatusGetter),
                modKey: obj.ModKey,
                group: (m) => m.AlchemicalApparatus,
                groupGetter: (m) => m.AlchemicalApparatus))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Armor, IArmorGetter>(
                srcGroup: obj.Armors,
                type: typeof(IArmorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Armors,
                groupGetter: (m) => m.Armors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Book, IBookGetter>(
                srcGroup: obj.Books,
                type: typeof(IBookGetter),
                modKey: obj.ModKey,
                group: (m) => m.Books,
                groupGetter: (m) => m.Books))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Clothing, IClothingGetter>(
                srcGroup: obj.Clothes,
                type: typeof(IClothingGetter),
                modKey: obj.ModKey,
                group: (m) => m.Clothes,
                groupGetter: (m) => m.Clothes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Container, IContainerGetter>(
                srcGroup: obj.Containers,
                type: typeof(IContainerGetter),
                modKey: obj.ModKey,
                group: (m) => m.Containers,
                groupGetter: (m) => m.Containers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Door, IDoorGetter>(
                srcGroup: obj.Doors,
                type: typeof(IDoorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Doors,
                groupGetter: (m) => m.Doors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Ingredient, IIngredientGetter>(
                srcGroup: obj.Ingredients,
                type: typeof(IIngredientGetter),
                modKey: obj.ModKey,
                group: (m) => m.Ingredients,
                groupGetter: (m) => m.Ingredients))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Light, ILightGetter>(
                srcGroup: obj.Lights,
                type: typeof(ILightGetter),
                modKey: obj.ModKey,
                group: (m) => m.Lights,
                groupGetter: (m) => m.Lights))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Miscellaneous, IMiscellaneousGetter>(
                srcGroup: obj.Miscellaneous,
                type: typeof(IMiscellaneousGetter),
                modKey: obj.ModKey,
                group: (m) => m.Miscellaneous,
                groupGetter: (m) => m.Miscellaneous))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Static, IStaticGetter>(
                srcGroup: obj.Statics,
                type: typeof(IStaticGetter),
                modKey: obj.ModKey,
                group: (m) => m.Statics,
                groupGetter: (m) => m.Statics))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Grass, IGrassGetter>(
                srcGroup: obj.Grasses,
                type: typeof(IGrassGetter),
                modKey: obj.ModKey,
                group: (m) => m.Grasses,
                groupGetter: (m) => m.Grasses))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Tree, ITreeGetter>(
                srcGroup: obj.Trees,
                type: typeof(ITreeGetter),
                modKey: obj.ModKey,
                group: (m) => m.Trees,
                groupGetter: (m) => m.Trees))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Flora, IFloraGetter>(
                srcGroup: obj.Flora,
                type: typeof(IFloraGetter),
                modKey: obj.ModKey,
                group: (m) => m.Flora,
                groupGetter: (m) => m.Flora))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Furniture, IFurnitureGetter>(
                srcGroup: obj.Furniture,
                type: typeof(IFurnitureGetter),
                modKey: obj.ModKey,
                group: (m) => m.Furniture,
                groupGetter: (m) => m.Furniture))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Weapon, IWeaponGetter>(
                srcGroup: obj.Weapons,
                type: typeof(IWeaponGetter),
                modKey: obj.ModKey,
                group: (m) => m.Weapons,
                groupGetter: (m) => m.Weapons))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Ammunition, IAmmunitionGetter>(
                srcGroup: obj.Ammunitions,
                type: typeof(IAmmunitionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Ammunitions,
                groupGetter: (m) => m.Ammunitions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Npc, INpcGetter>(
                srcGroup: obj.Npcs,
                type: typeof(INpcGetter),
                modKey: obj.ModKey,
                group: (m) => m.Npcs,
                groupGetter: (m) => m.Npcs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Creature, ICreatureGetter>(
                srcGroup: obj.Creatures,
                type: typeof(ICreatureGetter),
                modKey: obj.ModKey,
                group: (m) => m.Creatures,
                groupGetter: (m) => m.Creatures))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, LeveledCreature, ILeveledCreatureGetter>(
                srcGroup: obj.LeveledCreatures,
                type: typeof(ILeveledCreatureGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledCreatures,
                groupGetter: (m) => m.LeveledCreatures))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, SoulGem, ISoulGemGetter>(
                srcGroup: obj.SoulGems,
                type: typeof(ISoulGemGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoulGems,
                groupGetter: (m) => m.SoulGems))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Key, IKeyGetter>(
                srcGroup: obj.Keys,
                type: typeof(IKeyGetter),
                modKey: obj.ModKey,
                group: (m) => m.Keys,
                groupGetter: (m) => m.Keys))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Potion, IPotionGetter>(
                srcGroup: obj.Potions,
                type: typeof(IPotionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Potions,
                groupGetter: (m) => m.Potions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Subspace, ISubspaceGetter>(
                srcGroup: obj.Subspaces,
                type: typeof(ISubspaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Subspaces,
                groupGetter: (m) => m.Subspaces))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, SigilStone, ISigilStoneGetter>(
                srcGroup: obj.SigilStones,
                type: typeof(ISigilStoneGetter),
                modKey: obj.ModKey,
                group: (m) => m.SigilStones,
                groupGetter: (m) => m.SigilStones))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, LeveledItem, ILeveledItemGetter>(
                srcGroup: obj.LeveledItems,
                type: typeof(ILeveledItemGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledItems,
                groupGetter: (m) => m.LeveledItems))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Weather, IWeatherGetter>(
                srcGroup: obj.Weathers,
                type: typeof(IWeatherGetter),
                modKey: obj.ModKey,
                group: (m) => m.Weathers,
                groupGetter: (m) => m.Weathers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Climate, IClimateGetter>(
                srcGroup: obj.Climates,
                type: typeof(IClimateGetter),
                modKey: obj.ModKey,
                group: (m) => m.Climates,
                groupGetter: (m) => m.Climates))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Region, IRegionGetter>(
                srcGroup: obj.Regions,
                type: typeof(IRegionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Regions,
                groupGetter: (m) => m.Regions))
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                linkCache: linkCache,
                modKey: obj.ModKey,
                parent: null))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Worldspace, IWorldspaceGetter>(
                srcGroup: obj.Worldspaces,
                type: typeof(IWorldspaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Worldspaces,
                groupGetter: (m) => m.Worldspaces))
            {
                yield return item;
            }
            foreach (var groupItem in obj.Worldspaces)
            {
                foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                    duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                {
                    yield return item;
                }
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, DialogTopic, IDialogTopicGetter>(
                srcGroup: obj.DialogTopics,
                type: typeof(IDialogTopicGetter),
                modKey: obj.ModKey,
                group: (m) => m.DialogTopics,
                groupGetter: (m) => m.DialogTopics))
            {
                yield return item;
            }
            foreach (var groupItem in obj.DialogTopics)
            {
                foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(linkCache.Resolve<IDialogTopicGetter>(r.FormKey)),
                    duplicateInto: (m, r, e, f) => m.DialogTopics.DuplicateInAsNewRecord(linkCache.Resolve<IDialogTopicGetter>(r.FormKey), e, f)))
                {
                    yield return item;
                }
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Quest, IQuestGetter>(
                srcGroup: obj.Quests,
                type: typeof(IQuestGetter),
                modKey: obj.ModKey,
                group: (m) => m.Quests,
                groupGetter: (m) => m.Quests))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, IdleAnimation, IIdleAnimationGetter>(
                srcGroup: obj.IdleAnimations,
                type: typeof(IIdleAnimationGetter),
                modKey: obj.ModKey,
                group: (m) => m.IdleAnimations,
                groupGetter: (m) => m.IdleAnimations))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, AIPackage, IAIPackageGetter>(
                srcGroup: obj.AIPackages,
                type: typeof(IAIPackageGetter),
                modKey: obj.ModKey,
                group: (m) => m.AIPackages,
                groupGetter: (m) => m.AIPackages))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, CombatStyle, ICombatStyleGetter>(
                srcGroup: obj.CombatStyles,
                type: typeof(ICombatStyleGetter),
                modKey: obj.ModKey,
                group: (m) => m.CombatStyles,
                groupGetter: (m) => m.CombatStyles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, LoadScreen, ILoadScreenGetter>(
                srcGroup: obj.LoadScreens,
                type: typeof(ILoadScreenGetter),
                modKey: obj.ModKey,
                group: (m) => m.LoadScreens,
                groupGetter: (m) => m.LoadScreens))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, LeveledSpell, ILeveledSpellGetter>(
                srcGroup: obj.LeveledSpells,
                type: typeof(ILeveledSpellGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledSpells,
                groupGetter: (m) => m.LeveledSpells))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, AnimatedObject, IAnimatedObjectGetter>(
                srcGroup: obj.AnimatedObjects,
                type: typeof(IAnimatedObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.AnimatedObjects,
                groupGetter: (m) => m.AnimatedObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Water, IWaterGetter>(
                srcGroup: obj.Waters,
                type: typeof(IWaterGetter),
                modKey: obj.ModKey,
                group: (m) => m.Waters,
                groupGetter: (m) => m.Waters))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, EffectShader, IEffectShaderGetter>(
                srcGroup: obj.EffectShaders,
                type: typeof(IEffectShaderGetter),
                modKey: obj.ModKey,
                group: (m) => m.EffectShaders,
                groupGetter: (m) => m.EffectShaders))
            {
                yield return item;
            }
        }
        
        public IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IOblivionModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IOblivionMajorRecord":
                case "OblivionMajorRecord":
                    if (!OblivionMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IOblivionMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, GameSetting, IGameSettingGetter>(
                        srcGroup: obj.GameSettings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GameSettings,
                        groupGetter: (m) => m.GameSettings))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Global, IGlobalGetter>(
                        srcGroup: obj.Globals,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Globals,
                        groupGetter: (m) => m.Globals))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Class, IClassGetter>(
                        srcGroup: obj.Classes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Classes,
                        groupGetter: (m) => m.Classes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Faction, IFactionGetter>(
                        srcGroup: obj.Factions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Factions,
                        groupGetter: (m) => m.Factions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Hair, IHairGetter>(
                        srcGroup: obj.Hairs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Hairs,
                        groupGetter: (m) => m.Hairs))
                    {
                        yield return item;
                    }
                    yield break;
                case "Eye":
                case "IEyeGetter":
                case "IEye":
                case "IEyeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Eye, IEyeGetter>(
                        srcGroup: obj.Eyes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Eyes,
                        groupGetter: (m) => m.Eyes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Race, IRaceGetter>(
                        srcGroup: obj.Races,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Races,
                        groupGetter: (m) => m.Races))
                    {
                        yield return item;
                    }
                    yield break;
                case "Sound":
                case "ISoundGetter":
                case "ISound":
                case "ISoundInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Sound, ISoundGetter>(
                        srcGroup: obj.Sounds,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Sounds,
                        groupGetter: (m) => m.Sounds))
                    {
                        yield return item;
                    }
                    yield break;
                case "SkillRecord":
                case "ISkillRecordGetter":
                case "ISkillRecord":
                case "ISkillRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, SkillRecord, ISkillRecordGetter>(
                        srcGroup: obj.Skills,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Skills,
                        groupGetter: (m) => m.Skills))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, MagicEffect, IMagicEffectGetter>(
                        srcGroup: obj.MagicEffects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MagicEffects,
                        groupGetter: (m) => m.MagicEffects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Script":
                case "IScriptGetter":
                case "IScript":
                case "IScriptInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Script, IScriptGetter>(
                        srcGroup: obj.Scripts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Scripts,
                        groupGetter: (m) => m.Scripts))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandTexture":
                case "ILandTextureGetter":
                case "ILandTexture":
                case "ILandTextureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, LandTexture, ILandTextureGetter>(
                        srcGroup: obj.LandTextures,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LandTextures,
                        groupGetter: (m) => m.LandTextures))
                    {
                        yield return item;
                    }
                    yield break;
                case "Enchantment":
                case "IEnchantmentGetter":
                case "IEnchantment":
                case "IEnchantmentInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Enchantment, IEnchantmentGetter>(
                        srcGroup: obj.Enchantments,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Enchantments,
                        groupGetter: (m) => m.Enchantments))
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Spell, ISpellGetter>(
                        srcGroup: obj.Spells,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Spells,
                        groupGetter: (m) => m.Spells))
                    {
                        yield return item;
                    }
                    yield break;
                case "Birthsign":
                case "IBirthsignGetter":
                case "IBirthsign":
                case "IBirthsignInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Birthsign, IBirthsignGetter>(
                        srcGroup: obj.Birthsigns,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Birthsigns,
                        groupGetter: (m) => m.Birthsigns))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Activator, IActivatorGetter>(
                        srcGroup: obj.Activators,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Activators,
                        groupGetter: (m) => m.Activators))
                    {
                        yield return item;
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, AlchemicalApparatus, IAlchemicalApparatusGetter>(
                        srcGroup: obj.AlchemicalApparatus,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AlchemicalApparatus,
                        groupGetter: (m) => m.AlchemicalApparatus))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Armor, IArmorGetter>(
                        srcGroup: obj.Armors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Armors,
                        groupGetter: (m) => m.Armors))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Book, IBookGetter>(
                        srcGroup: obj.Books,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Books,
                        groupGetter: (m) => m.Books))
                    {
                        yield return item;
                    }
                    yield break;
                case "Clothing":
                case "IClothingGetter":
                case "IClothing":
                case "IClothingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Clothing, IClothingGetter>(
                        srcGroup: obj.Clothes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Clothes,
                        groupGetter: (m) => m.Clothes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Container, IContainerGetter>(
                        srcGroup: obj.Containers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Containers,
                        groupGetter: (m) => m.Containers))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Door, IDoorGetter>(
                        srcGroup: obj.Doors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Doors,
                        groupGetter: (m) => m.Doors))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Ingredient, IIngredientGetter>(
                        srcGroup: obj.Ingredients,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Ingredients,
                        groupGetter: (m) => m.Ingredients))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Light, ILightGetter>(
                        srcGroup: obj.Lights,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Lights,
                        groupGetter: (m) => m.Lights))
                    {
                        yield return item;
                    }
                    yield break;
                case "Miscellaneous":
                case "IMiscellaneousGetter":
                case "IMiscellaneous":
                case "IMiscellaneousInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Miscellaneous, IMiscellaneousGetter>(
                        srcGroup: obj.Miscellaneous,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Miscellaneous,
                        groupGetter: (m) => m.Miscellaneous))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Static, IStaticGetter>(
                        srcGroup: obj.Statics,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Statics,
                        groupGetter: (m) => m.Statics))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Grass, IGrassGetter>(
                        srcGroup: obj.Grasses,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Grasses,
                        groupGetter: (m) => m.Grasses))
                    {
                        yield return item;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Tree, ITreeGetter>(
                        srcGroup: obj.Trees,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Trees,
                        groupGetter: (m) => m.Trees))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Flora, IFloraGetter>(
                        srcGroup: obj.Flora,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Flora,
                        groupGetter: (m) => m.Flora))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Furniture, IFurnitureGetter>(
                        srcGroup: obj.Furniture,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Furniture,
                        groupGetter: (m) => m.Furniture))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Weapon, IWeaponGetter>(
                        srcGroup: obj.Weapons,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Weapons,
                        groupGetter: (m) => m.Weapons))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Ammunition, IAmmunitionGetter>(
                        srcGroup: obj.Ammunitions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Ammunitions,
                        groupGetter: (m) => m.Ammunitions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Npc, INpcGetter>(
                        srcGroup: obj.Npcs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Npcs,
                        groupGetter: (m) => m.Npcs))
                    {
                        yield return item;
                    }
                    yield break;
                case "Creature":
                case "ICreatureGetter":
                case "ICreature":
                case "ICreatureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Creature, ICreatureGetter>(
                        srcGroup: obj.Creatures,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Creatures,
                        groupGetter: (m) => m.Creatures))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledCreature":
                case "ILeveledCreatureGetter":
                case "ILeveledCreature":
                case "ILeveledCreatureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, LeveledCreature, ILeveledCreatureGetter>(
                        srcGroup: obj.LeveledCreatures,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledCreatures,
                        groupGetter: (m) => m.LeveledCreatures))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, SoulGem, ISoulGemGetter>(
                        srcGroup: obj.SoulGems,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoulGems,
                        groupGetter: (m) => m.SoulGems))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Key, IKeyGetter>(
                        srcGroup: obj.Keys,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Keys,
                        groupGetter: (m) => m.Keys))
                    {
                        yield return item;
                    }
                    yield break;
                case "Potion":
                case "IPotionGetter":
                case "IPotion":
                case "IPotionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Potion, IPotionGetter>(
                        srcGroup: obj.Potions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Potions,
                        groupGetter: (m) => m.Potions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Subspace":
                case "ISubspaceGetter":
                case "ISubspace":
                case "ISubspaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Subspace, ISubspaceGetter>(
                        srcGroup: obj.Subspaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Subspaces,
                        groupGetter: (m) => m.Subspaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "SigilStone":
                case "ISigilStoneGetter":
                case "ISigilStone":
                case "ISigilStoneInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, SigilStone, ISigilStoneGetter>(
                        srcGroup: obj.SigilStones,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SigilStones,
                        groupGetter: (m) => m.SigilStones))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, LeveledItem, ILeveledItemGetter>(
                        srcGroup: obj.LeveledItems,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledItems,
                        groupGetter: (m) => m.LeveledItems))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Weather, IWeatherGetter>(
                        srcGroup: obj.Weathers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Weathers,
                        groupGetter: (m) => m.Weathers))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Climate, IClimateGetter>(
                        srcGroup: obj.Climates,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Climates,
                        groupGetter: (m) => m.Climates))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Region, IRegionGetter>(
                        srcGroup: obj.Regions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Regions,
                        groupGetter: (m) => m.Regions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Worldspace, IWorldspaceGetter>(
                        srcGroup: obj.Worldspaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Worldspaces,
                        groupGetter: (m) => m.Worldspaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, DialogTopic, IDialogTopicGetter>(
                        srcGroup: obj.DialogTopics,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DialogTopics,
                        groupGetter: (m) => m.DialogTopics))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Quest, IQuestGetter>(
                        srcGroup: obj.Quests,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Quests,
                        groupGetter: (m) => m.Quests))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, IdleAnimation, IIdleAnimationGetter>(
                        srcGroup: obj.IdleAnimations,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.IdleAnimations,
                        groupGetter: (m) => m.IdleAnimations))
                    {
                        yield return item;
                    }
                    yield break;
                case "AIPackage":
                case "IAIPackageGetter":
                case "IAIPackage":
                case "IAIPackageInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, AIPackage, IAIPackageGetter>(
                        srcGroup: obj.AIPackages,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AIPackages,
                        groupGetter: (m) => m.AIPackages))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, CombatStyle, ICombatStyleGetter>(
                        srcGroup: obj.CombatStyles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CombatStyles,
                        groupGetter: (m) => m.CombatStyles))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, LoadScreen, ILoadScreenGetter>(
                        srcGroup: obj.LoadScreens,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LoadScreens,
                        groupGetter: (m) => m.LoadScreens))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, LeveledSpell, ILeveledSpellGetter>(
                        srcGroup: obj.LeveledSpells,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledSpells,
                        groupGetter: (m) => m.LeveledSpells))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, AnimatedObject, IAnimatedObjectGetter>(
                        srcGroup: obj.AnimatedObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AnimatedObjects,
                        groupGetter: (m) => m.AnimatedObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, Water, IWaterGetter>(
                        srcGroup: obj.Waters,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Waters,
                        groupGetter: (m) => m.Waters))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IOblivionMod, IOblivionModGetter, EffectShader, IEffectShaderGetter>(
                        srcGroup: obj.EffectShaders,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.EffectShaders,
                        groupGetter: (m) => m.EffectShaders))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PathGrid":
                case "IPathGridGetter":
                case "IPathGrid":
                case "IPathGridInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedCreature":
                case "IPlacedCreatureGetter":
                case "IPlacedCreature":
                case "IPlacedCreatureInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Road":
                case "IRoadGetter":
                case "IRoad":
                case "IRoadInternal":
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogItem":
                case "IDialogItemGetter":
                case "IDialogItem":
                case "IDialogItemInternal":
                    foreach (var groupItem in obj.DialogTopics)
                    {
                        foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(linkCache.Resolve<IDialogTopicGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.DialogTopics.DuplicateInAsNewRecord(linkCache.Resolve<IDialogTopicGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<IOblivionModGetter, IOblivionMod, IOblivionModGetter>(
                        GameCategory.Oblivion,
                        obj,
                        type,
                        linkCache,
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IOblivionModGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            if (obj.Cells is IAssetLinkContainerGetter CellslinkCont)
            {
                foreach (var item in CellslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Worldspaces is IAssetLinkContainerGetter WorldspaceslinkCont)
            {
                foreach (var item in WorldspaceslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class OblivionModSetterTranslationCommon
    {
        public static readonly OblivionModSetterTranslationCommon Instance = new OblivionModSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IOblivionMod item,
            IOblivionModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyIn(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyIn(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Hairs);
                try
                {
                    item.Hairs.DeepCopyIn(
                        rhs: rhs.Hairs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Hairs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Eyes);
                try
                {
                    item.Eyes.DeepCopyIn(
                        rhs: rhs.Eyes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Eyes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyIn(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Sounds);
                try
                {
                    item.Sounds.DeepCopyIn(
                        rhs: rhs.Sounds,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Sounds));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Skills) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Skills);
                try
                {
                    item.Skills.DeepCopyIn(
                        rhs: rhs.Skills,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Skills));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.MagicEffects) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.MagicEffects);
                try
                {
                    item.MagicEffects.DeepCopyIn(
                        rhs: rhs.MagicEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.MagicEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Scripts) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Scripts);
                try
                {
                    item.Scripts.DeepCopyIn(
                        rhs: rhs.Scripts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Scripts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LandTextures) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LandTextures);
                try
                {
                    item.LandTextures.DeepCopyIn(
                        rhs: rhs.LandTextures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LandTextures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Enchantments) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Enchantments);
                try
                {
                    item.Enchantments.DeepCopyIn(
                        rhs: rhs.Enchantments,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Enchantments));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Spells);
                try
                {
                    item.Spells.DeepCopyIn(
                        rhs: rhs.Spells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Spells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Birthsigns) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Birthsigns);
                try
                {
                    item.Birthsigns.DeepCopyIn(
                        rhs: rhs.Birthsigns,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Birthsigns));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Activators) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Activators);
                try
                {
                    item.Activators.DeepCopyIn(
                        rhs: rhs.Activators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Activators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AlchemicalApparatus) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AlchemicalApparatus);
                try
                {
                    item.AlchemicalApparatus.DeepCopyIn(
                        rhs: rhs.AlchemicalApparatus,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AlchemicalApparatus));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Armors) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Armors);
                try
                {
                    item.Armors.DeepCopyIn(
                        rhs: rhs.Armors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Armors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Books) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Books);
                try
                {
                    item.Books.DeepCopyIn(
                        rhs: rhs.Books,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Books));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Clothes) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Clothes);
                try
                {
                    item.Clothes.DeepCopyIn(
                        rhs: rhs.Clothes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Clothes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Containers) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Containers);
                try
                {
                    item.Containers.DeepCopyIn(
                        rhs: rhs.Containers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Containers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Doors) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Doors);
                try
                {
                    item.Doors.DeepCopyIn(
                        rhs: rhs.Doors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Doors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ingredients) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ingredients);
                try
                {
                    item.Ingredients.DeepCopyIn(
                        rhs: rhs.Ingredients,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Ingredients));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Lights) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Lights);
                try
                {
                    item.Lights.DeepCopyIn(
                        rhs: rhs.Lights,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Lights));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Miscellaneous) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Miscellaneous);
                try
                {
                    item.Miscellaneous.DeepCopyIn(
                        rhs: rhs.Miscellaneous,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Miscellaneous));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Statics) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Statics);
                try
                {
                    item.Statics.DeepCopyIn(
                        rhs: rhs.Statics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Statics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Grasses);
                try
                {
                    item.Grasses.DeepCopyIn(
                        rhs: rhs.Grasses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Grasses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Trees) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Trees);
                try
                {
                    item.Trees.DeepCopyIn(
                        rhs: rhs.Trees,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Trees));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Flora) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Flora);
                try
                {
                    item.Flora.DeepCopyIn(
                        rhs: rhs.Flora,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Flora));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Furniture) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Furniture);
                try
                {
                    item.Furniture.DeepCopyIn(
                        rhs: rhs.Furniture,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Furniture));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weapons) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weapons);
                try
                {
                    item.Weapons.DeepCopyIn(
                        rhs: rhs.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Weapons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Ammunitions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Ammunitions);
                try
                {
                    item.Ammunitions.DeepCopyIn(
                        rhs: rhs.Ammunitions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Ammunitions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Npcs) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Npcs);
                try
                {
                    item.Npcs.DeepCopyIn(
                        rhs: rhs.Npcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Npcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Creatures) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Creatures);
                try
                {
                    item.Creatures.DeepCopyIn(
                        rhs: rhs.Creatures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Creatures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledCreatures) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledCreatures);
                try
                {
                    item.LeveledCreatures.DeepCopyIn(
                        rhs: rhs.LeveledCreatures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledCreatures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SoulGems) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.SoulGems);
                try
                {
                    item.SoulGems.DeepCopyIn(
                        rhs: rhs.SoulGems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.SoulGems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Keys) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Keys);
                try
                {
                    item.Keys.DeepCopyIn(
                        rhs: rhs.Keys,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Keys));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Potions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Potions);
                try
                {
                    item.Potions.DeepCopyIn(
                        rhs: rhs.Potions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Potions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Subspaces) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Subspaces);
                try
                {
                    item.Subspaces.DeepCopyIn(
                        rhs: rhs.Subspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Subspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.SigilStones) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.SigilStones);
                try
                {
                    item.SigilStones.DeepCopyIn(
                        rhs: rhs.SigilStones,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.SigilStones));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledItems) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledItems);
                try
                {
                    item.LeveledItems.DeepCopyIn(
                        rhs: rhs.LeveledItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Weathers) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Weathers);
                try
                {
                    item.Weathers.DeepCopyIn(
                        rhs: rhs.Weathers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Weathers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Climates) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Climates);
                try
                {
                    item.Climates.DeepCopyIn(
                        rhs: rhs.Climates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Climates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Regions);
                try
                {
                    item.Regions.DeepCopyIn(
                        rhs: rhs.Regions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Regions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Cells) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Cells);
                try
                {
                    item.Cells.DeepCopyIn(
                        rhs: rhs.Cells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Cells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Worldspaces) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Worldspaces);
                try
                {
                    item.Worldspaces.DeepCopyIn(
                        rhs: rhs.Worldspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Worldspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.DialogTopics) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.DialogTopics);
                try
                {
                    item.DialogTopics.DeepCopyIn(
                        rhs: rhs.DialogTopics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.DialogTopics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Quests);
                try
                {
                    item.Quests.DeepCopyIn(
                        rhs: rhs.Quests,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Quests));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.IdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.IdleAnimations);
                try
                {
                    item.IdleAnimations.DeepCopyIn(
                        rhs: rhs.IdleAnimations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.IdleAnimations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AIPackages) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AIPackages);
                try
                {
                    item.AIPackages.DeepCopyIn(
                        rhs: rhs.AIPackages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AIPackages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.CombatStyles) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.CombatStyles);
                try
                {
                    item.CombatStyles.DeepCopyIn(
                        rhs: rhs.CombatStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.CombatStyles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LoadScreens) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LoadScreens);
                try
                {
                    item.LoadScreens.DeepCopyIn(
                        rhs: rhs.LoadScreens,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LoadScreens));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.LeveledSpells) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.LeveledSpells);
                try
                {
                    item.LeveledSpells.DeepCopyIn(
                        rhs: rhs.LeveledSpells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.LeveledSpells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.AnimatedObjects) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.AnimatedObjects);
                try
                {
                    item.AnimatedObjects.DeepCopyIn(
                        rhs: rhs.AnimatedObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.AnimatedObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.Waters) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.Waters);
                try
                {
                    item.Waters.DeepCopyIn(
                        rhs: rhs.Waters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.Waters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)OblivionMod_FieldIndex.EffectShaders) ?? true))
            {
                errorMask?.PushIndex((int)OblivionMod_FieldIndex.EffectShaders);
                try
                {
                    item.EffectShaders.DeepCopyIn(
                        rhs: rhs.EffectShaders,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)OblivionMod_FieldIndex.EffectShaders));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IOblivionMod item,
            IOblivionModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public partial OblivionMod DeepCopyGetNew(IOblivionModGetter item);
        public OblivionMod DeepCopy(
            IOblivionModGetter item,
            OblivionMod.TranslationMask? copyMask = null)
        {
            var ret = DeepCopyGetNew(item);
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public OblivionMod DeepCopy(
            IOblivionModGetter item,
            out OblivionMod.ErrorMask errorMask,
            OblivionMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            var ret = DeepCopyGetNew(item);
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = OblivionMod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public OblivionMod DeepCopy(
            IOblivionModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            var ret = DeepCopyGetNew(item);
            ((OblivionModSetterTranslationCommon)((IOblivionModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Oblivion
{
    public partial class OblivionMod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OblivionMod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => OblivionMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => OblivionModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return OblivionModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => OblivionModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IOblivionModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IOblivionModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IOblivionModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Mutagen
namespace Mutagen.Bethesda.Oblivion
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Globals;
        public bool Classes;
        public bool Factions;
        public bool Hairs;
        public bool Eyes;
        public bool Races;
        public bool Sounds;
        public bool Skills;
        public bool MagicEffects;
        public bool Scripts;
        public bool LandTextures;
        public bool Enchantments;
        public bool Spells;
        public bool Birthsigns;
        public bool Activators;
        public bool AlchemicalApparatus;
        public bool Armors;
        public bool Books;
        public bool Clothes;
        public bool Containers;
        public bool Doors;
        public bool Ingredients;
        public bool Lights;
        public bool Miscellaneous;
        public bool Statics;
        public bool Grasses;
        public bool Trees;
        public bool Flora;
        public bool Furniture;
        public bool Weapons;
        public bool Ammunitions;
        public bool Npcs;
        public bool Creatures;
        public bool LeveledCreatures;
        public bool SoulGems;
        public bool Keys;
        public bool Potions;
        public bool Subspaces;
        public bool SigilStones;
        public bool LeveledItems;
        public bool Weathers;
        public bool Climates;
        public bool Regions;
        public bool Cells;
        public bool Worldspaces;
        public bool DialogTopics;
        public bool Quests;
        public bool IdleAnimations;
        public bool AIPackages;
        public bool CombatStyles;
        public bool LoadScreens;
        public bool LeveledSpells;
        public bool AnimatedObjects;
        public bool Waters;
        public bool EffectShaders;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Globals = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            Hairs = defaultValue;
            Eyes = defaultValue;
            Races = defaultValue;
            Sounds = defaultValue;
            Skills = defaultValue;
            MagicEffects = defaultValue;
            Scripts = defaultValue;
            LandTextures = defaultValue;
            Enchantments = defaultValue;
            Spells = defaultValue;
            Birthsigns = defaultValue;
            Activators = defaultValue;
            AlchemicalApparatus = defaultValue;
            Armors = defaultValue;
            Books = defaultValue;
            Clothes = defaultValue;
            Containers = defaultValue;
            Doors = defaultValue;
            Ingredients = defaultValue;
            Lights = defaultValue;
            Miscellaneous = defaultValue;
            Statics = defaultValue;
            Grasses = defaultValue;
            Trees = defaultValue;
            Flora = defaultValue;
            Furniture = defaultValue;
            Weapons = defaultValue;
            Ammunitions = defaultValue;
            Npcs = defaultValue;
            Creatures = defaultValue;
            LeveledCreatures = defaultValue;
            SoulGems = defaultValue;
            Keys = defaultValue;
            Potions = defaultValue;
            Subspaces = defaultValue;
            SigilStones = defaultValue;
            LeveledItems = defaultValue;
            Weathers = defaultValue;
            Climates = defaultValue;
            Regions = defaultValue;
            Cells = defaultValue;
            Worldspaces = defaultValue;
            DialogTopics = defaultValue;
            Quests = defaultValue;
            IdleAnimations = defaultValue;
            AIPackages = defaultValue;
            CombatStyles = defaultValue;
            LoadScreens = defaultValue;
            LeveledSpells = defaultValue;
            AnimatedObjects = defaultValue;
            Waters = defaultValue;
            EffectShaders = defaultValue;
        }
    }

    public interface IOblivionModDisposableGetter : IOblivionModGetter, IModDisposeGetter
    {
    }

    /// <summary>
    /// Different game release versions a Oblivion mod can have
    /// </summary>
    public enum OblivionRelease
    {
        Oblivion = 0,
        OblivionRE = 10
    }

    public static class OblivionReleaseExt
    {
        public static GameRelease ToGameRelease(this OblivionRelease release)
        {
            return release switch
            {
                OblivionRelease.Oblivion => GameRelease.Oblivion,
                OblivionRelease.OblivionRE => GameRelease.OblivionRE,
                _ => throw new ArgumentException()
            };
        }

        public static OblivionRelease ToOblivionRelease(this GameRelease release)
        {
            return release switch
            {
                GameRelease.Oblivion => OblivionRelease.Oblivion,
                GameRelease.OblivionRE => OblivionRelease.OblivionRE,
                _ => throw new ArgumentException()
            };
        }
    }
}
namespace Mutagen.Bethesda.Oblivion
{
    internal partial class OblivionMod_Registration : IModRegistration
    {
        public GameCategory GameCategory => GameCategory.Oblivion;
    }

}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Oblivion
{
    public partial class OblivionModBinaryWriteTranslation
    {
        public static readonly OblivionModBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IOblivionModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            TypedWriteParams translationParams = default)
        {
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Globals ?? true)
            {
                var GlobalsItem = item.Globals;
                if (GlobalsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)GlobalsItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: GlobalsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Classes ?? true)
            {
                var ClassesItem = item.Classes;
                if (ClassesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)ClassesItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: ClassesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Factions ?? true)
            {
                var FactionsItem = item.Factions;
                if (FactionsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)FactionsItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: FactionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Hairs ?? true)
            {
                var HairsItem = item.Hairs;
                if (HairsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)HairsItem).BinaryWriteTranslator).Write<IHairGetter>(
                        item: HairsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Eyes ?? true)
            {
                var EyesItem = item.Eyes;
                if (EyesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)EyesItem).BinaryWriteTranslator).Write<IEyeGetter>(
                        item: EyesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Races ?? true)
            {
                var RacesItem = item.Races;
                if (RacesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)RacesItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: RacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Sounds ?? true)
            {
                var SoundsItem = item.Sounds;
                if (SoundsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)SoundsItem).BinaryWriteTranslator).Write<ISoundGetter>(
                        item: SoundsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Skills ?? true)
            {
                var SkillsItem = item.Skills;
                if (SkillsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)SkillsItem).BinaryWriteTranslator).Write<ISkillRecordGetter>(
                        item: SkillsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MagicEffects ?? true)
            {
                var MagicEffectsItem = item.MagicEffects;
                if (MagicEffectsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)MagicEffectsItem).BinaryWriteTranslator).Write<IMagicEffectGetter>(
                        item: MagicEffectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Scripts ?? true)
            {
                var ScriptsItem = item.Scripts;
                if (ScriptsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)ScriptsItem).BinaryWriteTranslator).Write<IScriptGetter>(
                        item: ScriptsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LandTextures ?? true)
            {
                var LandTexturesItem = item.LandTextures;
                if (LandTexturesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)LandTexturesItem).BinaryWriteTranslator).Write<ILandTextureGetter>(
                        item: LandTexturesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Enchantments ?? true)
            {
                var EnchantmentsItem = item.Enchantments;
                if (EnchantmentsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)EnchantmentsItem).BinaryWriteTranslator).Write<IEnchantmentGetter>(
                        item: EnchantmentsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Spells ?? true)
            {
                var SpellsItem = item.Spells;
                if (SpellsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)SpellsItem).BinaryWriteTranslator).Write<ISpellGetter>(
                        item: SpellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Birthsigns ?? true)
            {
                var BirthsignsItem = item.Birthsigns;
                if (BirthsignsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)BirthsignsItem).BinaryWriteTranslator).Write<IBirthsignGetter>(
                        item: BirthsignsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Activators ?? true)
            {
                var ActivatorsItem = item.Activators;
                if (ActivatorsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)ActivatorsItem).BinaryWriteTranslator).Write<IActivatorGetter>(
                        item: ActivatorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AlchemicalApparatus ?? true)
            {
                var AlchemicalApparatusItem = item.AlchemicalApparatus;
                if (AlchemicalApparatusItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)AlchemicalApparatusItem).BinaryWriteTranslator).Write<IAlchemicalApparatusGetter>(
                        item: AlchemicalApparatusItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Armors ?? true)
            {
                var ArmorsItem = item.Armors;
                if (ArmorsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)ArmorsItem).BinaryWriteTranslator).Write<IArmorGetter>(
                        item: ArmorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Books ?? true)
            {
                var BooksItem = item.Books;
                if (BooksItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)BooksItem).BinaryWriteTranslator).Write<IBookGetter>(
                        item: BooksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Clothes ?? true)
            {
                var ClothesItem = item.Clothes;
                if (ClothesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)ClothesItem).BinaryWriteTranslator).Write<IClothingGetter>(
                        item: ClothesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Containers ?? true)
            {
                var ContainersItem = item.Containers;
                if (ContainersItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)ContainersItem).BinaryWriteTranslator).Write<IContainerGetter>(
                        item: ContainersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Doors ?? true)
            {
                var DoorsItem = item.Doors;
                if (DoorsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)DoorsItem).BinaryWriteTranslator).Write<IDoorGetter>(
                        item: DoorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Ingredients ?? true)
            {
                var IngredientsItem = item.Ingredients;
                if (IngredientsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)IngredientsItem).BinaryWriteTranslator).Write<IIngredientGetter>(
                        item: IngredientsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Lights ?? true)
            {
                var LightsItem = item.Lights;
                if (LightsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)LightsItem).BinaryWriteTranslator).Write<ILightGetter>(
                        item: LightsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Miscellaneous ?? true)
            {
                var MiscellaneousItem = item.Miscellaneous;
                if (MiscellaneousItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)MiscellaneousItem).BinaryWriteTranslator).Write<IMiscellaneousGetter>(
                        item: MiscellaneousItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Statics ?? true)
            {
                var StaticsItem = item.Statics;
                if (StaticsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)StaticsItem).BinaryWriteTranslator).Write<IStaticGetter>(
                        item: StaticsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Grasses ?? true)
            {
                var GrassesItem = item.Grasses;
                if (GrassesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)GrassesItem).BinaryWriteTranslator).Write<IGrassGetter>(
                        item: GrassesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Trees ?? true)
            {
                var TreesItem = item.Trees;
                if (TreesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)TreesItem).BinaryWriteTranslator).Write<ITreeGetter>(
                        item: TreesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Flora ?? true)
            {
                var FloraItem = item.Flora;
                if (FloraItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)FloraItem).BinaryWriteTranslator).Write<IFloraGetter>(
                        item: FloraItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Furniture ?? true)
            {
                var FurnitureItem = item.Furniture;
                if (FurnitureItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)FurnitureItem).BinaryWriteTranslator).Write<IFurnitureGetter>(
                        item: FurnitureItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                var WeaponsItem = item.Weapons;
                if (WeaponsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)WeaponsItem).BinaryWriteTranslator).Write<IWeaponGetter>(
                        item: WeaponsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Ammunitions ?? true)
            {
                var AmmunitionsItem = item.Ammunitions;
                if (AmmunitionsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)AmmunitionsItem).BinaryWriteTranslator).Write<IAmmunitionGetter>(
                        item: AmmunitionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Npcs ?? true)
            {
                var NpcsItem = item.Npcs;
                if (NpcsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)NpcsItem).BinaryWriteTranslator).Write<INpcGetter>(
                        item: NpcsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Creatures ?? true)
            {
                var CreaturesItem = item.Creatures;
                if (CreaturesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)CreaturesItem).BinaryWriteTranslator).Write<ICreatureGetter>(
                        item: CreaturesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledCreatures ?? true)
            {
                var LeveledCreaturesItem = item.LeveledCreatures;
                if (LeveledCreaturesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)LeveledCreaturesItem).BinaryWriteTranslator).Write<ILeveledCreatureGetter>(
                        item: LeveledCreaturesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoulGems ?? true)
            {
                var SoulGemsItem = item.SoulGems;
                if (SoulGemsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)SoulGemsItem).BinaryWriteTranslator).Write<ISoulGemGetter>(
                        item: SoulGemsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Keys ?? true)
            {
                var KeysItem = item.Keys;
                if (KeysItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)KeysItem).BinaryWriteTranslator).Write<IKeyGetter>(
                        item: KeysItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Potions ?? true)
            {
                var PotionsItem = item.Potions;
                if (PotionsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)PotionsItem).BinaryWriteTranslator).Write<IPotionGetter>(
                        item: PotionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Subspaces ?? true)
            {
                var SubspacesItem = item.Subspaces;
                if (SubspacesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)SubspacesItem).BinaryWriteTranslator).Write<ISubspaceGetter>(
                        item: SubspacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SigilStones ?? true)
            {
                var SigilStonesItem = item.SigilStones;
                if (SigilStonesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)SigilStonesItem).BinaryWriteTranslator).Write<ISigilStoneGetter>(
                        item: SigilStonesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledItems ?? true)
            {
                var LeveledItemsItem = item.LeveledItems;
                if (LeveledItemsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)LeveledItemsItem).BinaryWriteTranslator).Write<ILeveledItemGetter>(
                        item: LeveledItemsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Weathers ?? true)
            {
                var WeathersItem = item.Weathers;
                if (WeathersItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)WeathersItem).BinaryWriteTranslator).Write<IWeatherGetter>(
                        item: WeathersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Climates ?? true)
            {
                var ClimatesItem = item.Climates;
                if (ClimatesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)ClimatesItem).BinaryWriteTranslator).Write<IClimateGetter>(
                        item: ClimatesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Regions ?? true)
            {
                var RegionsItem = item.Regions;
                if (RegionsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)RegionsItem).BinaryWriteTranslator).Write<IRegionGetter>(
                        item: RegionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Cells ?? true)
            {
                var CellsItem = item.Cells;
                if (CellsItem.Records.Count > 0)
                {
                    ((OblivionListGroupBinaryWriteTranslation)((IBinaryItem)CellsItem).BinaryWriteTranslator).Write<ICellBlockGetter>(
                        item: CellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Worldspaces ?? true)
            {
                var WorldspacesItem = item.Worldspaces;
                if (WorldspacesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)WorldspacesItem).BinaryWriteTranslator).Write<IWorldspaceGetter>(
                        item: WorldspacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DialogTopics ?? true)
            {
                var DialogTopicsItem = item.DialogTopics;
                if (DialogTopicsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)DialogTopicsItem).BinaryWriteTranslator).Write<IDialogTopicGetter>(
                        item: DialogTopicsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Quests ?? true)
            {
                var QuestsItem = item.Quests;
                if (QuestsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)QuestsItem).BinaryWriteTranslator).Write<IQuestGetter>(
                        item: QuestsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.IdleAnimations ?? true)
            {
                var IdleAnimationsItem = item.IdleAnimations;
                if (IdleAnimationsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)IdleAnimationsItem).BinaryWriteTranslator).Write<IIdleAnimationGetter>(
                        item: IdleAnimationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AIPackages ?? true)
            {
                var AIPackagesItem = item.AIPackages;
                if (AIPackagesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)AIPackagesItem).BinaryWriteTranslator).Write<IAIPackageGetter>(
                        item: AIPackagesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CombatStyles ?? true)
            {
                var CombatStylesItem = item.CombatStyles;
                if (CombatStylesItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)CombatStylesItem).BinaryWriteTranslator).Write<ICombatStyleGetter>(
                        item: CombatStylesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LoadScreens ?? true)
            {
                var LoadScreensItem = item.LoadScreens;
                if (LoadScreensItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)LoadScreensItem).BinaryWriteTranslator).Write<ILoadScreenGetter>(
                        item: LoadScreensItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledSpells ?? true)
            {
                var LeveledSpellsItem = item.LeveledSpells;
                if (LeveledSpellsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)LeveledSpellsItem).BinaryWriteTranslator).Write<ILeveledSpellGetter>(
                        item: LeveledSpellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AnimatedObjects ?? true)
            {
                var AnimatedObjectsItem = item.AnimatedObjects;
                if (AnimatedObjectsItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)AnimatedObjectsItem).BinaryWriteTranslator).Write<IAnimatedObjectGetter>(
                        item: AnimatedObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Waters ?? true)
            {
                var WatersItem = item.Waters;
                if (WatersItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)WatersItem).BinaryWriteTranslator).Write<IWaterGetter>(
                        item: WatersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.EffectShaders ?? true)
            {
                var EffectShadersItem = item.EffectShaders;
                if (EffectShadersItem.RecordCache.Count > 0)
                {
                    ((OblivionGroupBinaryWriteTranslation)((IBinaryItem)EffectShadersItem).BinaryWriteTranslator).Write<IEffectShaderGetter>(
                        item: EffectShadersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IOblivionModGetter item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            param ??= BinaryWriteParameters.Default;
            if (param.Parallel.MaxDegreeOfParallelism != 1)
            {
                OblivionModCommon.WriteParallel(
                    item: item,
                    writer: writer,
                    param: param,
                    modKey: modKey);
                return;
            }
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            Write(
                item: (IOblivionModGetter)item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

    }

    internal partial class OblivionModBinaryCreateTranslation
    {
        public static readonly OblivionModBinaryCreateTranslation Instance = new OblivionModBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IOblivionMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        translationParams: null);
                    return (int)OblivionMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.GLOB:
                {
                    if (importMask?.Globals ?? true)
                    {
                        item.Globals.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Globals;
                }
                case RecordTypeInts.CLAS:
                {
                    if (importMask?.Classes ?? true)
                    {
                        item.Classes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    if (importMask?.Factions ?? true)
                    {
                        item.Factions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Factions;
                }
                case RecordTypeInts.HAIR:
                {
                    if (importMask?.Hairs ?? true)
                    {
                        item.Hairs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Hairs;
                }
                case RecordTypeInts.EYES:
                {
                    if (importMask?.Eyes ?? true)
                    {
                        item.Eyes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Eyes;
                }
                case RecordTypeInts.RACE:
                {
                    if (importMask?.Races ?? true)
                    {
                        item.Races.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    if (importMask?.Sounds ?? true)
                    {
                        item.Sounds.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Sounds;
                }
                case RecordTypeInts.SKIL:
                {
                    if (importMask?.Skills ?? true)
                    {
                        item.Skills.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Skills;
                }
                case RecordTypeInts.MGEF:
                {
                    if (importMask?.MagicEffects ?? true)
                    {
                        item.MagicEffects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.SCPT:
                {
                    if (importMask?.Scripts ?? true)
                    {
                        item.Scripts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Scripts;
                }
                case RecordTypeInts.LTEX:
                {
                    if (importMask?.LandTextures ?? true)
                    {
                        item.LandTextures.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.LandTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    if (importMask?.Enchantments ?? true)
                    {
                        item.Enchantments.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Enchantments;
                }
                case RecordTypeInts.SPEL:
                {
                    if (importMask?.Spells ?? true)
                    {
                        item.Spells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Spells;
                }
                case RecordTypeInts.BSGN:
                {
                    if (importMask?.Birthsigns ?? true)
                    {
                        item.Birthsigns.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Birthsigns;
                }
                case RecordTypeInts.ACTI:
                {
                    if (importMask?.Activators ?? true)
                    {
                        item.Activators.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Activators;
                }
                case RecordTypeInts.APPA:
                {
                    if (importMask?.AlchemicalApparatus ?? true)
                    {
                        item.AlchemicalApparatus.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.AlchemicalApparatus;
                }
                case RecordTypeInts.ARMO:
                {
                    if (importMask?.Armors ?? true)
                    {
                        item.Armors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    if (importMask?.Books ?? true)
                    {
                        item.Books.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Books;
                }
                case RecordTypeInts.CLOT:
                {
                    if (importMask?.Clothes ?? true)
                    {
                        item.Clothes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Clothes;
                }
                case RecordTypeInts.CONT:
                {
                    if (importMask?.Containers ?? true)
                    {
                        item.Containers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    if (importMask?.Doors ?? true)
                    {
                        item.Doors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    if (importMask?.Ingredients ?? true)
                    {
                        item.Ingredients.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    if (importMask?.Lights ?? true)
                    {
                        item.Lights.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    if (importMask?.Miscellaneous ?? true)
                    {
                        item.Miscellaneous.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Miscellaneous;
                }
                case RecordTypeInts.STAT:
                {
                    if (importMask?.Statics ?? true)
                    {
                        item.Statics.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Statics;
                }
                case RecordTypeInts.GRAS:
                {
                    if (importMask?.Grasses ?? true)
                    {
                        item.Grasses.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    if (importMask?.Trees ?? true)
                    {
                        item.Trees.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    if (importMask?.Flora ?? true)
                    {
                        item.Flora.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Flora;
                }
                case RecordTypeInts.FURN:
                {
                    if (importMask?.Furniture ?? true)
                    {
                        item.Furniture.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    if (importMask?.Weapons ?? true)
                    {
                        item.Weapons.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    if (importMask?.Ammunitions ?? true)
                    {
                        item.Ammunitions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    if (importMask?.Npcs ?? true)
                    {
                        item.Npcs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.CREA:
                {
                    if (importMask?.Creatures ?? true)
                    {
                        item.Creatures.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Creatures;
                }
                case RecordTypeInts.LVLC:
                {
                    if (importMask?.LeveledCreatures ?? true)
                    {
                        item.LeveledCreatures.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.LeveledCreatures;
                }
                case RecordTypeInts.SLGM:
                {
                    if (importMask?.SoulGems ?? true)
                    {
                        item.SoulGems.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.SoulGems;
                }
                case RecordTypeInts.KEYM:
                {
                    if (importMask?.Keys ?? true)
                    {
                        item.Keys.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    if (importMask?.Potions ?? true)
                    {
                        item.Potions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Potions;
                }
                case RecordTypeInts.SBSP:
                {
                    if (importMask?.Subspaces ?? true)
                    {
                        item.Subspaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Subspaces;
                }
                case RecordTypeInts.SGST:
                {
                    if (importMask?.SigilStones ?? true)
                    {
                        item.SigilStones.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.SigilStones;
                }
                case RecordTypeInts.LVLI:
                {
                    if (importMask?.LeveledItems ?? true)
                    {
                        item.LeveledItems.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    if (importMask?.Weathers ?? true)
                    {
                        item.Weathers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Weathers;
                }
                case RecordTypeInts.CLMT:
                {
                    if (importMask?.Climates ?? true)
                    {
                        item.Climates.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Climates;
                }
                case RecordTypeInts.REGN:
                {
                    if (importMask?.Regions ?? true)
                    {
                        item.Regions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Regions;
                }
                case RecordTypeInts.CELL:
                {
                    if (importMask?.Cells ?? true)
                    {
                        item.Cells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    if (importMask?.Worldspaces ?? true)
                    {
                        item.Worldspaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.DIAL:
                {
                    if (importMask?.DialogTopics ?? true)
                    {
                        item.DialogTopics.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.DialogTopics;
                }
                case RecordTypeInts.QUST:
                {
                    if (importMask?.Quests ?? true)
                    {
                        item.Quests.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    if (importMask?.IdleAnimations ?? true)
                    {
                        item.IdleAnimations.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    if (importMask?.AIPackages ?? true)
                    {
                        item.AIPackages.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.AIPackages;
                }
                case RecordTypeInts.CSTY:
                {
                    if (importMask?.CombatStyles ?? true)
                    {
                        item.CombatStyles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    if (importMask?.LoadScreens ?? true)
                    {
                        item.LoadScreens.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.LVSP:
                {
                    if (importMask?.LeveledSpells ?? true)
                    {
                        item.LeveledSpells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.LeveledSpells;
                }
                case RecordTypeInts.ANIO:
                {
                    if (importMask?.AnimatedObjects ?? true)
                    {
                        item.AnimatedObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    if (importMask?.Waters ?? true)
                    {
                        item.Waters.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    if (importMask?.EffectShaders ?? true)
                    {
                        item.EffectShaders.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)OblivionMod_FieldIndex.EffectShaders;
                }
                default:
                    frame.Position += contentLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Oblivion
{
    #region Binary Write Mixins
    public static class OblivionModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IOblivionModGetter item,
            MutagenWriter writer,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            var modKey = item.ModKey;
            OblivionModBinaryWriteTranslation.Instance.Write(
                item: item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            FilePath path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            var bundle = new WritingBundle(item.OblivionRelease.ToGameRelease())
            {
                CleanNulls = param.CleanNulls,
                TargetLanguageOverride = param.TargetLanguageOverride,
                Header = item
            };
            if (param.Encodings != null)
            {
                bundle.Encodings = param.Encodings;
            }
            using var memStream = new MemoryTributary();
            using (var writer = new MutagenWriter(
                memStream,
                bundle,
                dispose: false))
            {
                OblivionModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
            using (var fs = param.FileSystem.GetOrDefault().FileStream.New(path, FileMode.Create, FileAccess.Write))
            {
                memStream.Position = 0;
                memStream.CopyTo(fs);
            }
            param.StringsWriter?.Dispose();
        }

        public static void WriteToBinary(
            this IOblivionModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(
                stream: stream,
                new WritingBundle(item.OblivionRelease.ToGameRelease()),
                dispose: false))
            {
                OblivionModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Oblivion
{
    [DebuggerDisplay("{GameRelease} {ModKey.ToString()}")]
    internal partial class OblivionModBinaryOverlay : IOblivionModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => OblivionMod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => OblivionMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => OblivionModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => OblivionModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IOblivionModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IOblivionModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IOblivionModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public OblivionRelease OblivionRelease { get; }
        public GameRelease GameRelease => OblivionRelease.ToGameRelease();
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        uint IModGetter.GetRecordCount() => this.GetRecordCount();
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public bool CanUseLocalization => false;
        public bool UsingLocalization => false;
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => OblivionModCommon.Instance.EnumerateFormLinks(this);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => OblivionModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IOblivionMod, IOblivionModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IOblivionMod, IOblivionModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IOblivionMod, IOblivionModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        uint IModGetter.NextFormID => ModHeader.Stats.NextFormID;
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _stream;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _stream.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private IOblivionModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? OblivionModHeaderBinaryOverlay.OblivionModHeaderFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max), _package) : default;
        public IOblivionModHeaderGetter ModHeader => _ModHeader ?? new OblivionModHeader();
        #endregion
        #region GameSettings
        private List<RangeInt64>? _GameSettingsLocations;
        private IOblivionGroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocations != null ? OblivionGroupBinaryOverlay<IGameSettingGetter>.OblivionGroupFactory(_stream, _GameSettingsLocations, _package) : default;
        public IOblivionGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new OblivionGroup<GameSetting>(this);
        #endregion
        #region Globals
        private List<RangeInt64>? _GlobalsLocations;
        private IOblivionGroupGetter<IGlobalGetter>? _Globals => _GlobalsLocations != null ? OblivionGroupBinaryOverlay<IGlobalGetter>.OblivionGroupFactory(_stream, _GlobalsLocations, _package) : default;
        public IOblivionGroupGetter<IGlobalGetter> Globals => _Globals ?? new OblivionGroup<Global>(this);
        #endregion
        #region Classes
        private List<RangeInt64>? _ClassesLocations;
        private IOblivionGroupGetter<IClassGetter>? _Classes => _ClassesLocations != null ? OblivionGroupBinaryOverlay<IClassGetter>.OblivionGroupFactory(_stream, _ClassesLocations, _package) : default;
        public IOblivionGroupGetter<IClassGetter> Classes => _Classes ?? new OblivionGroup<Class>(this);
        #endregion
        #region Factions
        private List<RangeInt64>? _FactionsLocations;
        private IOblivionGroupGetter<IFactionGetter>? _Factions => _FactionsLocations != null ? OblivionGroupBinaryOverlay<IFactionGetter>.OblivionGroupFactory(_stream, _FactionsLocations, _package) : default;
        public IOblivionGroupGetter<IFactionGetter> Factions => _Factions ?? new OblivionGroup<Faction>(this);
        #endregion
        #region Hairs
        private List<RangeInt64>? _HairsLocations;
        private IOblivionGroupGetter<IHairGetter>? _Hairs => _HairsLocations != null ? OblivionGroupBinaryOverlay<IHairGetter>.OblivionGroupFactory(_stream, _HairsLocations, _package) : default;
        public IOblivionGroupGetter<IHairGetter> Hairs => _Hairs ?? new OblivionGroup<Hair>(this);
        #endregion
        #region Eyes
        private List<RangeInt64>? _EyesLocations;
        private IOblivionGroupGetter<IEyeGetter>? _Eyes => _EyesLocations != null ? OblivionGroupBinaryOverlay<IEyeGetter>.OblivionGroupFactory(_stream, _EyesLocations, _package) : default;
        public IOblivionGroupGetter<IEyeGetter> Eyes => _Eyes ?? new OblivionGroup<Eye>(this);
        #endregion
        #region Races
        private List<RangeInt64>? _RacesLocations;
        private IOblivionGroupGetter<IRaceGetter>? _Races => _RacesLocations != null ? OblivionGroupBinaryOverlay<IRaceGetter>.OblivionGroupFactory(_stream, _RacesLocations, _package) : default;
        public IOblivionGroupGetter<IRaceGetter> Races => _Races ?? new OblivionGroup<Race>(this);
        #endregion
        #region Sounds
        private List<RangeInt64>? _SoundsLocations;
        private IOblivionGroupGetter<ISoundGetter>? _Sounds => _SoundsLocations != null ? OblivionGroupBinaryOverlay<ISoundGetter>.OblivionGroupFactory(_stream, _SoundsLocations, _package) : default;
        public IOblivionGroupGetter<ISoundGetter> Sounds => _Sounds ?? new OblivionGroup<Sound>(this);
        #endregion
        #region Skills
        private List<RangeInt64>? _SkillsLocations;
        private IOblivionGroupGetter<ISkillRecordGetter>? _Skills => _SkillsLocations != null ? OblivionGroupBinaryOverlay<ISkillRecordGetter>.OblivionGroupFactory(_stream, _SkillsLocations, _package) : default;
        public IOblivionGroupGetter<ISkillRecordGetter> Skills => _Skills ?? new OblivionGroup<SkillRecord>(this);
        #endregion
        #region MagicEffects
        private List<RangeInt64>? _MagicEffectsLocations;
        private IOblivionGroupGetter<IMagicEffectGetter>? _MagicEffects => _MagicEffectsLocations != null ? OblivionGroupBinaryOverlay<IMagicEffectGetter>.OblivionGroupFactory(_stream, _MagicEffectsLocations, _package) : default;
        public IOblivionGroupGetter<IMagicEffectGetter> MagicEffects => _MagicEffects ?? new OblivionGroup<MagicEffect>(this);
        #endregion
        #region Scripts
        private List<RangeInt64>? _ScriptsLocations;
        private IOblivionGroupGetter<IScriptGetter>? _Scripts => _ScriptsLocations != null ? OblivionGroupBinaryOverlay<IScriptGetter>.OblivionGroupFactory(_stream, _ScriptsLocations, _package) : default;
        public IOblivionGroupGetter<IScriptGetter> Scripts => _Scripts ?? new OblivionGroup<Script>(this);
        #endregion
        #region LandTextures
        private List<RangeInt64>? _LandTexturesLocations;
        private IOblivionGroupGetter<ILandTextureGetter>? _LandTextures => _LandTexturesLocations != null ? OblivionGroupBinaryOverlay<ILandTextureGetter>.OblivionGroupFactory(_stream, _LandTexturesLocations, _package) : default;
        public IOblivionGroupGetter<ILandTextureGetter> LandTextures => _LandTextures ?? new OblivionGroup<LandTexture>(this);
        #endregion
        #region Enchantments
        private List<RangeInt64>? _EnchantmentsLocations;
        private IOblivionGroupGetter<IEnchantmentGetter>? _Enchantments => _EnchantmentsLocations != null ? OblivionGroupBinaryOverlay<IEnchantmentGetter>.OblivionGroupFactory(_stream, _EnchantmentsLocations, _package) : default;
        public IOblivionGroupGetter<IEnchantmentGetter> Enchantments => _Enchantments ?? new OblivionGroup<Enchantment>(this);
        #endregion
        #region Spells
        private List<RangeInt64>? _SpellsLocations;
        private IOblivionGroupGetter<ISpellGetter>? _Spells => _SpellsLocations != null ? OblivionGroupBinaryOverlay<ISpellGetter>.OblivionGroupFactory(_stream, _SpellsLocations, _package) : default;
        public IOblivionGroupGetter<ISpellGetter> Spells => _Spells ?? new OblivionGroup<Spell>(this);
        #endregion
        #region Birthsigns
        private List<RangeInt64>? _BirthsignsLocations;
        private IOblivionGroupGetter<IBirthsignGetter>? _Birthsigns => _BirthsignsLocations != null ? OblivionGroupBinaryOverlay<IBirthsignGetter>.OblivionGroupFactory(_stream, _BirthsignsLocations, _package) : default;
        public IOblivionGroupGetter<IBirthsignGetter> Birthsigns => _Birthsigns ?? new OblivionGroup<Birthsign>(this);
        #endregion
        #region Activators
        private List<RangeInt64>? _ActivatorsLocations;
        private IOblivionGroupGetter<IActivatorGetter>? _Activators => _ActivatorsLocations != null ? OblivionGroupBinaryOverlay<IActivatorGetter>.OblivionGroupFactory(_stream, _ActivatorsLocations, _package) : default;
        public IOblivionGroupGetter<IActivatorGetter> Activators => _Activators ?? new OblivionGroup<Activator>(this);
        #endregion
        #region AlchemicalApparatus
        private List<RangeInt64>? _AlchemicalApparatusLocations;
        private IOblivionGroupGetter<IAlchemicalApparatusGetter>? _AlchemicalApparatus => _AlchemicalApparatusLocations != null ? OblivionGroupBinaryOverlay<IAlchemicalApparatusGetter>.OblivionGroupFactory(_stream, _AlchemicalApparatusLocations, _package) : default;
        public IOblivionGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatus => _AlchemicalApparatus ?? new OblivionGroup<AlchemicalApparatus>(this);
        #endregion
        #region Armors
        private List<RangeInt64>? _ArmorsLocations;
        private IOblivionGroupGetter<IArmorGetter>? _Armors => _ArmorsLocations != null ? OblivionGroupBinaryOverlay<IArmorGetter>.OblivionGroupFactory(_stream, _ArmorsLocations, _package) : default;
        public IOblivionGroupGetter<IArmorGetter> Armors => _Armors ?? new OblivionGroup<Armor>(this);
        #endregion
        #region Books
        private List<RangeInt64>? _BooksLocations;
        private IOblivionGroupGetter<IBookGetter>? _Books => _BooksLocations != null ? OblivionGroupBinaryOverlay<IBookGetter>.OblivionGroupFactory(_stream, _BooksLocations, _package) : default;
        public IOblivionGroupGetter<IBookGetter> Books => _Books ?? new OblivionGroup<Book>(this);
        #endregion
        #region Clothes
        private List<RangeInt64>? _ClothesLocations;
        private IOblivionGroupGetter<IClothingGetter>? _Clothes => _ClothesLocations != null ? OblivionGroupBinaryOverlay<IClothingGetter>.OblivionGroupFactory(_stream, _ClothesLocations, _package) : default;
        public IOblivionGroupGetter<IClothingGetter> Clothes => _Clothes ?? new OblivionGroup<Clothing>(this);
        #endregion
        #region Containers
        private List<RangeInt64>? _ContainersLocations;
        private IOblivionGroupGetter<IContainerGetter>? _Containers => _ContainersLocations != null ? OblivionGroupBinaryOverlay<IContainerGetter>.OblivionGroupFactory(_stream, _ContainersLocations, _package) : default;
        public IOblivionGroupGetter<IContainerGetter> Containers => _Containers ?? new OblivionGroup<Container>(this);
        #endregion
        #region Doors
        private List<RangeInt64>? _DoorsLocations;
        private IOblivionGroupGetter<IDoorGetter>? _Doors => _DoorsLocations != null ? OblivionGroupBinaryOverlay<IDoorGetter>.OblivionGroupFactory(_stream, _DoorsLocations, _package) : default;
        public IOblivionGroupGetter<IDoorGetter> Doors => _Doors ?? new OblivionGroup<Door>(this);
        #endregion
        #region Ingredients
        private List<RangeInt64>? _IngredientsLocations;
        private IOblivionGroupGetter<IIngredientGetter>? _Ingredients => _IngredientsLocations != null ? OblivionGroupBinaryOverlay<IIngredientGetter>.OblivionGroupFactory(_stream, _IngredientsLocations, _package) : default;
        public IOblivionGroupGetter<IIngredientGetter> Ingredients => _Ingredients ?? new OblivionGroup<Ingredient>(this);
        #endregion
        #region Lights
        private List<RangeInt64>? _LightsLocations;
        private IOblivionGroupGetter<ILightGetter>? _Lights => _LightsLocations != null ? OblivionGroupBinaryOverlay<ILightGetter>.OblivionGroupFactory(_stream, _LightsLocations, _package) : default;
        public IOblivionGroupGetter<ILightGetter> Lights => _Lights ?? new OblivionGroup<Light>(this);
        #endregion
        #region Miscellaneous
        private List<RangeInt64>? _MiscellaneousLocations;
        private IOblivionGroupGetter<IMiscellaneousGetter>? _Miscellaneous => _MiscellaneousLocations != null ? OblivionGroupBinaryOverlay<IMiscellaneousGetter>.OblivionGroupFactory(_stream, _MiscellaneousLocations, _package) : default;
        public IOblivionGroupGetter<IMiscellaneousGetter> Miscellaneous => _Miscellaneous ?? new OblivionGroup<Miscellaneous>(this);
        #endregion
        #region Statics
        private List<RangeInt64>? _StaticsLocations;
        private IOblivionGroupGetter<IStaticGetter>? _Statics => _StaticsLocations != null ? OblivionGroupBinaryOverlay<IStaticGetter>.OblivionGroupFactory(_stream, _StaticsLocations, _package) : default;
        public IOblivionGroupGetter<IStaticGetter> Statics => _Statics ?? new OblivionGroup<Static>(this);
        #endregion
        #region Grasses
        private List<RangeInt64>? _GrassesLocations;
        private IOblivionGroupGetter<IGrassGetter>? _Grasses => _GrassesLocations != null ? OblivionGroupBinaryOverlay<IGrassGetter>.OblivionGroupFactory(_stream, _GrassesLocations, _package) : default;
        public IOblivionGroupGetter<IGrassGetter> Grasses => _Grasses ?? new OblivionGroup<Grass>(this);
        #endregion
        #region Trees
        private List<RangeInt64>? _TreesLocations;
        private IOblivionGroupGetter<ITreeGetter>? _Trees => _TreesLocations != null ? OblivionGroupBinaryOverlay<ITreeGetter>.OblivionGroupFactory(_stream, _TreesLocations, _package) : default;
        public IOblivionGroupGetter<ITreeGetter> Trees => _Trees ?? new OblivionGroup<Tree>(this);
        #endregion
        #region Flora
        private List<RangeInt64>? _FloraLocations;
        private IOblivionGroupGetter<IFloraGetter>? _Flora => _FloraLocations != null ? OblivionGroupBinaryOverlay<IFloraGetter>.OblivionGroupFactory(_stream, _FloraLocations, _package) : default;
        public IOblivionGroupGetter<IFloraGetter> Flora => _Flora ?? new OblivionGroup<Flora>(this);
        #endregion
        #region Furniture
        private List<RangeInt64>? _FurnitureLocations;
        private IOblivionGroupGetter<IFurnitureGetter>? _Furniture => _FurnitureLocations != null ? OblivionGroupBinaryOverlay<IFurnitureGetter>.OblivionGroupFactory(_stream, _FurnitureLocations, _package) : default;
        public IOblivionGroupGetter<IFurnitureGetter> Furniture => _Furniture ?? new OblivionGroup<Furniture>(this);
        #endregion
        #region Weapons
        private List<RangeInt64>? _WeaponsLocations;
        private IOblivionGroupGetter<IWeaponGetter>? _Weapons => _WeaponsLocations != null ? OblivionGroupBinaryOverlay<IWeaponGetter>.OblivionGroupFactory(_stream, _WeaponsLocations, _package) : default;
        public IOblivionGroupGetter<IWeaponGetter> Weapons => _Weapons ?? new OblivionGroup<Weapon>(this);
        #endregion
        #region Ammunitions
        private List<RangeInt64>? _AmmunitionsLocations;
        private IOblivionGroupGetter<IAmmunitionGetter>? _Ammunitions => _AmmunitionsLocations != null ? OblivionGroupBinaryOverlay<IAmmunitionGetter>.OblivionGroupFactory(_stream, _AmmunitionsLocations, _package) : default;
        public IOblivionGroupGetter<IAmmunitionGetter> Ammunitions => _Ammunitions ?? new OblivionGroup<Ammunition>(this);
        #endregion
        #region Npcs
        private List<RangeInt64>? _NpcsLocations;
        private IOblivionGroupGetter<INpcGetter>? _Npcs => _NpcsLocations != null ? OblivionGroupBinaryOverlay<INpcGetter>.OblivionGroupFactory(_stream, _NpcsLocations, _package) : default;
        public IOblivionGroupGetter<INpcGetter> Npcs => _Npcs ?? new OblivionGroup<Npc>(this);
        #endregion
        #region Creatures
        private List<RangeInt64>? _CreaturesLocations;
        private IOblivionGroupGetter<ICreatureGetter>? _Creatures => _CreaturesLocations != null ? OblivionGroupBinaryOverlay<ICreatureGetter>.OblivionGroupFactory(_stream, _CreaturesLocations, _package) : default;
        public IOblivionGroupGetter<ICreatureGetter> Creatures => _Creatures ?? new OblivionGroup<Creature>(this);
        #endregion
        #region LeveledCreatures
        private List<RangeInt64>? _LeveledCreaturesLocations;
        private IOblivionGroupGetter<ILeveledCreatureGetter>? _LeveledCreatures => _LeveledCreaturesLocations != null ? OblivionGroupBinaryOverlay<ILeveledCreatureGetter>.OblivionGroupFactory(_stream, _LeveledCreaturesLocations, _package) : default;
        public IOblivionGroupGetter<ILeveledCreatureGetter> LeveledCreatures => _LeveledCreatures ?? new OblivionGroup<LeveledCreature>(this);
        #endregion
        #region SoulGems
        private List<RangeInt64>? _SoulGemsLocations;
        private IOblivionGroupGetter<ISoulGemGetter>? _SoulGems => _SoulGemsLocations != null ? OblivionGroupBinaryOverlay<ISoulGemGetter>.OblivionGroupFactory(_stream, _SoulGemsLocations, _package) : default;
        public IOblivionGroupGetter<ISoulGemGetter> SoulGems => _SoulGems ?? new OblivionGroup<SoulGem>(this);
        #endregion
        #region Keys
        private List<RangeInt64>? _KeysLocations;
        private IOblivionGroupGetter<IKeyGetter>? _Keys => _KeysLocations != null ? OblivionGroupBinaryOverlay<IKeyGetter>.OblivionGroupFactory(_stream, _KeysLocations, _package) : default;
        public IOblivionGroupGetter<IKeyGetter> Keys => _Keys ?? new OblivionGroup<Key>(this);
        #endregion
        #region Potions
        private List<RangeInt64>? _PotionsLocations;
        private IOblivionGroupGetter<IPotionGetter>? _Potions => _PotionsLocations != null ? OblivionGroupBinaryOverlay<IPotionGetter>.OblivionGroupFactory(_stream, _PotionsLocations, _package) : default;
        public IOblivionGroupGetter<IPotionGetter> Potions => _Potions ?? new OblivionGroup<Potion>(this);
        #endregion
        #region Subspaces
        private List<RangeInt64>? _SubspacesLocations;
        private IOblivionGroupGetter<ISubspaceGetter>? _Subspaces => _SubspacesLocations != null ? OblivionGroupBinaryOverlay<ISubspaceGetter>.OblivionGroupFactory(_stream, _SubspacesLocations, _package) : default;
        public IOblivionGroupGetter<ISubspaceGetter> Subspaces => _Subspaces ?? new OblivionGroup<Subspace>(this);
        #endregion
        #region SigilStones
        private List<RangeInt64>? _SigilStonesLocations;
        private IOblivionGroupGetter<ISigilStoneGetter>? _SigilStones => _SigilStonesLocations != null ? OblivionGroupBinaryOverlay<ISigilStoneGetter>.OblivionGroupFactory(_stream, _SigilStonesLocations, _package) : default;
        public IOblivionGroupGetter<ISigilStoneGetter> SigilStones => _SigilStones ?? new OblivionGroup<SigilStone>(this);
        #endregion
        #region LeveledItems
        private List<RangeInt64>? _LeveledItemsLocations;
        private IOblivionGroupGetter<ILeveledItemGetter>? _LeveledItems => _LeveledItemsLocations != null ? OblivionGroupBinaryOverlay<ILeveledItemGetter>.OblivionGroupFactory(_stream, _LeveledItemsLocations, _package) : default;
        public IOblivionGroupGetter<ILeveledItemGetter> LeveledItems => _LeveledItems ?? new OblivionGroup<LeveledItem>(this);
        #endregion
        #region Weathers
        private List<RangeInt64>? _WeathersLocations;
        private IOblivionGroupGetter<IWeatherGetter>? _Weathers => _WeathersLocations != null ? OblivionGroupBinaryOverlay<IWeatherGetter>.OblivionGroupFactory(_stream, _WeathersLocations, _package) : default;
        public IOblivionGroupGetter<IWeatherGetter> Weathers => _Weathers ?? new OblivionGroup<Weather>(this);
        #endregion
        #region Climates
        private List<RangeInt64>? _ClimatesLocations;
        private IOblivionGroupGetter<IClimateGetter>? _Climates => _ClimatesLocations != null ? OblivionGroupBinaryOverlay<IClimateGetter>.OblivionGroupFactory(_stream, _ClimatesLocations, _package) : default;
        public IOblivionGroupGetter<IClimateGetter> Climates => _Climates ?? new OblivionGroup<Climate>(this);
        #endregion
        #region Regions
        private List<RangeInt64>? _RegionsLocations;
        private IOblivionGroupGetter<IRegionGetter>? _Regions => _RegionsLocations != null ? OblivionGroupBinaryOverlay<IRegionGetter>.OblivionGroupFactory(_stream, _RegionsLocations, _package) : default;
        public IOblivionGroupGetter<IRegionGetter> Regions => _Regions ?? new OblivionGroup<Region>(this);
        #endregion
        #region Cells
        private RangeInt64? _CellsLocation;
        private IOblivionListGroupGetter<ICellBlockGetter>? _Cells => _CellsLocation.HasValue ? OblivionListGroupBinaryOverlay<ICellBlockGetter>.OblivionListGroupFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _CellsLocation!.Value.Min, _CellsLocation!.Value.Max), _package) : default;
        public IOblivionListGroupGetter<ICellBlockGetter> Cells => _Cells ?? new OblivionListGroup<CellBlock>();
        #endregion
        #region Worldspaces
        private List<RangeInt64>? _WorldspacesLocations;
        private IOblivionGroupGetter<IWorldspaceGetter>? _Worldspaces => _WorldspacesLocations != null ? OblivionGroupBinaryOverlay<IWorldspaceGetter>.OblivionGroupFactory(_stream, _WorldspacesLocations, _package) : default;
        public IOblivionGroupGetter<IWorldspaceGetter> Worldspaces => _Worldspaces ?? new OblivionGroup<Worldspace>(this);
        #endregion
        #region DialogTopics
        private List<RangeInt64>? _DialogTopicsLocations;
        private IOblivionGroupGetter<IDialogTopicGetter>? _DialogTopics => _DialogTopicsLocations != null ? OblivionGroupBinaryOverlay<IDialogTopicGetter>.OblivionGroupFactory(_stream, _DialogTopicsLocations, _package) : default;
        public IOblivionGroupGetter<IDialogTopicGetter> DialogTopics => _DialogTopics ?? new OblivionGroup<DialogTopic>(this);
        #endregion
        #region Quests
        private List<RangeInt64>? _QuestsLocations;
        private IOblivionGroupGetter<IQuestGetter>? _Quests => _QuestsLocations != null ? OblivionGroupBinaryOverlay<IQuestGetter>.OblivionGroupFactory(_stream, _QuestsLocations, _package) : default;
        public IOblivionGroupGetter<IQuestGetter> Quests => _Quests ?? new OblivionGroup<Quest>(this);
        #endregion
        #region IdleAnimations
        private List<RangeInt64>? _IdleAnimationsLocations;
        private IOblivionGroupGetter<IIdleAnimationGetter>? _IdleAnimations => _IdleAnimationsLocations != null ? OblivionGroupBinaryOverlay<IIdleAnimationGetter>.OblivionGroupFactory(_stream, _IdleAnimationsLocations, _package) : default;
        public IOblivionGroupGetter<IIdleAnimationGetter> IdleAnimations => _IdleAnimations ?? new OblivionGroup<IdleAnimation>(this);
        #endregion
        #region AIPackages
        private List<RangeInt64>? _AIPackagesLocations;
        private IOblivionGroupGetter<IAIPackageGetter>? _AIPackages => _AIPackagesLocations != null ? OblivionGroupBinaryOverlay<IAIPackageGetter>.OblivionGroupFactory(_stream, _AIPackagesLocations, _package) : default;
        public IOblivionGroupGetter<IAIPackageGetter> AIPackages => _AIPackages ?? new OblivionGroup<AIPackage>(this);
        #endregion
        #region CombatStyles
        private List<RangeInt64>? _CombatStylesLocations;
        private IOblivionGroupGetter<ICombatStyleGetter>? _CombatStyles => _CombatStylesLocations != null ? OblivionGroupBinaryOverlay<ICombatStyleGetter>.OblivionGroupFactory(_stream, _CombatStylesLocations, _package) : default;
        public IOblivionGroupGetter<ICombatStyleGetter> CombatStyles => _CombatStyles ?? new OblivionGroup<CombatStyle>(this);
        #endregion
        #region LoadScreens
        private List<RangeInt64>? _LoadScreensLocations;
        private IOblivionGroupGetter<ILoadScreenGetter>? _LoadScreens => _LoadScreensLocations != null ? OblivionGroupBinaryOverlay<ILoadScreenGetter>.OblivionGroupFactory(_stream, _LoadScreensLocations, _package) : default;
        public IOblivionGroupGetter<ILoadScreenGetter> LoadScreens => _LoadScreens ?? new OblivionGroup<LoadScreen>(this);
        #endregion
        #region LeveledSpells
        private List<RangeInt64>? _LeveledSpellsLocations;
        private IOblivionGroupGetter<ILeveledSpellGetter>? _LeveledSpells => _LeveledSpellsLocations != null ? OblivionGroupBinaryOverlay<ILeveledSpellGetter>.OblivionGroupFactory(_stream, _LeveledSpellsLocations, _package) : default;
        public IOblivionGroupGetter<ILeveledSpellGetter> LeveledSpells => _LeveledSpells ?? new OblivionGroup<LeveledSpell>(this);
        #endregion
        #region AnimatedObjects
        private List<RangeInt64>? _AnimatedObjectsLocations;
        private IOblivionGroupGetter<IAnimatedObjectGetter>? _AnimatedObjects => _AnimatedObjectsLocations != null ? OblivionGroupBinaryOverlay<IAnimatedObjectGetter>.OblivionGroupFactory(_stream, _AnimatedObjectsLocations, _package) : default;
        public IOblivionGroupGetter<IAnimatedObjectGetter> AnimatedObjects => _AnimatedObjects ?? new OblivionGroup<AnimatedObject>(this);
        #endregion
        #region Waters
        private List<RangeInt64>? _WatersLocations;
        private IOblivionGroupGetter<IWaterGetter>? _Waters => _WatersLocations != null ? OblivionGroupBinaryOverlay<IWaterGetter>.OblivionGroupFactory(_stream, _WatersLocations, _package) : default;
        public IOblivionGroupGetter<IWaterGetter> Waters => _Waters ?? new OblivionGroup<Water>(this);
        #endregion
        #region EffectShaders
        private List<RangeInt64>? _EffectShadersLocations;
        private IOblivionGroupGetter<IEffectShaderGetter>? _EffectShaders => _EffectShadersLocations != null ? OblivionGroupBinaryOverlay<IEffectShaderGetter>.OblivionGroupFactory(_stream, _EffectShadersLocations, _package) : default;
        public IOblivionGroupGetter<IEffectShaderGetter> EffectShaders => _EffectShaders ?? new OblivionGroup<EffectShader>(this);
        #endregion
        protected OblivionModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose,
            OblivionRelease release)
        {
            this.ModKey = modKey;
            this.OblivionRelease = release;
            this._stream = stream;
            this._package = new BinaryOverlayFactoryPackage(stream.MetaData);
            this._shouldDispose = shouldDispose;
        }

        public static OblivionModBinaryOverlay OblivionModFactory(
            ModPath path,
            OblivionRelease release,
            BinaryReadParameters? param)
        {
            param ??= BinaryReadParameters.Default;
            var meta = ParsingMeta.Factory(param, release.ToGameRelease(), path);
            meta.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
            var stream = new MutagenBinaryReadStream(
                path: path.Path,
                metaData: meta);
            try
            {
                return OblivionModFactory(
                    stream: stream,
                    path.ModKey,
                    release: release,
                    shouldDispose: true);
            }
            catch (Exception)
            {
                stream.Dispose();
                throw;
            }
        }

        public static OblivionModBinaryOverlay OblivionModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            OblivionRelease release,
            bool shouldDispose)
        {
            var ret = new OblivionModBinaryOverlay(
                stream: stream,
                release: release,
                modKey: modKey,
                shouldDispose: shouldDispose);
            PluginBinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public ParseResult FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    return (int)OblivionMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    _GameSettingsLocations ??= new();
                    _GameSettingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.GLOB:
                {
                    _GlobalsLocations ??= new();
                    _GlobalsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Globals;
                }
                case RecordTypeInts.CLAS:
                {
                    _ClassesLocations ??= new();
                    _ClassesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    _FactionsLocations ??= new();
                    _FactionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Factions;
                }
                case RecordTypeInts.HAIR:
                {
                    _HairsLocations ??= new();
                    _HairsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Hairs;
                }
                case RecordTypeInts.EYES:
                {
                    _EyesLocations ??= new();
                    _EyesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Eyes;
                }
                case RecordTypeInts.RACE:
                {
                    _RacesLocations ??= new();
                    _RacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    _SoundsLocations ??= new();
                    _SoundsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Sounds;
                }
                case RecordTypeInts.SKIL:
                {
                    _SkillsLocations ??= new();
                    _SkillsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Skills;
                }
                case RecordTypeInts.MGEF:
                {
                    _MagicEffectsLocations ??= new();
                    _MagicEffectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.SCPT:
                {
                    _ScriptsLocations ??= new();
                    _ScriptsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Scripts;
                }
                case RecordTypeInts.LTEX:
                {
                    _LandTexturesLocations ??= new();
                    _LandTexturesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.LandTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    _EnchantmentsLocations ??= new();
                    _EnchantmentsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Enchantments;
                }
                case RecordTypeInts.SPEL:
                {
                    _SpellsLocations ??= new();
                    _SpellsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Spells;
                }
                case RecordTypeInts.BSGN:
                {
                    _BirthsignsLocations ??= new();
                    _BirthsignsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Birthsigns;
                }
                case RecordTypeInts.ACTI:
                {
                    _ActivatorsLocations ??= new();
                    _ActivatorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Activators;
                }
                case RecordTypeInts.APPA:
                {
                    _AlchemicalApparatusLocations ??= new();
                    _AlchemicalApparatusLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.AlchemicalApparatus;
                }
                case RecordTypeInts.ARMO:
                {
                    _ArmorsLocations ??= new();
                    _ArmorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    _BooksLocations ??= new();
                    _BooksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Books;
                }
                case RecordTypeInts.CLOT:
                {
                    _ClothesLocations ??= new();
                    _ClothesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Clothes;
                }
                case RecordTypeInts.CONT:
                {
                    _ContainersLocations ??= new();
                    _ContainersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    _DoorsLocations ??= new();
                    _DoorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    _IngredientsLocations ??= new();
                    _IngredientsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    _LightsLocations ??= new();
                    _LightsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    _MiscellaneousLocations ??= new();
                    _MiscellaneousLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Miscellaneous;
                }
                case RecordTypeInts.STAT:
                {
                    _StaticsLocations ??= new();
                    _StaticsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Statics;
                }
                case RecordTypeInts.GRAS:
                {
                    _GrassesLocations ??= new();
                    _GrassesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    _TreesLocations ??= new();
                    _TreesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    _FloraLocations ??= new();
                    _FloraLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Flora;
                }
                case RecordTypeInts.FURN:
                {
                    _FurnitureLocations ??= new();
                    _FurnitureLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    _WeaponsLocations ??= new();
                    _WeaponsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    _AmmunitionsLocations ??= new();
                    _AmmunitionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    _NpcsLocations ??= new();
                    _NpcsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.CREA:
                {
                    _CreaturesLocations ??= new();
                    _CreaturesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Creatures;
                }
                case RecordTypeInts.LVLC:
                {
                    _LeveledCreaturesLocations ??= new();
                    _LeveledCreaturesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.LeveledCreatures;
                }
                case RecordTypeInts.SLGM:
                {
                    _SoulGemsLocations ??= new();
                    _SoulGemsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.SoulGems;
                }
                case RecordTypeInts.KEYM:
                {
                    _KeysLocations ??= new();
                    _KeysLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    _PotionsLocations ??= new();
                    _PotionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Potions;
                }
                case RecordTypeInts.SBSP:
                {
                    _SubspacesLocations ??= new();
                    _SubspacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Subspaces;
                }
                case RecordTypeInts.SGST:
                {
                    _SigilStonesLocations ??= new();
                    _SigilStonesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.SigilStones;
                }
                case RecordTypeInts.LVLI:
                {
                    _LeveledItemsLocations ??= new();
                    _LeveledItemsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    _WeathersLocations ??= new();
                    _WeathersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Weathers;
                }
                case RecordTypeInts.CLMT:
                {
                    _ClimatesLocations ??= new();
                    _ClimatesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Climates;
                }
                case RecordTypeInts.REGN:
                {
                    _RegionsLocations ??= new();
                    _RegionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Regions;
                }
                case RecordTypeInts.CELL:
                {
                    _CellsLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    return (int)OblivionMod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    _WorldspacesLocations ??= new();
                    _WorldspacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.DIAL:
                {
                    _DialogTopicsLocations ??= new();
                    _DialogTopicsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.DialogTopics;
                }
                case RecordTypeInts.QUST:
                {
                    _QuestsLocations ??= new();
                    _QuestsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    _IdleAnimationsLocations ??= new();
                    _IdleAnimationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    _AIPackagesLocations ??= new();
                    _AIPackagesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.AIPackages;
                }
                case RecordTypeInts.CSTY:
                {
                    _CombatStylesLocations ??= new();
                    _CombatStylesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    _LoadScreensLocations ??= new();
                    _LoadScreensLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.LVSP:
                {
                    _LeveledSpellsLocations ??= new();
                    _LeveledSpellsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.LeveledSpells;
                }
                case RecordTypeInts.ANIO:
                {
                    _AnimatedObjectsLocations ??= new();
                    _AnimatedObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    _WatersLocations ??= new();
                    _WatersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    _EffectShadersLocations ??= new();
                    _EffectShadersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)OblivionMod_FieldIndex.EffectShaders;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            OblivionModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IOblivionModGetter rhs) return false;
            return ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IOblivionModGetter? obj)
        {
            return ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((OblivionModCommon)((IOblivionModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => OblivionModMixIn.GetEqualsMask(this, (IOblivionModGetter)rhs, include);
    }

}
#endregion

#endregion

